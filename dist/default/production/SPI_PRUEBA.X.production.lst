

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Aug 11 09:58:57 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    65                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    66   000000                     
    67                           ; Generated 09/02/2023 GMT
    68                           ; 
    69                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4550 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101   000000                     
   102                           	psect	idataBANK0
   103   005E0E                     __pidataBANK0:
   104                           	callstack 0
   105                           
   106                           ;initializer for _Stat
   107   005E0E  01                 	db	1
   108   000000                     _TRISCbits	set	3988
   109   000000                     _LATAbits	set	3977
   110   000000                     _TRISAbits	set	3986
   111   000000                     _TRISBbits	set	3987
   112   000000                     _TRISD	set	3989
   113   000000                     _LATA5	set	31821
   114   000000                     _PIR1bits	set	3998
   115   000000                     _ADCON1bits	set	4033
   116   000000                     _ADRES	set	4035
   117   000000                     _ADCON0bits	set	4034
   118   000000                     _SSPCON1bits	set	4038
   119   000000                     _SSPSTATbits	set	4039
   120   000000                     _ADCON2bits	set	4032
   121   000000                     _SSPBUF	set	4041
   122                           
   123                           	psect	smallconst
   124   000800                     __psmallconst:
   125                           	callstack 0
   126   000800  00                 	db	0
   127   000801                     STR_3:
   128   000801  53                 	db	83	;'S'
   129   000802  75                 	db	117	;'u'
   130   000803  73                 	db	115	;'s'
   131   000804  63                 	db	99	;'c'
   132   000805  72                 	db	114	;'r'
   133   000806  69                 	db	105	;'i'
   134   000807  62                 	db	98	;'b'
   135   000808  65                 	db	101	;'e'
   136   000809  74                 	db	116	;'t'
   137   00080A  65                 	db	101	;'e'
   138   00080B  20                 	db	32
   139   00080C  61                 	db	97	;'a'
   140   00080D  6C                 	db	108	;'l'
   141   00080E  20                 	db	32
   142   00080F  63                 	db	99	;'c'
   143   000810  61                 	db	97	;'a'
   144   000811  6E                 	db	110	;'n'
   145   000812  61                 	db	97	;'a'
   146   000813  6C                 	db	108	;'l'
   147   000814  20                 	db	32
   148   000815  3A                 	db	58	;':'
   149   000816  44                 	db	68	;'D'
   150   000817  21                 	db	33
   151   000818  20                 	db	32
   152   000819  00                 	db	0
   153   00081A                     STR_4:
   154   00081A  22                 	db	34
   155   00081B  2A                 	db	42
   156   00081C  2B                 	db	43
   157   00081D  2C                 	db	44
   158   00081E  3A                 	db	58	;':'
   159   00081F  3B                 	db	59	;';'
   160   000820  3C                 	db	60	;'<'
   161   000821  3D                 	db	61	;'='
   162   000822  3E                 	db	62	;'>'
   163   000823  3F                 	db	63	;'?'
   164   000824  5B                 	db	91	;'['
   165   000825  5D                 	db	93	;']'
   166   000826  7C                 	db	124
   167   000827  7F                 	db	127
   168   000828  00                 	db	0
   169   000829                     STR_2:
   170   000829  68                 	db	104	;'h'
   171   00082A  6F                 	db	111	;'o'
   172   00082B  6C                 	db	108	;'l'
   173   00082C  61                 	db	97	;'a'
   174   00082D  2E                 	db	46
   175   00082E  74                 	db	116	;'t'
   176   00082F  78                 	db	120	;'x'
   177   000830  74                 	db	116	;'t'
   178   000831  00                 	db	0
   179   000832  00                 	db	0	; dummy byte at the end
   180   000000                     
   181                           ; #config settings
   182                           
   183                           	psect	cinit
   184   005C9E                     __pcinit:
   185                           	callstack 0
   186   005C9E                     start_initialization:
   187                           	callstack 0
   188   005C9E                     __initialization:
   189                           	callstack 0
   190                           
   191                           ; Initialize objects allocated to BANK0 (1 bytes)
   192                           ; load TBLPTR registers with __pidataBANK0
   193   005C9E  0E0E               	movlw	low __pidataBANK0
   194   005CA0  6EF6               	movwf	tblptrl,c
   195   005CA2  0E5E               	movlw	high __pidataBANK0
   196   005CA4  6EF7               	movwf	tblptrh,c
   197   005CA6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   198   005CA8  6EF8               	movwf	tblptru,c
   199   005CAA  0009               	tblrd		*+	;fetch initializer
   200   005CAC  CFF5 F0F7          	movff	tablat,__pdataBANK0
   201                           
   202                           ; Clear objects allocated to BIGRAM (558 bytes)
   203   005CB0  EE05  F0D2         	lfsr	0,__pbssBIGRAM
   204   005CB4  EE12 F02E          	lfsr	1,558
   205   005CB8                     clear_0:
   206   005CB8  6AEE               	clrf	postinc0,c
   207   005CBA  50E5               	movf	postdec1,w,c
   208   005CBC  50E1               	movf	fsr1l,w,c
   209   005CBE  E1FC               	bnz	clear_0
   210   005CC0  50E2               	movf	fsr1h,w,c
   211   005CC2  E1FA               	bnz	clear_0
   212                           
   213                           ; Clear objects allocated to BANK0 (37 bytes)
   214   005CC4  EE00  F0D2         	lfsr	0,__pbssBANK0
   215   005CC8  0E25               	movlw	37
   216   005CCA                     clear_1:
   217   005CCA  6AEE               	clrf	postinc0,c
   218   005CCC  06E8               	decf	wreg,f,c
   219   005CCE  E1FD               	bnz	clear_1
   220   005CD0                     end_of_initialization:
   221                           	callstack 0
   222   005CD0                     __end_of__initialization:
   223                           	callstack 0
   224   005CD0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   225   005CD2  6EF8               	movwf	tblptru,c
   226   005CD4  0100               	movlb	0
   227   005CD6  EFA0  F02C         	goto	_main	;jump to C main() function
   228                           
   229                           	psect	bssBANK0
   230   0000D2                     __pbssBANK0:
   231                           	callstack 0
   232   0000D2                     _Fsid:
   233                           	callstack 0
   234   0000D2                     	ds	2
   235   0000D4                     _FatFs@ff$F740:
   236                           	callstack 0
   237   0000D4                     	ds	2
   238   0000D6                     _CardType:
   239                           	callstack 0
   240   0000D6                     	ds	1
   241   0000D7                     _Fil:
   242                           	callstack 0
   243   0000D7                     	ds	32
   244                           
   245                           	psect	dataBANK0
   246   0000F7                     __pdataBANK0:
   247                           	callstack 0
   248   0000F7                     _Stat:
   249                           	callstack 0
   250   0000F7                     	ds	1
   251                           
   252                           	psect	bssBIGRAM
   253   0005D2                     __pbssBIGRAM:
   254                           	callstack 0
   255   0005D2                     _FatFs:
   256                           	callstack 0
   257   0005D2                     	ds	558
   258                           
   259                           	psect	cstackBANK0
   260   000060                     __pcstackBANK0:
   261                           	callstack 0
   262   000060                     remove_chain@res:
   263                           	callstack 0
   264   000060                     create_chain@res:
   265                           	callstack 0
   266   000060                     dir_sdi@ic:
   267                           	callstack 0
   268   000060                     find_volume@br:
   269                           	callstack 0
   270                           
   271                           ; 16 bytes @ 0x0
   272   000060                     	ds	1
   273   000061                     remove_chain@nxt:
   274                           	callstack 0
   275   000061                     create_chain@scl:
   276                           	callstack 0
   277                           
   278                           ; 4 bytes @ 0x1
   279   000061                     	ds	1
   280   000062                     dir_sdi@sect:
   281                           	callstack 0
   282                           
   283                           ; 4 bytes @ 0x2
   284   000062                     	ds	3
   285   000065                     create_chain@ncl:
   286                           	callstack 0
   287                           
   288                           ; 4 bytes @ 0x5
   289   000065                     	ds	1
   290   000066                     dir_sdi@clst:
   291                           	callstack 0
   292                           
   293                           ; 4 bytes @ 0x6
   294   000066                     	ds	3
   295   000069                     create_chain@cs:
   296                           	callstack 0
   297                           
   298                           ; 4 bytes @ 0x9
   299   000069                     	ds	4
   300   00006D                     dir_next@dp:
   301                           	callstack 0
   302   00006D                     f_write@fp:
   303                           	callstack 0
   304                           
   305                           ; 2 bytes @ 0xD
   306   00006D                     	ds	2
   307   00006F                     dir_next@stretch:
   308                           	callstack 0
   309   00006F                     f_write@buff:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xF
   313   00006F                     	ds	1
   314   000070                     _find_volume$1235:
   315                           	callstack 0
   316                           
   317                           ; 4 bytes @ 0x10
   318   000070                     	ds	1
   319   000071                     ??_dir_next:
   320   000071                     f_write@btw:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0x11
   324   000071                     	ds	2
   325   000073                     f_write@bw:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x13
   329   000073                     	ds	1
   330   000074                     _find_volume$1236:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x14
   334   000074                     	ds	1
   335   000075                     ??_f_write:
   336                           
   337                           ; 1 bytes @ 0x15
   338   000075                     	ds	1
   339   000076                     find_volume@szbfat:
   340                           	callstack 0
   341                           
   342                           ; 4 bytes @ 0x16
   343   000076                     	ds	3
   344   000079                     dir_next@c:
   345                           	callstack 0
   346                           
   347                           ; 2 bytes @ 0x19
   348   000079                     	ds	1
   349   00007A                     find_volume@pt:
   350                           	callstack 0
   351                           
   352                           ; 2 bytes @ 0x1A
   353   00007A                     	ds	1
   354   00007B                     dir_next@i:
   355                           	callstack 0
   356                           
   357                           ; 2 bytes @ 0x1B
   358   00007B                     	ds	1
   359   00007C                     find_volume@sysect:
   360                           	callstack 0
   361                           
   362                           ; 4 bytes @ 0x1C
   363   00007C                     	ds	1
   364   00007D                     dir_next@clst:
   365                           	callstack 0
   366                           
   367                           ; 4 bytes @ 0x1D
   368   00007D                     	ds	3
   369   000080                     find_volume@vol:
   370                           	callstack 0
   371                           
   372                           ; 2 bytes @ 0x20
   373   000080                     	ds	1
   374   000081                     f_write@res:
   375                           	callstack 0
   376   000081                     dir_alloc@dp:
   377                           	callstack 0
   378   000081                     dir_find@dp:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x21
   382   000081                     	ds	1
   383   000082                     find_volume@nrsv:
   384                           	callstack 0
   385   000082                     f_write@wbuff:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x22
   389   000082                     	ds	1
   390   000083                     dir_find@c:
   391                           	callstack 0
   392   000083                     dir_alloc@nent:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x23
   396   000083                     	ds	1
   397   000084                     f_write@csect:
   398                           	callstack 0
   399   000084                     dir_find@dir:
   400                           	callstack 0
   401   000084                     find_volume@tsect:
   402                           	callstack 0
   403                           
   404                           ; 4 bytes @ 0x24
   405   000084                     	ds	1
   406   000085                     ??_dir_alloc:
   407   000085                     f_write@cc:
   408                           	callstack 0
   409                           
   410                           ; 2 bytes @ 0x25
   411   000085                     	ds	1
   412   000086                     dir_find@res:
   413                           	callstack 0
   414                           
   415                           ; 1 bytes @ 0x26
   416   000086                     	ds	1
   417   000087                     follow_path@dp:
   418                           	callstack 0
   419   000087                     f_write@sect:
   420                           	callstack 0
   421                           
   422                           ; 4 bytes @ 0x27
   423   000087                     	ds	1
   424   000088                     dir_alloc@n:
   425                           	callstack 0
   426   000088                     find_volume@nclst:
   427                           	callstack 0
   428                           
   429                           ; 4 bytes @ 0x28
   430   000088                     	ds	1
   431   000089                     follow_path@path:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x29
   435   000089                     	ds	1
   436   00008A                     dir_alloc@res:
   437                           	callstack 0
   438                           
   439                           ; 1 bytes @ 0x2A
   440   00008A                     	ds	1
   441   00008B                     dir_register@dp:
   442                           	callstack 0
   443   00008B                     follow_path@dir:
   444                           	callstack 0
   445   00008B                     f_write@clst:
   446                           	callstack 0
   447                           
   448                           ; 4 bytes @ 0x2B
   449   00008B                     	ds	1
   450   00008C                     find_volume@stat:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0x2C
   454   00008C                     	ds	1
   455   00008D                     dir_register@res:
   456                           	callstack 0
   457   00008D                     follow_path@ns:
   458                           	callstack 0
   459   00008D                     find_volume@fasize:
   460                           	callstack 0
   461                           
   462                           ; 4 bytes @ 0x2D
   463   00008D                     	ds	1
   464   00008E                     follow_path@res:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x2E
   468   00008E                     	ds	1
   469   00008F                     f_write@wcnt:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x2F
   473   00008F                     	ds	2
   474   000091                     find_volume@bsect:
   475                           	callstack 0
   476                           
   477                           ; 4 bytes @ 0x31
   478   000091                     	ds	4
   479   000095                     find_volume@i:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x35
   483   000095                     	ds	2
   484   000097                     find_volume@fmt:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x37
   488   000097                     	ds	1
   489   000098                     find_volume@fs:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x38
   493   000098                     	ds	2
   494   00009A                     f_open@fp:
   495                           	callstack 0
   496                           
   497                           ; 2 bytes @ 0x3A
   498   00009A                     	ds	2
   499   00009C                     f_open@path:
   500                           	callstack 0
   501                           
   502                           ; 2 bytes @ 0x3C
   503   00009C                     	ds	2
   504   00009E                     f_open@mode:
   505                           	callstack 0
   506                           
   507                           ; 1 bytes @ 0x3E
   508   00009E                     	ds	1
   509   00009F                     ??_f_open:
   510                           
   511                           ; 1 bytes @ 0x3F
   512   00009F                     	ds	4
   513   0000A3                     f_open@sfn:
   514                           	callstack 0
   515                           
   516                           ; 12 bytes @ 0x43
   517   0000A3                     	ds	12
   518   0000AF                     f_open@cl:
   519                           	callstack 0
   520                           
   521                           ; 4 bytes @ 0x4F
   522   0000AF                     	ds	4
   523   0000B3                     f_open@dw:
   524                           	callstack 0
   525                           
   526                           ; 4 bytes @ 0x53
   527   0000B3                     	ds	4
   528   0000B7                     f_open@res:
   529                           	callstack 0
   530                           
   531                           ; 1 bytes @ 0x57
   532   0000B7                     	ds	1
   533   0000B8                     f_open@dir:
   534                           	callstack 0
   535                           
   536                           ; 2 bytes @ 0x58
   537   0000B8                     	ds	2
   538   0000BA                     f_open@dj:
   539                           	callstack 0
   540                           
   541                           ; 22 bytes @ 0x5A
   542   0000BA                     	ds	22
   543   0000D0                     main@bx:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x70
   547   0000D0                     	ds	2
   548                           
   549                           	psect	cstackCOMRAM
   550   000001                     __pcstackCOMRAM:
   551                           	callstack 0
   552   000001                     ?_mem_cmp:
   553                           	callstack 0
   554   000001                     ?_chk_chr:
   555                           	callstack 0
   556   000001                     ?_get_ldnumber:
   557                           	callstack 0
   558   000001                     ?___wmul:
   559                           	callstack 0
   560   000001                     ?_ld_clust:
   561                           	callstack 0
   562   000001                     ?___lmul:
   563                           	callstack 0
   564   000001                     ?___lldiv:
   565                           	callstack 0
   566   000001                     SPI_Write@x:
   567                           	callstack 0
   568   000001                     SPI_Exchange@data:
   569                           	callstack 0
   570   000001                     disk_status@pdrv:
   571                           	callstack 0
   572   000001                     mem_cpy@dst:
   573                           	callstack 0
   574   000001                     mem_set@dst:
   575                           	callstack 0
   576   000001                     mem_cmp@dst:
   577                           	callstack 0
   578   000001                     chk_chr@str:
   579                           	callstack 0
   580   000001                     ld_clust@fs:
   581                           	callstack 0
   582   000001                     st_clust@dir:
   583                           	callstack 0
   584   000001                     get_ldnumber@path:
   585                           	callstack 0
   586   000001                     ___wmul@multiplier:
   587                           	callstack 0
   588   000001                     ___lmul@multiplier:
   589                           	callstack 0
   590   000001                     ___lldiv@dividend:
   591                           	callstack 0
   592                           
   593                           ; 4 bytes @ 0x0
   594   000001                     	ds	1
   595   000002                     wait_ready@tmr:
   596                           	callstack 0
   597   000002                     rcvr_datablock@buff:
   598                           	callstack 0
   599   000002                     validate@obj:
   600                           	callstack 0
   601                           
   602                           ; 2 bytes @ 0x1
   603   000002                     	ds	1
   604   000003                     ??_get_ldnumber:
   605   000003                     mem_cpy@src:
   606                           	callstack 0
   607   000003                     mem_set@val:
   608                           	callstack 0
   609   000003                     mem_cmp@src:
   610                           	callstack 0
   611   000003                     chk_chr@chr:
   612                           	callstack 0
   613   000003                     ld_clust@dir:
   614                           	callstack 0
   615   000003                     ___wmul@multiplicand:
   616                           	callstack 0
   617   000003                     st_clust@cl:
   618                           	callstack 0
   619                           
   620                           ; 4 bytes @ 0x2
   621   000003                     	ds	1
   622   000004                     ??_validate:
   623   000004                     rcvr_datablock@btr:
   624                           	callstack 0
   625   000004                     xmit_datablock@buff:
   626                           	callstack 0
   627   000004                     ___send_cmd@arg:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0x3
   631   000004                     	ds	1
   632   000005                     ??_chk_chr:
   633   000005                     ??_ld_clust:
   634   000005                     mem_cpy@cnt:
   635                           	callstack 0
   636   000005                     mem_set@cnt:
   637                           	callstack 0
   638   000005                     mem_cmp@cnt:
   639                           	callstack 0
   640   000005                     get_ldnumber@tp:
   641                           	callstack 0
   642   000005                     ___wmul@product:
   643                           	callstack 0
   644   000005                     ___lmul@multiplicand:
   645                           	callstack 0
   646   000005                     ___lldiv@divisor:
   647                           	callstack 0
   648                           
   649                           ; 4 bytes @ 0x4
   650   000005                     	ds	1
   651   000006                     xmit_datablock@token:
   652                           	callstack 0
   653   000006                     rcvr_datablock@tmr:
   654                           	callstack 0
   655                           
   656                           ; 2 bytes @ 0x5
   657   000006                     	ds	1
   658   000007                     ??_mem_cpy:
   659   000007                     ??_mem_cmp:
   660   000007                     xmit_datablock@i:
   661                           	callstack 0
   662   000007                     mem_set@d:
   663                           	callstack 0
   664   000007                     get_ldnumber@vol:
   665                           	callstack 0
   666                           
   667                           ; 2 bytes @ 0x6
   668   000007                     	ds	1
   669   000008                     rcvr_datablock@token:
   670                           	callstack 0
   671   000008                     ___send_cmd@res:
   672                           	callstack 0
   673   000008                     validate@fil:
   674                           	callstack 0
   675                           
   676                           ; 2 bytes @ 0x7
   677   000008                     	ds	1
   678   000009                     xmit_datablock@resp:
   679                           	callstack 0
   680   000009                     ___send_cmd@n:
   681                           	callstack 0
   682   000009                     mem_cpy@d:
   683                           	callstack 0
   684   000009                     mem_cmp@d:
   685                           	callstack 0
   686   000009                     create_name@dp:
   687                           	callstack 0
   688   000009                     get_ldnumber@i:
   689                           	callstack 0
   690   000009                     ___lmul@product:
   691                           	callstack 0
   692   000009                     ___lldiv@quotient:
   693                           	callstack 0
   694                           
   695                           ; 4 bytes @ 0x8
   696   000009                     	ds	1
   697   00000A                     ___send_cmd@cmd:
   698                           	callstack 0
   699                           
   700                           ; 1 bytes @ 0x9
   701   00000A                     	ds	1
   702   00000B                     mem_cpy@s:
   703                           	callstack 0
   704   00000B                     mem_cmp@s:
   705                           	callstack 0
   706   00000B                     create_name@path:
   707                           	callstack 0
   708   00000B                     get_ldnumber@tt:
   709                           	callstack 0
   710   00000B                     send_cmd@arg:
   711                           	callstack 0
   712   00000B                     ld_clust@cl:
   713                           	callstack 0
   714                           
   715                           ; 4 bytes @ 0xA
   716   00000B                     	ds	2
   717   00000D                     ??_create_name:
   718   00000D                     ?_clust2sect:
   719                           	callstack 0
   720   00000D                     ___lldiv@counter:
   721                           	callstack 0
   722   00000D                     mem_cmp@r:
   723                           	callstack 0
   724   00000D                     clust2sect@fs:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0xC
   728   00000D                     	ds	2
   729   00000F                     send_cmd@cmd:
   730                           	callstack 0
   731   00000F                     _create_name$1131:
   732                           	callstack 0
   733   00000F                     clust2sect@clst:
   734                           	callstack 0
   735                           
   736                           ; 4 bytes @ 0xE
   737   00000F                     	ds	1
   738   000010                     send_cmd@res:
   739                           	callstack 0
   740                           
   741                           ; 1 bytes @ 0xF
   742   000010                     	ds	1
   743   000011                     ??_disk_initialize:
   744   000011                     disk_ioctl@cmd:
   745                           	callstack 0
   746   000011                     disk_read@buff:
   747                           	callstack 0
   748   000011                     disk_write@buff:
   749                           	callstack 0
   750   000011                     create_name@si:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0x10
   754   000011                     	ds	1
   755   000012                     disk_initialize@pdrv:
   756                           	callstack 0
   757   000012                     disk_ioctl@buff:
   758                           	callstack 0
   759                           
   760                           ; 2 bytes @ 0x11
   761   000012                     	ds	1
   762   000013                     ??_clust2sect:
   763   000013                     create_name@b:
   764                           	callstack 0
   765   000013                     disk_initialize@ocr:
   766                           	callstack 0
   767   000013                     disk_read@sector:
   768                           	callstack 0
   769   000013                     disk_write@sector:
   770                           	callstack 0
   771                           
   772                           ; 4 bytes @ 0x12
   773   000013                     	ds	1
   774   000014                     ??_disk_ioctl:
   775   000014                     create_name@ni:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x13
   779   000014                     	ds	2
   780   000016                     create_name@p:
   781                           	callstack 0
   782                           
   783                           ; 2 bytes @ 0x15
   784   000016                     	ds	1
   785   000017                     _disk_initialize$641:
   786                           	callstack 0
   787   000017                     disk_read@count:
   788                           	callstack 0
   789   000017                     disk_write@count:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x16
   793   000017                     	ds	1
   794   000018                     create_name@d:
   795                           	callstack 0
   796                           
   797                           ; 1 bytes @ 0x17
   798   000018                     	ds	1
   799   000019                     ??_disk_write:
   800   000019                     disk_initialize@cmd:
   801                           	callstack 0
   802   000019                     disk_read@pdrv:
   803                           	callstack 0
   804   000019                     create_name@sfn:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x18
   808   000019                     	ds	1
   809   00001A                     disk_initialize@ty:
   810                           	callstack 0
   811   00001A                     disk_write@pdrv:
   812                           	callstack 0
   813   00001A                     _disk_read$650:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x19
   817   00001A                     	ds	1
   818   00001B                     disk_initialize@tmr:
   819                           	callstack 0
   820   00001B                     sync_window@fs:
   821                           	callstack 0
   822   00001B                     create_name@i:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x1A
   826   00001B                     	ds	1
   827   00001C                     disk_read@cmd:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x1B
   831   00001C                     	ds	1
   832   00001D                     ??_sync_window:
   833   00001D                     disk_initialize@n:
   834                           	callstack 0
   835   00001D                     create_name@c:
   836                           	callstack 0
   837                           
   838                           ; 1 bytes @ 0x1C
   839   00001D                     	ds	2
   840   00001F                     disk_ioctl@csd:
   841                           	callstack 0
   842                           
   843                           ; 16 bytes @ 0x1E
   844   00001F                     	ds	10
   845   000029                     sync_window@res:
   846                           	callstack 0
   847                           
   848                           ; 1 bytes @ 0x28
   849   000029                     	ds	1
   850   00002A                     sync_window@nf:
   851                           	callstack 0
   852                           
   853                           ; 2 bytes @ 0x29
   854   00002A                     	ds	2
   855   00002C                     sync_window@wsect:
   856                           	callstack 0
   857                           
   858                           ; 4 bytes @ 0x2B
   859   00002C                     	ds	3
   860   00002F                     disk_ioctl@pdrv:
   861                           	callstack 0
   862                           
   863                           ; 1 bytes @ 0x2E
   864   00002F                     	ds	1
   865   000030                     move_window@fs:
   866                           	callstack 0
   867   000030                     disk_ioctl@csize:
   868                           	callstack 0
   869                           
   870                           ; 4 bytes @ 0x2F
   871   000030                     	ds	2
   872   000032                     move_window@sector:
   873                           	callstack 0
   874                           
   875                           ; 4 bytes @ 0x31
   876   000032                     	ds	2
   877   000034                     disk_ioctl@res:
   878                           	callstack 0
   879                           
   880                           ; 1 bytes @ 0x33
   881   000034                     	ds	1
   882   000035                     disk_ioctl@n:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x34
   886   000035                     	ds	1
   887   000036                     disk_ioctl@ptr:
   888                           	callstack 0
   889                           
   890                           ; 2 bytes @ 0x35
   891   000036                     	ds	2
   892   000038                     sync_fs@fs:
   893                           	callstack 0
   894                           
   895                           ; 2 bytes @ 0x37
   896   000038                     	ds	2
   897   00003A                     ??_sync_fs:
   898   00003A                     move_window@res:
   899                           	callstack 0
   900                           
   901                           ; 1 bytes @ 0x39
   902   00003A                     	ds	1
   903   00003B                     ?_get_fat:
   904                           	callstack 0
   905   00003B                     get_fat@fs:
   906                           	callstack 0
   907   00003B                     put_fat@fs:
   908                           	callstack 0
   909   00003B                     check_fs@fs:
   910                           	callstack 0
   911                           
   912                           ; 2 bytes @ 0x3A
   913   00003B                     	ds	2
   914   00003D                     get_fat@clst:
   915                           	callstack 0
   916   00003D                     put_fat@clst:
   917                           	callstack 0
   918   00003D                     check_fs@sect:
   919                           	callstack 0
   920                           
   921                           ; 4 bytes @ 0x3C
   922   00003D                     	ds	4
   923   000041                     ??_get_fat:
   924   000041                     ??_check_fs:
   925   000041                     put_fat@val:
   926                           	callstack 0
   927                           
   928                           ; 4 bytes @ 0x40
   929   000041                     	ds	1
   930   000042                     sync_fs@res:
   931                           	callstack 0
   932                           
   933                           ; 1 bytes @ 0x41
   934   000042                     	ds	1
   935   000043                     f_sync@fp:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0x42
   939   000043                     	ds	2
   940   000045                     ??_put_fat:
   941   000045                     f_sync@res:
   942                           	callstack 0
   943   000045                     find_volume@rfs:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x44
   947   000045                     	ds	1
   948   000046                     f_sync@dir:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x45
   952   000046                     	ds	1
   953   000047                     find_volume@path:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x46
   957   000047                     	ds	1
   958   000048                     f_close@fp:
   959                           	callstack 0
   960                           
   961                           ; 2 bytes @ 0x47
   962   000048                     	ds	1
   963   000049                     find_volume@wmode:
   964                           	callstack 0
   965   000049                     _get_fat$881:
   966                           	callstack 0
   967                           
   968                           ; 2 bytes @ 0x48
   969   000049                     	ds	1
   970   00004A                     ??_find_volume:
   971   00004A                     f_close@res:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x49
   975   00004A                     	ds	1
   976   00004B                     get_fat@val:
   977                           	callstack 0
   978                           
   979                           ; 4 bytes @ 0x4A
   980   00004B                     	ds	2
   981   00004D                     _put_fat$907:
   982                           	callstack 0
   983                           
   984                           ; 2 bytes @ 0x4C
   985   00004D                     	ds	2
   986   00004F                     get_fat@wc:
   987                           	callstack 0
   988   00004F                     _put_fat$908:
   989                           	callstack 0
   990                           
   991                           ; 2 bytes @ 0x4E
   992   00004F                     	ds	2
   993   000051                     get_fat@p:
   994                           	callstack 0
   995   000051                     put_fat@bc:
   996                           	callstack 0
   997                           
   998                           ; 2 bytes @ 0x50
   999   000051                     	ds	1
  1000   000052                     f_mount@fs:
  1001                           	callstack 0
  1002                           
  1003                           ; 2 bytes @ 0x51
  1004   000052                     	ds	1
  1005   000053                     put_fat@res:
  1006                           	callstack 0
  1007   000053                     get_fat@bc:
  1008                           	callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x52
  1011   000053                     	ds	1
  1012   000054                     put_fat@p:
  1013                           	callstack 0
  1014   000054                     f_mount@path:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x53
  1018   000054                     	ds	1
  1019   000055                     dir_sdi@dp:
  1020                           	callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x54
  1023   000055                     	ds	1
  1024   000056                     ?_create_chain:
  1025                           	callstack 0
  1026   000056                     f_mount@opt:
  1027                           	callstack 0
  1028   000056                     remove_chain@fs:
  1029                           	callstack 0
  1030   000056                     create_chain@fs:
  1031                           	callstack 0
  1032                           
  1033                           ; 2 bytes @ 0x55
  1034   000056                     	ds	1
  1035   000057                     f_mount@res:
  1036                           	callstack 0
  1037   000057                     dir_sdi@idx:
  1038                           	callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x56
  1041   000057                     	ds	1
  1042   000058                     f_mount@cfs:
  1043                           	callstack 0
  1044   000058                     remove_chain@clst:
  1045                           	callstack 0
  1046   000058                     create_chain@clst:
  1047                           	callstack 0
  1048                           
  1049                           ; 4 bytes @ 0x57
  1050   000058                     	ds	1
  1051   000059                     ??_dir_sdi:
  1052                           
  1053                           ; 1 bytes @ 0x58
  1054   000059                     	ds	1
  1055   00005A                     f_mount@rp:
  1056                           	callstack 0
  1057                           
  1058                           ; 2 bytes @ 0x59
  1059   00005A                     	ds	2
  1060   00005C                     f_mount@vol:
  1061                           	callstack 0
  1062                           
  1063                           ; 2 bytes @ 0x5B
  1064   00005C                     	ds	4
  1065   000060                     
  1066                           ; 1 bytes @ 0x5F
  1067 ;;
  1068 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1069 ;;
  1070 ;; *************** function _main *****************
  1071 ;; Defined at:
  1072 ;;		line 9 in file "Programa_principal.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  bx              2  112[BANK0 ] unsigned short 
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1086 ;;      Params:         0       0       0       0       0       0       0       0       0
  1087 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1089 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1090 ;;Total ram usage:        2 bytes
  1091 ;; Hardware stack levels required when called: 14
  1092 ;; This function calls:
  1093 ;;		_SPI_Init_Master
  1094 ;;		_f_close
  1095 ;;		_f_mount
  1096 ;;		_f_open
  1097 ;;		_f_write
  1098 ;; This function is called by:
  1099 ;;		Startup code after reset
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text0
  1104   005940                     __ptext0:
  1105                           	callstack 0
  1106   005940                     _main:
  1107                           	callstack 17
  1108   005940                     
  1109                           ;Programa_principal.c: 10:     UINT bx;;Programa_principal.c: 11:     SPI_Init_Master();
  1110   005940  ECB3  F02E         	call	_SPI_Init_Master	;wreg free
  1111   005944                     
  1112                           ;Programa_principal.c: 12:     TRISD = 0x00;
  1113   005944  0E00               	movlw	0
  1114   005946  6E95               	movwf	149,c	;volatile
  1115   005948                     
  1116                           ;Programa_principal.c: 13:     if(f_mount(&FatFs,"",1) == FR_OK)
  1117   005948  0ED2               	movlw	low _FatFs
  1118   00594A  6E52               	movwf	f_mount@fs^0,c
  1119   00594C  0E05               	movlw	high _FatFs
  1120   00594E  6E53               	movwf	(f_mount@fs+1)^0,c
  1121   005950  0E19               	movlw	low (STR_3+24)
  1122   005952  6E54               	movwf	f_mount@path^0,c
  1123   005954  0E08               	movlw	high (STR_3+24)
  1124   005956  6E55               	movwf	(f_mount@path+1)^0,c
  1125   005958  0E01               	movlw	1
  1126   00595A  6E56               	movwf	f_mount@opt^0,c
  1127   00595C  EC47  F029         	call	_f_mount	;wreg free
  1128   005960  0900               	iorlw	0
  1129   005962  A4D8               	btfss	status,2,c
  1130   005964  EFB6  F02C         	goto	u8201
  1131   005968  EFB8  F02C         	goto	u8200
  1132   00596C                     u8201:
  1133   00596C  EFE6  F02C         	goto	l23
  1134   005970                     u8200:
  1135   005970                     
  1136                           ;Programa_principal.c: 14:     {;Programa_principal.c: 15:         if(f_open(&Fil,"hola.
      +                          txt",0x10 | 0x02) == FR_OK)
  1137   005970  0ED7               	movlw	low _Fil
  1138   005972  0100               	movlb	0	; () banked
  1139   005974  6F9A               	movwf	f_open@fp& (0+255),b
  1140   005976  0E00               	movlw	high _Fil
  1141   005978  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1142   00597A  0E29               	movlw	low STR_2
  1143   00597C  6F9C               	movwf	f_open@path& (0+255),b
  1144   00597E  0E08               	movlw	high STR_2
  1145   005980  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1146   005982  0E12               	movlw	18
  1147   005984  6F9E               	movwf	f_open@mode& (0+255),b
  1148   005986  ECEA  F015         	call	_f_open	;wreg free
  1149   00598A  0900               	iorlw	0
  1150   00598C  A4D8               	btfss	status,2,c
  1151   00598E  EFCB  F02C         	goto	u8211
  1152   005992  EFCD  F02C         	goto	u8210
  1153   005996                     u8211:
  1154   005996  EFE6  F02C         	goto	l23
  1155   00599A                     u8210:
  1156   00599A                     
  1157                           ;Programa_principal.c: 16:         {;Programa_principal.c: 17:             f_write(&Fil,
      +                          "Suscribete al canal :D! ", 24, &bx);
  1158   00599A  0ED7               	movlw	low _Fil
  1159   00599C  0100               	movlb	0	; () banked
  1160   00599E  6F6D               	movwf	f_write@fp& (0+255),b
  1161   0059A0  0E00               	movlw	high _Fil
  1162   0059A2  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1163   0059A4  0E01               	movlw	low STR_3
  1164   0059A6  6F6F               	movwf	f_write@buff& (0+255),b
  1165   0059A8  0E08               	movlw	high STR_3
  1166   0059AA  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1167   0059AC  0E00               	movlw	0
  1168   0059AE  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1169   0059B0  0E18               	movlw	24
  1170   0059B2  6F71               	movwf	f_write@btw& (0+255),b
  1171   0059B4  0ED0               	movlw	low main@bx
  1172   0059B6  6F73               	movwf	f_write@bw& (0+255),b
  1173   0059B8  0E00               	movlw	high main@bx
  1174   0059BA  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1175   0059BC  ECE7  F009         	call	_f_write	;wreg free
  1176   0059C0                     
  1177                           ;Programa_principal.c: 18:             f_close(&Fil);
  1178   0059C0  0ED7               	movlw	low _Fil
  1179   0059C2  6E48               	movwf	f_close@fp^0,c
  1180   0059C4  0E00               	movlw	high _Fil
  1181   0059C6  6E49               	movwf	(f_close@fp+1)^0,c
  1182   0059C8  EC2A  F02E         	call	_f_close	;wreg free
  1183   0059CC                     l23:
  1184   0059CC  EFE6  F02C         	goto	l23
  1185   0059D0  EF00  F000         	goto	start
  1186   0059D4                     __end_of_main:
  1187                           	callstack 0
  1188                           
  1189 ;; *************** function _f_write *****************
  1190 ;; Defined at:
  1191 ;;		line 2691 in file "ff.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  fp              2   13[BANK0 ] PTR struct .
  1194 ;;		 -> Fil(32), 
  1195 ;;  buff            2   15[BANK0 ] PTR const void 
  1196 ;;		 -> STR_3(25), 
  1197 ;;  btw             2   17[BANK0 ] unsigned short 
  1198 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1199 ;;		 -> main@bx(2), 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  clst            4   43[BANK0 ] unsigned long 
  1202 ;;  sect            4   39[BANK0 ] unsigned long 
  1203 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1204 ;;  cc              2   37[BANK0 ] unsigned short 
  1205 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1206 ;;		 -> STR_3(25), 
  1207 ;;  csect           1   36[BANK0 ] unsigned char 
  1208 ;;  res             1   33[BANK0 ] enum E95
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      enum E3587
  1211 ;; Registers used:
  1212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1218 ;;      Params:         0       8       0       0       0       0       0       0       0
  1219 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1220 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1221 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1222 ;;Total ram usage:       36 bytes
  1223 ;; Hardware stack levels used: 1
  1224 ;; Hardware stack levels required when called: 10
  1225 ;; This function calls:
  1226 ;;		_clust2sect
  1227 ;;		_create_chain
  1228 ;;		_disk_write
  1229 ;;		_mem_cpy
  1230 ;;		_move_window
  1231 ;;		_sync_window
  1232 ;;		_validate
  1233 ;; This function is called by:
  1234 ;;		_main
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text1
  1239   0013CE                     __ptext1:
  1240                           	callstack 0
  1241   0013CE                     _f_write:
  1242                           	callstack 20
  1243   0013CE                     
  1244                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1245   0013CE  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1246   0013D2  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1247   0013D6                     
  1248                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1249   0013D6  C073  FFD9         	movff	f_write@bw,fsr2l
  1250   0013DA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1251   0013DE  6ADE               	clrf	postinc2,c
  1252   0013E0  6ADD               	clrf	postdec2,c
  1253   0013E2                     
  1254                           ;ff.c: 2707:  res = validate(fp);
  1255   0013E2  C06D  F002         	movff	f_write@fp,validate@obj
  1256   0013E6  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1257   0013EA  EC21  F02A         	call	_validate	;wreg free
  1258   0013EE  0100               	movlb	0	; () banked
  1259   0013F0  6F81               	movwf	f_write@res& (0+255),b
  1260   0013F2                     
  1261                           ; BSR set to: 0
  1262                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1263   0013F2  5181               	movf	f_write@res& (0+255),w,b
  1264   0013F4  B4D8               	btfsc	status,2,c
  1265   0013F6  EFFF  F009         	goto	u7891
  1266   0013FA  EF01  F00A         	goto	u7890
  1267   0013FE                     u7891:
  1268   0013FE  EF03  F00A         	goto	l5747
  1269   001402                     u7890:
  1270   001402  EF2F  F00E         	goto	l684
  1271   001406                     l5747:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;ff.c: 2709:  if (fp->err)
  1275   001406  EE20 F005          	lfsr	2,5
  1276   00140A  516D               	movf	f_write@fp& (0+255),w,b
  1277   00140C  26D9               	addwf	fsr2l,f,c
  1278   00140E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1279   001410  22DA               	addwfc	fsr2h,f,c
  1280   001412  50DF               	movf	indf2,w,c
  1281   001414  B4D8               	btfsc	status,2,c
  1282   001416  EF0F  F00A         	goto	u7901
  1283   00141A  EF11  F00A         	goto	u7900
  1284   00141E                     u7901:
  1285   00141E  EF13  F00A         	goto	l5751
  1286   001422                     u7900:
  1287   001422  EF2F  F00E         	goto	l684
  1288   001426                     l5751:
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1292   001426  EE20 F004          	lfsr	2,4
  1293   00142A  516D               	movf	f_write@fp& (0+255),w,b
  1294   00142C  26D9               	addwf	fsr2l,f,c
  1295   00142E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1296   001430  22DA               	addwfc	fsr2h,f,c
  1297   001432  B2DF               	btfsc	indf2,1,c
  1298   001434  EF1E  F00A         	goto	u7911
  1299   001438  EF20  F00A         	goto	u7910
  1300   00143C                     u7911:
  1301   00143C  EF22  F00A         	goto	l5755
  1302   001440                     u7910:
  1303   001440  EF2F  F00E         	goto	l684
  1304   001444                     l5755:
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1308   001444  EE20 F006          	lfsr	2,6
  1309   001448  516D               	movf	f_write@fp& (0+255),w,b
  1310   00144A  26D9               	addwf	fsr2l,f,c
  1311   00144C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1312   00144E  22DA               	addwfc	fsr2h,f,c
  1313   001450  EE10 F006          	lfsr	1,6
  1314   001454  516D               	movf	f_write@fp& (0+255),w,b
  1315   001456  26E1               	addwf	fsr1l,f,c
  1316   001458  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1317   00145A  22E2               	addwfc	fsr1h,f,c
  1318   00145C  CFE6 F079          	movff	postinc1,??_f_write+4
  1319   001460  CFE6 F07A          	movff	postinc1,??_f_write+5
  1320   001464  CFE6 F07B          	movff	postinc1,??_f_write+6
  1321   001468  CFE6 F07C          	movff	postinc1,??_f_write+7
  1322   00146C  5171               	movf	f_write@btw& (0+255),w,b
  1323   00146E  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1324   001470  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1325   001472  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1326   001474  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1327   001476  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1328   001478  0E00               	movlw	0
  1329   00147A  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1330   00147C  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1331   00147E  0E00               	movlw	0
  1332   001480  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1333   001482  6F80               	movwf	(??_f_write+11)& (0+255),b
  1334   001484  50DE               	movf	postinc2,w,c
  1335   001486  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1336   001488  50DE               	movf	postinc2,w,c
  1337   00148A  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1338   00148C  50DE               	movf	postinc2,w,c
  1339   00148E  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1340   001490  50DE               	movf	postinc2,w,c
  1341   001492  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1342   001494  B0D8               	btfsc	status,0,c
  1343   001496  EF4F  F00A         	goto	u7921
  1344   00149A  EF51  F00A         	goto	u7920
  1345   00149E                     u7921:
  1346   00149E  EFEF  F00D         	goto	l5867
  1347   0014A2                     u7920:
  1348   0014A2                     
  1349                           ; BSR set to: 0
  1350   0014A2  0E00               	movlw	0
  1351   0014A4  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1352   0014A6  0E00               	movlw	0
  1353   0014A8  6F71               	movwf	f_write@btw& (0+255),b
  1354   0014AA  EFEF  F00D         	goto	l5867
  1355   0014AE                     l5759:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1359   0014AE  EE20 F006          	lfsr	2,6
  1360   0014B2  516D               	movf	f_write@fp& (0+255),w,b
  1361   0014B4  26D9               	addwf	fsr2l,f,c
  1362   0014B6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1363   0014B8  22DA               	addwfc	fsr2h,f,c
  1364   0014BA  0EFF               	movlw	255
  1365   0014BC  14DE               	andwf	postinc2,w,c
  1366   0014BE  6F75               	movwf	??_f_write& (0+255),b
  1367   0014C0  0E01               	movlw	1
  1368   0014C2  14DE               	andwf	postinc2,w,c
  1369   0014C4  6F76               	movwf	(??_f_write+1)& (0+255),b
  1370   0014C6  0E00               	movlw	0
  1371   0014C8  14DE               	andwf	postinc2,w,c
  1372   0014CA  6F77               	movwf	(??_f_write+2)& (0+255),b
  1373   0014CC  0E00               	movlw	0
  1374   0014CE  14DE               	andwf	postinc2,w,c
  1375   0014D0  6F78               	movwf	(??_f_write+3)& (0+255),b
  1376   0014D2  5175               	movf	??_f_write& (0+255),w,b
  1377   0014D4  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1378   0014D6  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1379   0014D8  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1380   0014DA  A4D8               	btfss	status,2,c
  1381   0014DC  EF72  F00A         	goto	u7931
  1382   0014E0  EF74  F00A         	goto	u7930
  1383   0014E4                     u7931:
  1384   0014E4  EF44  F00D         	goto	l5843
  1385   0014E8                     u7930:
  1386   0014E8                     
  1387                           ; BSR set to: 0
  1388                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1389   0014E8  EE20 F006          	lfsr	2,6
  1390   0014EC  516D               	movf	f_write@fp& (0+255),w,b
  1391   0014EE  26D9               	addwf	fsr2l,f,c
  1392   0014F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1393   0014F2  22DA               	addwfc	fsr2h,f,c
  1394   0014F4  CFDE F075          	movff	postinc2,??_f_write
  1395   0014F8  CFDE F076          	movff	postinc2,??_f_write+1
  1396   0014FC  CFDE F077          	movff	postinc2,??_f_write+2
  1397   001500  CFDE F078          	movff	postinc2,??_f_write+3
  1398   001504  0E0A               	movlw	10
  1399   001506  EF8A  F00A         	goto	u7940
  1400   00150A                     u7945:
  1401   00150A  90D8               	bcf	status,0,c
  1402   00150C  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1403   00150E  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1404   001510  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1405   001512  3375               	rrcf	??_f_write& (0+255),f,b
  1406   001514                     u7940:
  1407   001514  2EE8               	decfsz	wreg,f,c
  1408   001516  EF85  F00A         	goto	u7945
  1409   00151A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1410   00151E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1411   001522  EE10 F002          	lfsr	1,2
  1412   001526  50DE               	movf	postinc2,w,c
  1413   001528  26E1               	addwf	fsr1l,f,c
  1414   00152A  50DD               	movf	postdec2,w,c
  1415   00152C  22E2               	addwfc	fsr1h,f,c
  1416   00152E  50E7               	movf	indf1,w,c
  1417   001530  6F79               	movwf	(??_f_write+4)& (0+255),b
  1418   001532  0579               	decf	(??_f_write+4)& (0+255),w,b
  1419   001534  1575               	andwf	??_f_write& (0+255),w,b
  1420   001536  6F84               	movwf	f_write@csect& (0+255),b
  1421   001538                     
  1422                           ; BSR set to: 0
  1423                           ;ff.c: 2719:    if (!csect) {
  1424   001538  5184               	movf	f_write@csect& (0+255),w,b
  1425   00153A  A4D8               	btfss	status,2,c
  1426   00153C  EFA2  F00A         	goto	u7951
  1427   001540  EFA4  F00A         	goto	u7950
  1428   001544                     u7951:
  1429   001544  EF72  F00B         	goto	l5795
  1430   001548                     u7950:
  1431   001548                     
  1432                           ; BSR set to: 0
  1433                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1434   001548  EE20 F006          	lfsr	2,6
  1435   00154C  516D               	movf	f_write@fp& (0+255),w,b
  1436   00154E  26D9               	addwf	fsr2l,f,c
  1437   001550  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1438   001552  22DA               	addwfc	fsr2h,f,c
  1439   001554  50DE               	movf	postinc2,w,c
  1440   001556  10DE               	iorwf	postinc2,w,c
  1441   001558  10DE               	iorwf	postinc2,w,c
  1442   00155A  10DE               	iorwf	postinc2,w,c
  1443   00155C  A4D8               	btfss	status,2,c
  1444   00155E  EFB3  F00A         	goto	u7961
  1445   001562  EFB5  F00A         	goto	u7960
  1446   001566                     u7961:
  1447   001566  EFEA  F00A         	goto	l5773
  1448   00156A                     u7960:
  1449   00156A                     
  1450                           ; BSR set to: 0
  1451                           ;ff.c: 2721:      clst = fp->sclust;
  1452   00156A  EE20 F00E          	lfsr	2,14
  1453   00156E  516D               	movf	f_write@fp& (0+255),w,b
  1454   001570  26D9               	addwf	fsr2l,f,c
  1455   001572  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1456   001574  22DA               	addwfc	fsr2h,f,c
  1457   001576  CFDE F08B          	movff	postinc2,f_write@clst
  1458   00157A  CFDE F08C          	movff	postinc2,f_write@clst+1
  1459   00157E  CFDE F08D          	movff	postinc2,f_write@clst+2
  1460   001582  CFDE F08E          	movff	postinc2,f_write@clst+3
  1461   001586                     
  1462                           ; BSR set to: 0
  1463                           ;ff.c: 2722:      if (clst == 0)
  1464   001586  518B               	movf	f_write@clst& (0+255),w,b
  1465   001588  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1466   00158A  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1467   00158C  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1468   00158E  A4D8               	btfss	status,2,c
  1469   001590  EFCC  F00A         	goto	u7971
  1470   001594  EFCE  F00A         	goto	u7970
  1471   001598                     u7971:
  1472   001598  EF0A  F00B         	goto	l5775
  1473   00159C                     u7970:
  1474   00159C                     
  1475                           ; BSR set to: 0
  1476                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1477   00159C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1478   0015A0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1479   0015A4  CFDE F056          	movff	postinc2,create_chain@fs
  1480   0015A8  CFDD F057          	movff	postdec2,create_chain@fs+1
  1481   0015AC  0E00               	movlw	0
  1482   0015AE  6E58               	movwf	create_chain@clst^0,c
  1483   0015B0  0E00               	movlw	0
  1484   0015B2  6E59               	movwf	(create_chain@clst+1)^0,c
  1485   0015B4  0E00               	movlw	0
  1486   0015B6  6E5A               	movwf	(create_chain@clst+2)^0,c
  1487   0015B8  0E00               	movlw	0
  1488   0015BA  6E5B               	movwf	(create_chain@clst+3)^0,c
  1489   0015BC  ECFE  F01B         	call	_create_chain	;wreg free
  1490   0015C0  C056  F08B         	movff	?_create_chain,f_write@clst
  1491   0015C4  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1492   0015C8  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1493   0015CC  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1494   0015D0  EF0A  F00B         	goto	l5775
  1495   0015D4                     l5773:
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1499   0015D4  C06D  FFD9         	movff	f_write@fp,fsr2l
  1500   0015D8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1501   0015DC  CFDE F056          	movff	postinc2,create_chain@fs
  1502   0015E0  CFDD F057          	movff	postdec2,create_chain@fs+1
  1503   0015E4  EE20 F012          	lfsr	2,18
  1504   0015E8  516D               	movf	f_write@fp& (0+255),w,b
  1505   0015EA  26D9               	addwf	fsr2l,f,c
  1506   0015EC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1507   0015EE  22DA               	addwfc	fsr2h,f,c
  1508   0015F0  CFDE F058          	movff	postinc2,create_chain@clst
  1509   0015F4  CFDE F059          	movff	postinc2,create_chain@clst+1
  1510   0015F8  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1511   0015FC  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1512   001600  ECFE  F01B         	call	_create_chain	;wreg free
  1513   001604  C056  F08B         	movff	?_create_chain,f_write@clst
  1514   001608  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1515   00160C  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1516   001610  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1517   001614                     l5775:
  1518                           
  1519                           ;ff.c: 2732:     if (clst == 0) break;
  1520   001614  0100               	movlb	0	; () banked
  1521   001616  518B               	movf	f_write@clst& (0+255),w,b
  1522   001618  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1523   00161A  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1524   00161C  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1525   00161E  A4D8               	btfss	status,2,c
  1526   001620  EF14  F00B         	goto	u7981
  1527   001624  EF16  F00B         	goto	u7980
  1528   001628                     u7981:
  1529   001628  EF18  F00B         	goto	l5779
  1530   00162C                     u7980:
  1531   00162C  EFF8  F00D         	goto	l5869
  1532   001630                     l5779:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1536   001630  058B               	decf	f_write@clst& (0+255),w,b
  1537   001632  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1538   001634  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1539   001636  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1540   001638  A4D8               	btfss	status,2,c
  1541   00163A  EF21  F00B         	goto	u7991
  1542   00163E  EF23  F00B         	goto	u7990
  1543   001642                     u7991:
  1544   001642  EF2D  F00B         	goto	l5785
  1545   001646                     u7990:
  1546   001646                     
  1547                           ; BSR set to: 0
  1548   001646  EE20 F005          	lfsr	2,5
  1549   00164A  516D               	movf	f_write@fp& (0+255),w,b
  1550   00164C  26D9               	addwf	fsr2l,f,c
  1551   00164E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1552   001650  22DA               	addwfc	fsr2h,f,c
  1553   001652  0E02               	movlw	2
  1554   001654  6EDF               	movwf	indf2,c
  1555   001656  EF2F  F00E         	goto	l684
  1556   00165A                     l5785:
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1560   00165A  298B               	incf	f_write@clst& (0+255),w,b
  1561   00165C  E10A               	bnz	u8001
  1562   00165E  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1563   001660  E108               	bnz	u8001
  1564   001662  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1565   001664  E106               	bnz	u8001
  1566   001666  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1567   001668  A4D8               	btfss	status,2,c
  1568   00166A  EF39  F00B         	goto	u8001
  1569   00166E  EF3B  F00B         	goto	u8000
  1570   001672                     u8001:
  1571   001672  EF45  F00B         	goto	l5791
  1572   001676                     u8000:
  1573   001676                     
  1574                           ; BSR set to: 0
  1575   001676  EE20 F005          	lfsr	2,5
  1576   00167A  516D               	movf	f_write@fp& (0+255),w,b
  1577   00167C  26D9               	addwf	fsr2l,f,c
  1578   00167E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1579   001680  22DA               	addwfc	fsr2h,f,c
  1580   001682  0E01               	movlw	1
  1581   001684  6EDF               	movwf	indf2,c
  1582   001686  EF2F  F00E         	goto	l684
  1583   00168A                     l5791:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;ff.c: 2735:     fp->clust = clst;
  1587   00168A  EE20 F012          	lfsr	2,18
  1588   00168E  516D               	movf	f_write@fp& (0+255),w,b
  1589   001690  26D9               	addwf	fsr2l,f,c
  1590   001692  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1591   001694  22DA               	addwfc	fsr2h,f,c
  1592   001696  C08B  FFDE         	movff	f_write@clst,postinc2
  1593   00169A  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1594   00169E  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1595   0016A2  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1596                           
  1597                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1598   0016A6  EE20 F00E          	lfsr	2,14
  1599   0016AA  516D               	movf	f_write@fp& (0+255),w,b
  1600   0016AC  26D9               	addwf	fsr2l,f,c
  1601   0016AE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1602   0016B0  22DA               	addwfc	fsr2h,f,c
  1603   0016B2  50DE               	movf	postinc2,w,c
  1604   0016B4  10DE               	iorwf	postinc2,w,c
  1605   0016B6  10DE               	iorwf	postinc2,w,c
  1606   0016B8  10DE               	iorwf	postinc2,w,c
  1607   0016BA  A4D8               	btfss	status,2,c
  1608   0016BC  EF62  F00B         	goto	u8011
  1609   0016C0  EF64  F00B         	goto	u8010
  1610   0016C4                     u8011:
  1611   0016C4  EF72  F00B         	goto	l5795
  1612   0016C8                     u8010:
  1613   0016C8                     
  1614                           ; BSR set to: 0
  1615   0016C8  EE20 F00E          	lfsr	2,14
  1616   0016CC  516D               	movf	f_write@fp& (0+255),w,b
  1617   0016CE  26D9               	addwf	fsr2l,f,c
  1618   0016D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1619   0016D2  22DA               	addwfc	fsr2h,f,c
  1620   0016D4  C08B  FFDE         	movff	f_write@clst,postinc2
  1621   0016D8  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1622   0016DC  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1623   0016E0  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1624   0016E4                     l5795:
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1628   0016E4  EE20 F016          	lfsr	2,22
  1629   0016E8  516D               	movf	f_write@fp& (0+255),w,b
  1630   0016EA  26D9               	addwf	fsr2l,f,c
  1631   0016EC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1632   0016EE  22DA               	addwfc	fsr2h,f,c
  1633   0016F0  C06D  FFE1         	movff	f_write@fp,fsr1l
  1634   0016F4  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1635   0016F8  EE00 F02A          	lfsr	0,42
  1636   0016FC  50E6               	movf	postinc1,w,c
  1637   0016FE  26E9               	addwf	fsr0l,f,c
  1638   001700  50E5               	movf	postdec1,w,c
  1639   001702  22EA               	addwfc	fsr0h,f,c
  1640   001704  50DE               	movf	postinc2,w,c
  1641   001706  18EE               	xorwf	postinc0,w,c
  1642   001708  E10D               	bnz	u8021
  1643   00170A  50DE               	movf	postinc2,w,c
  1644   00170C  18EE               	xorwf	postinc0,w,c
  1645   00170E  E10A               	bnz	u8021
  1646   001710  50DE               	movf	postinc2,w,c
  1647   001712  18EE               	xorwf	postinc0,w,c
  1648   001714  E107               	bnz	u8021
  1649   001716  50DE               	movf	postinc2,w,c
  1650   001718  18EE               	xorwf	postinc0,w,c
  1651   00171A  A4D8               	btfss	status,2,c
  1652   00171C  EF92  F00B         	goto	u8021
  1653   001720  EF94  F00B         	goto	u8020
  1654   001724                     u8021:
  1655   001724  EFB1  F00B         	goto	l5803
  1656   001728                     u8020:
  1657   001728                     
  1658                           ; BSR set to: 0
  1659   001728  C06D  FFD9         	movff	f_write@fp,fsr2l
  1660   00172C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1661   001730  CFDE F01B          	movff	postinc2,sync_window@fs
  1662   001734  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1663   001738  EC65  F024         	call	_sync_window	;wreg free
  1664   00173C  0900               	iorlw	0
  1665   00173E  B4D8               	btfsc	status,2,c
  1666   001740  EFA4  F00B         	goto	u8031
  1667   001744  EFA6  F00B         	goto	u8030
  1668   001748                     u8031:
  1669   001748  EFB1  F00B         	goto	l5803
  1670   00174C                     u8030:
  1671   00174C                     
  1672                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1673   00174C  0100               	movlb	0	; () banked
  1674   00174E  EE20 F005          	lfsr	2,5
  1675   001752  516D               	movf	f_write@fp& (0+255),w,b
  1676   001754  26D9               	addwf	fsr2l,f,c
  1677   001756  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1678   001758  22DA               	addwfc	fsr2h,f,c
  1679   00175A  0E01               	movlw	1
  1680   00175C  6EDF               	movwf	indf2,c
  1681   00175E  EF2F  F00E         	goto	l684
  1682   001762                     l5803:
  1683                           
  1684                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1685   001762  C06D  FFD9         	movff	f_write@fp,fsr2l
  1686   001766  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1687   00176A  CFDE F00D          	movff	postinc2,clust2sect@fs
  1688   00176E  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1689   001772  0100               	movlb	0	; () banked
  1690   001774  EE20 F012          	lfsr	2,18
  1691   001778  516D               	movf	f_write@fp& (0+255),w,b
  1692   00177A  26D9               	addwf	fsr2l,f,c
  1693   00177C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1694   00177E  22DA               	addwfc	fsr2h,f,c
  1695   001780  CFDE F00F          	movff	postinc2,clust2sect@clst
  1696   001784  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1697   001788  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1698   00178C  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1699   001790  EC85  F02A         	call	_clust2sect	;wreg free
  1700   001794  C00D  F087         	movff	?_clust2sect,f_write@sect
  1701   001798  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1702   00179C  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1703   0017A0  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1704   0017A4                     
  1705                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1706   0017A4  0100               	movlb	0	; () banked
  1707   0017A6  5187               	movf	f_write@sect& (0+255),w,b
  1708   0017A8  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1709   0017AA  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1710   0017AC  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1711   0017AE  A4D8               	btfss	status,2,c
  1712   0017B0  EFDC  F00B         	goto	u8041
  1713   0017B4  EFDE  F00B         	goto	u8040
  1714   0017B8                     u8041:
  1715   0017B8  EFE8  F00B         	goto	l5811
  1716   0017BC                     u8040:
  1717   0017BC                     
  1718                           ; BSR set to: 0
  1719   0017BC  EE20 F005          	lfsr	2,5
  1720   0017C0  516D               	movf	f_write@fp& (0+255),w,b
  1721   0017C2  26D9               	addwf	fsr2l,f,c
  1722   0017C4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1723   0017C6  22DA               	addwfc	fsr2h,f,c
  1724   0017C8  0E02               	movlw	2
  1725   0017CA  6EDF               	movwf	indf2,c
  1726   0017CC  EF2F  F00E         	goto	l684
  1727   0017D0                     l5811:
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;ff.c: 2750:    sect += csect;
  1731   0017D0  5184               	movf	f_write@csect& (0+255),w,b
  1732   0017D2  2787               	addwf	f_write@sect& (0+255),f,b
  1733   0017D4  0E00               	movlw	0
  1734   0017D6  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1735   0017D8  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1736   0017DA  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1737                           
  1738                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1739   0017DC  C071  F075         	movff	f_write@btw,??_f_write
  1740   0017E0  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1741   0017E4  0E09               	movlw	9
  1742   0017E6  6F77               	movwf	(??_f_write+2)& (0+255),b
  1743   0017E8                     u8055:
  1744   0017E8  90D8               	bcf	status,0,c
  1745   0017EA  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1746   0017EC  3375               	rrcf	??_f_write& (0+255),f,b
  1747   0017EE  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1748   0017F0  EFF4  F00B         	goto	u8055
  1749   0017F4  C075  F085         	movff	??_f_write,f_write@cc
  1750   0017F8  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1751                           
  1752                           ;ff.c: 2752:    if (cc) {
  1753   0017FC  5185               	movf	f_write@cc& (0+255),w,b
  1754   0017FE  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1755   001800  B4D8               	btfsc	status,2,c
  1756   001802  EF05  F00C         	goto	u8061
  1757   001806  EF07  F00C         	goto	u8060
  1758   00180A                     u8061:
  1759   00180A  EFEB  F00C         	goto	l5831
  1760   00180E                     u8060:
  1761   00180E                     
  1762                           ; BSR set to: 0
  1763                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1764   00180E  5184               	movf	f_write@csect& (0+255),w,b
  1765   001810  2585               	addwf	f_write@cc& (0+255),w,b
  1766   001812  6F75               	movwf	??_f_write& (0+255),b
  1767   001814  0E00               	movlw	0
  1768   001816  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1769   001818  6F76               	movwf	(??_f_write+1)& (0+255),b
  1770   00181A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1771   00181E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1772   001822  EE10 F002          	lfsr	1,2
  1773   001826  50DE               	movf	postinc2,w,c
  1774   001828  26E1               	addwf	fsr1l,f,c
  1775   00182A  50DD               	movf	postdec2,w,c
  1776   00182C  22E2               	addwfc	fsr1h,f,c
  1777   00182E  50E7               	movf	indf1,w,c
  1778   001830  6F77               	movwf	(??_f_write+2)& (0+255),b
  1779   001832  6B78               	clrf	(??_f_write+3)& (0+255),b
  1780   001834  5175               	movf	??_f_write& (0+255),w,b
  1781   001836  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1782   001838  5176               	movf	(??_f_write+1)& (0+255),w,b
  1783   00183A  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1784   00183C  B0D8               	btfsc	status,0,c
  1785   00183E  EF23  F00C         	goto	u8071
  1786   001842  EF25  F00C         	goto	u8070
  1787   001846                     u8071:
  1788   001846  EF37  F00C         	goto	l5817
  1789   00184A                     u8070:
  1790   00184A                     
  1791                           ; BSR set to: 0
  1792                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1793   00184A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1794   00184E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1795   001852  EE10 F002          	lfsr	1,2
  1796   001856  50DE               	movf	postinc2,w,c
  1797   001858  26E1               	addwf	fsr1l,f,c
  1798   00185A  50DD               	movf	postdec2,w,c
  1799   00185C  22E2               	addwfc	fsr1h,f,c
  1800   00185E  50E7               	movf	indf1,w,c
  1801   001860  6F75               	movwf	??_f_write& (0+255),b
  1802   001862  5184               	movf	f_write@csect& (0+255),w,b
  1803   001864  5D75               	subwf	??_f_write& (0+255),w,b
  1804   001866  6F85               	movwf	f_write@cc& (0+255),b
  1805   001868  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1806   00186A  A0D8               	btfss	status,0,c
  1807   00186C  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1808   00186E                     l5817:
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1812   00186E  C082  F011         	movff	f_write@wbuff,disk_write@buff
  1813   001872  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1814   001876  C087  F013         	movff	f_write@sect,disk_write@sector
  1815   00187A  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  1816   00187E  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  1817   001882  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  1818   001886  C085  F017         	movff	f_write@cc,disk_write@count
  1819   00188A  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  1820   00188E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1821   001892  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1822   001896  EE10 F001          	lfsr	1,1
  1823   00189A  50DE               	movf	postinc2,w,c
  1824   00189C  26E1               	addwf	fsr1l,f,c
  1825   00189E  50DD               	movf	postdec2,w,c
  1826   0018A0  22E2               	addwfc	fsr1h,f,c
  1827   0018A2  50E7               	movf	indf1,w,c
  1828   0018A4  EC90  F023         	call	_disk_write
  1829   0018A8  0900               	iorlw	0
  1830   0018AA  B4D8               	btfsc	status,2,c
  1831   0018AC  EF5A  F00C         	goto	u8081
  1832   0018B0  EF5C  F00C         	goto	u8080
  1833   0018B4                     u8081:
  1834   0018B4  EF67  F00C         	goto	l5823
  1835   0018B8                     u8080:
  1836   0018B8                     
  1837                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1838   0018B8  0100               	movlb	0	; () banked
  1839   0018BA  EE20 F005          	lfsr	2,5
  1840   0018BE  516D               	movf	f_write@fp& (0+255),w,b
  1841   0018C0  26D9               	addwf	fsr2l,f,c
  1842   0018C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1843   0018C4  22DA               	addwfc	fsr2h,f,c
  1844   0018C6  0E01               	movlw	1
  1845   0018C8  6EDF               	movwf	indf2,c
  1846   0018CA  EF2F  F00E         	goto	l684
  1847   0018CE                     l5823:
  1848                           
  1849                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  1850   0018CE  0100               	movlb	0	; () banked
  1851   0018D0  5185               	movf	f_write@cc& (0+255),w,b
  1852   0018D2  6F75               	movwf	??_f_write& (0+255),b
  1853   0018D4  5186               	movf	(f_write@cc+1)& (0+255),w,b
  1854   0018D6  6F76               	movwf	(??_f_write+1)& (0+255),b
  1855   0018D8  6B77               	clrf	(??_f_write+2)& (0+255),b
  1856   0018DA  6B78               	clrf	(??_f_write+3)& (0+255),b
  1857   0018DC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1858   0018E0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1859   0018E4  EE10 F02A          	lfsr	1,42
  1860   0018E8  50DE               	movf	postinc2,w,c
  1861   0018EA  26E1               	addwf	fsr1l,f,c
  1862   0018EC  50DD               	movf	postdec2,w,c
  1863   0018EE  22E2               	addwfc	fsr1h,f,c
  1864   0018F0  CFE6 F079          	movff	postinc1,??_f_write+4
  1865   0018F4  CFE6 F07A          	movff	postinc1,??_f_write+5
  1866   0018F8  CFE6 F07B          	movff	postinc1,??_f_write+6
  1867   0018FC  CFE6 F07C          	movff	postinc1,??_f_write+7
  1868   001900  5187               	movf	f_write@sect& (0+255),w,b
  1869   001902  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  1870   001904  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1871   001906  5188               	movf	(f_write@sect+1)& (0+255),w,b
  1872   001908  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  1873   00190A  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1874   00190C  5189               	movf	(f_write@sect+2)& (0+255),w,b
  1875   00190E  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  1876   001910  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1877   001912  518A               	movf	(f_write@sect+3)& (0+255),w,b
  1878   001914  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  1879   001916  6F80               	movwf	(??_f_write+11)& (0+255),b
  1880   001918  5175               	movf	??_f_write& (0+255),w,b
  1881   00191A  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1882   00191C  5176               	movf	(??_f_write+1)& (0+255),w,b
  1883   00191E  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1884   001920  5177               	movf	(??_f_write+2)& (0+255),w,b
  1885   001922  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1886   001924  5178               	movf	(??_f_write+3)& (0+255),w,b
  1887   001926  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1888   001928  B0D8               	btfsc	status,0,c
  1889   00192A  EF99  F00C         	goto	u8091
  1890   00192E  EF9B  F00C         	goto	u8090
  1891   001932                     u8091:
  1892   001932  EFD9  F00C         	goto	l5829
  1893   001936                     u8090:
  1894   001936                     
  1895                           ; BSR set to: 0
  1896                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  1897   001936  C06D  FFD9         	movff	f_write@fp,fsr2l
  1898   00193A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1899   00193E  CFDE F075          	movff	postinc2,??_f_write
  1900   001942  CFDD F076          	movff	postdec2,??_f_write+1
  1901   001946  0E2E               	movlw	46
  1902   001948  2575               	addwf	??_f_write& (0+255),w,b
  1903   00194A  6E01               	movwf	mem_cpy@dst^0,c
  1904   00194C  0E00               	movlw	0
  1905   00194E  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  1906   001950  6E02               	movwf	(mem_cpy@dst+1)^0,c
  1907   001952  C06D  FFD9         	movff	f_write@fp,fsr2l
  1908   001956  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1909   00195A  EE10 F02A          	lfsr	1,42
  1910   00195E  50DE               	movf	postinc2,w,c
  1911   001960  26E1               	addwf	fsr1l,f,c
  1912   001962  50DD               	movf	postdec2,w,c
  1913   001964  22E2               	addwfc	fsr1h,f,c
  1914   001966  CFE6 F077          	movff	postinc1,??_f_write+2
  1915   00196A  CFE5 F078          	movff	postdec1,??_f_write+3
  1916   00196E  5187               	movf	f_write@sect& (0+255),w,b
  1917   001970  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  1918   001972  5188               	movf	(f_write@sect+1)& (0+255),w,b
  1919   001974  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  1920   001976  0E09               	movlw	9
  1921   001978                     u8105:
  1922   001978  90D8               	bcf	status,0,c
  1923   00197A  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  1924   00197C  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  1925   00197E  2EE8               	decfsz	wreg,f,c
  1926   001980  EFBC  F00C         	goto	u8105
  1927   001984  5177               	movf	(??_f_write+2)& (0+255),w,b
  1928   001986  2582               	addwf	f_write@wbuff& (0+255),w,b
  1929   001988  6E03               	movwf	mem_cpy@src^0,c
  1930   00198A  5178               	movf	(??_f_write+3)& (0+255),w,b
  1931   00198C  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  1932   00198E  6E04               	movwf	(mem_cpy@src+1)^0,c
  1933   001990  0E02               	movlw	2
  1934   001992  6E06               	movwf	(mem_cpy@cnt+1)^0,c
  1935   001994  0E00               	movlw	0
  1936   001996  6E05               	movwf	mem_cpy@cnt^0,c
  1937   001998  ECB8  F029         	call	_mem_cpy	;wreg free
  1938   00199C                     
  1939                           ;ff.c: 2761:      fp->fs->wflag = 0;
  1940   00199C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1941   0019A0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1942   0019A4  EE10 F004          	lfsr	1,4
  1943   0019A8  50DE               	movf	postinc2,w,c
  1944   0019AA  26E1               	addwf	fsr1l,f,c
  1945   0019AC  50DD               	movf	postdec2,w,c
  1946   0019AE  22E2               	addwfc	fsr1h,f,c
  1947   0019B0  6AE7               	clrf	indf1,c
  1948   0019B2                     l5829:
  1949                           
  1950                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  1951   0019B2  C085  F075         	movff	f_write@cc,??_f_write
  1952   0019B6  C086  F076         	movff	f_write@cc+1,??_f_write+1
  1953   0019BA  0E09               	movlw	9
  1954   0019BC                     u8115:
  1955   0019BC  90D8               	bcf	status,0,c
  1956   0019BE  0100               	movlb	0	; () banked
  1957   0019C0  3775               	rlcf	??_f_write& (0+255),f,b
  1958   0019C2  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  1959   0019C4  2EE8               	decfsz	wreg,f,c
  1960   0019C6  EFDE  F00C         	goto	u8115
  1961   0019CA  C075  F08F         	movff	??_f_write,f_write@wcnt
  1962   0019CE  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  1963                           
  1964                           ;ff.c: 2771:     continue;
  1965   0019D2  EFD1  F00D         	goto	l5859
  1966   0019D6                     l5831:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  1970   0019D6  EE20 F00A          	lfsr	2,10
  1971   0019DA  516D               	movf	f_write@fp& (0+255),w,b
  1972   0019DC  26D9               	addwf	fsr2l,f,c
  1973   0019DE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1974   0019E0  22DA               	addwfc	fsr2h,f,c
  1975   0019E2  EE10 F006          	lfsr	1,6
  1976   0019E6  516D               	movf	f_write@fp& (0+255),w,b
  1977   0019E8  26E1               	addwf	fsr1l,f,c
  1978   0019EA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1979   0019EC  22E2               	addwfc	fsr1h,f,c
  1980   0019EE  50DE               	movf	postinc2,w,c
  1981   0019F0  5CE6               	subwf	postinc1,w,c
  1982   0019F2  50DE               	movf	postinc2,w,c
  1983   0019F4  58E6               	subwfb	postinc1,w,c
  1984   0019F6  50DE               	movf	postinc2,w,c
  1985   0019F8  58E6               	subwfb	postinc1,w,c
  1986   0019FA  50DE               	movf	postinc2,w,c
  1987   0019FC  58E6               	subwfb	postinc1,w,c
  1988   0019FE  A0D8               	btfss	status,0,c
  1989   001A00  EF04  F00D         	goto	u8121
  1990   001A04  EF06  F00D         	goto	u8120
  1991   001A08                     u8121:
  1992   001A08  EF35  F00D         	goto	l5841
  1993   001A0C                     u8120:
  1994   001A0C                     
  1995                           ; BSR set to: 0
  1996                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  1997   001A0C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1998   001A10  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1999   001A14  CFDE F01B          	movff	postinc2,sync_window@fs
  2000   001A18  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2001   001A1C  EC65  F024         	call	_sync_window	;wreg free
  2002   001A20  0900               	iorlw	0
  2003   001A22  B4D8               	btfsc	status,2,c
  2004   001A24  EF16  F00D         	goto	u8131
  2005   001A28  EF18  F00D         	goto	u8130
  2006   001A2C                     u8131:
  2007   001A2C  EF23  F00D         	goto	l5839
  2008   001A30                     u8130:
  2009   001A30  0100               	movlb	0	; () banked
  2010   001A32  EE20 F005          	lfsr	2,5
  2011   001A36  516D               	movf	f_write@fp& (0+255),w,b
  2012   001A38  26D9               	addwf	fsr2l,f,c
  2013   001A3A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2014   001A3C  22DA               	addwfc	fsr2h,f,c
  2015   001A3E  0E01               	movlw	1
  2016   001A40  6EDF               	movwf	indf2,c
  2017   001A42  EF2F  F00E         	goto	l684
  2018   001A46                     l5839:
  2019                           
  2020                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2021   001A46  C06D  FFD9         	movff	f_write@fp,fsr2l
  2022   001A4A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2023   001A4E  EE10 F02A          	lfsr	1,42
  2024   001A52  50DE               	movf	postinc2,w,c
  2025   001A54  26E1               	addwf	fsr1l,f,c
  2026   001A56  50DD               	movf	postdec2,w,c
  2027   001A58  22E2               	addwfc	fsr1h,f,c
  2028   001A5A  C087  FFE6         	movff	f_write@sect,postinc1
  2029   001A5E  C088  FFE6         	movff	f_write@sect+1,postinc1
  2030   001A62  C089  FFE6         	movff	f_write@sect+2,postinc1
  2031   001A66  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2032   001A6A                     l5841:
  2033                           
  2034                           ;ff.c: 2785:    fp->dsect = sect;
  2035   001A6A  0100               	movlb	0	; () banked
  2036   001A6C  EE20 F016          	lfsr	2,22
  2037   001A70  516D               	movf	f_write@fp& (0+255),w,b
  2038   001A72  26D9               	addwf	fsr2l,f,c
  2039   001A74  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2040   001A76  22DA               	addwfc	fsr2h,f,c
  2041   001A78  C087  FFDE         	movff	f_write@sect,postinc2
  2042   001A7C  C088  FFDE         	movff	f_write@sect+1,postinc2
  2043   001A80  C089  FFDE         	movff	f_write@sect+2,postinc2
  2044   001A84  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2045   001A88                     l5843:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2049   001A88  EE20 F006          	lfsr	2,6
  2050   001A8C  516D               	movf	f_write@fp& (0+255),w,b
  2051   001A8E  26D9               	addwf	fsr2l,f,c
  2052   001A90  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2053   001A92  22DA               	addwfc	fsr2h,f,c
  2054   001A94  CFDE F075          	movff	postinc2,??_f_write
  2055   001A98  CFDD F076          	movff	postdec2,??_f_write+1
  2056   001A9C  0EFF               	movlw	255
  2057   001A9E  1575               	andwf	??_f_write& (0+255),w,b
  2058   001AA0  6F77               	movwf	(??_f_write+2)& (0+255),b
  2059   001AA2  0E01               	movlw	1
  2060   001AA4  1576               	andwf	(??_f_write+1)& (0+255),w,b
  2061   001AA6  6F78               	movwf	(??_f_write+3)& (0+255),b
  2062   001AA8  5177               	movf	(??_f_write+2)& (0+255),w,b
  2063   001AAA  0800               	sublw	0
  2064   001AAC  6F8F               	movwf	f_write@wcnt& (0+255),b
  2065   001AAE  5178               	movf	(??_f_write+3)& (0+255),w,b
  2066   001AB0  A0D8               	btfss	status,0,c
  2067   001AB2  2AE8               	incf	wreg,f,c
  2068   001AB4  0802               	sublw	2
  2069   001AB6  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2070   001AB8                     
  2071                           ; BSR set to: 0
  2072                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2073   001AB8  518F               	movf	f_write@wcnt& (0+255),w,b
  2074   001ABA  5D71               	subwf	f_write@btw& (0+255),w,b
  2075   001ABC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2076   001ABE  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2077   001AC0  B0D8               	btfsc	status,0,c
  2078   001AC2  EF65  F00D         	goto	u8141
  2079   001AC6  EF67  F00D         	goto	u8140
  2080   001ACA                     u8141:
  2081   001ACA  EF6B  F00D         	goto	l5849
  2082   001ACE                     u8140:
  2083   001ACE                     
  2084                           ; BSR set to: 0
  2085   001ACE  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2086   001AD2  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2087   001AD6                     l5849:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2091   001AD6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2092   001ADA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2093   001ADE  CFDE F030          	movff	postinc2,move_window@fs
  2094   001AE2  CFDD F031          	movff	postdec2,move_window@fs+1
  2095   001AE6  EE20 F016          	lfsr	2,22
  2096   001AEA  516D               	movf	f_write@fp& (0+255),w,b
  2097   001AEC  26D9               	addwf	fsr2l,f,c
  2098   001AEE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2099   001AF0  22DA               	addwfc	fsr2h,f,c
  2100   001AF2  CFDE F032          	movff	postinc2,move_window@sector
  2101   001AF6  CFDE F033          	movff	postinc2,move_window@sector+1
  2102   001AFA  CFDE F034          	movff	postinc2,move_window@sector+2
  2103   001AFE  CFDE F035          	movff	postinc2,move_window@sector+3
  2104   001B02  ECE8  F02A         	call	_move_window	;wreg free
  2105   001B06  0900               	iorlw	0
  2106   001B08  B4D8               	btfsc	status,2,c
  2107   001B0A  EF89  F00D         	goto	u8151
  2108   001B0E  EF8B  F00D         	goto	u8150
  2109   001B12                     u8151:
  2110   001B12  EF96  F00D         	goto	l5855
  2111   001B16                     u8150:
  2112   001B16                     
  2113                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2114   001B16  0100               	movlb	0	; () banked
  2115   001B18  EE20 F005          	lfsr	2,5
  2116   001B1C  516D               	movf	f_write@fp& (0+255),w,b
  2117   001B1E  26D9               	addwf	fsr2l,f,c
  2118   001B20  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2119   001B22  22DA               	addwfc	fsr2h,f,c
  2120   001B24  0E01               	movlw	1
  2121   001B26  6EDF               	movwf	indf2,c
  2122   001B28  EF2F  F00E         	goto	l684
  2123   001B2C                     l5855:
  2124                           
  2125                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2126   001B2C  0100               	movlb	0	; () banked
  2127   001B2E  EE20 F006          	lfsr	2,6
  2128   001B32  516D               	movf	f_write@fp& (0+255),w,b
  2129   001B34  26D9               	addwf	fsr2l,f,c
  2130   001B36  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2131   001B38  22DA               	addwfc	fsr2h,f,c
  2132   001B3A  CFDE F075          	movff	postinc2,??_f_write
  2133   001B3E  CFDD F076          	movff	postdec2,??_f_write+1
  2134   001B42  0EFF               	movlw	255
  2135   001B44  1575               	andwf	??_f_write& (0+255),w,b
  2136   001B46  6F77               	movwf	(??_f_write+2)& (0+255),b
  2137   001B48  0E01               	movlw	1
  2138   001B4A  1576               	andwf	(??_f_write+1)& (0+255),w,b
  2139   001B4C  6F78               	movwf	(??_f_write+3)& (0+255),b
  2140   001B4E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2141   001B52  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2142   001B56  CFDE F079          	movff	postinc2,??_f_write+4
  2143   001B5A  CFDD F07A          	movff	postdec2,??_f_write+5
  2144   001B5E  5177               	movf	(??_f_write+2)& (0+255),w,b
  2145   001B60  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2146   001B62  6F7B               	movwf	(??_f_write+6)& (0+255),b
  2147   001B64  5178               	movf	(??_f_write+3)& (0+255),w,b
  2148   001B66  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2149   001B68  6F7C               	movwf	(??_f_write+7)& (0+255),b
  2150   001B6A  0E2E               	movlw	46
  2151   001B6C  257B               	addwf	(??_f_write+6)& (0+255),w,b
  2152   001B6E  6E01               	movwf	mem_cpy@dst^0,c
  2153   001B70  0E00               	movlw	0
  2154   001B72  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  2155   001B74  6E02               	movwf	(mem_cpy@dst+1)^0,c
  2156   001B76  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2157   001B7A  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2158   001B7E  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2159   001B82  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2160   001B86  ECB8  F029         	call	_mem_cpy	;wreg free
  2161   001B8A                     
  2162                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2163   001B8A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2164   001B8E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2165   001B92  EE10 F004          	lfsr	1,4
  2166   001B96  50DE               	movf	postinc2,w,c
  2167   001B98  26E1               	addwf	fsr1l,f,c
  2168   001B9A  50DD               	movf	postdec2,w,c
  2169   001B9C  22E2               	addwfc	fsr1h,f,c
  2170   001B9E  0E01               	movlw	1
  2171   001BA0  6EE7               	movwf	indf1,c
  2172   001BA2                     l5859:
  2173   001BA2  0100               	movlb	0	; () banked
  2174   001BA4  518F               	movf	f_write@wcnt& (0+255),w,b
  2175   001BA6  2782               	addwf	f_write@wbuff& (0+255),f,b
  2176   001BA8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2177   001BAA  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2178   001BAC                     
  2179                           ; BSR set to: 0
  2180   001BAC  EE20 F006          	lfsr	2,6
  2181   001BB0  516D               	movf	f_write@fp& (0+255),w,b
  2182   001BB2  26D9               	addwf	fsr2l,f,c
  2183   001BB4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2184   001BB6  22DA               	addwfc	fsr2h,f,c
  2185   001BB8  518F               	movf	f_write@wcnt& (0+255),w,b
  2186   001BBA  26DE               	addwf	postinc2,f,c
  2187   001BBC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2188   001BBE  22DE               	addwfc	postinc2,f,c
  2189   001BC0  0E00               	movlw	0
  2190   001BC2  22DE               	addwfc	postinc2,f,c
  2191   001BC4  22DE               	addwfc	postinc2,f,c
  2192   001BC6                     
  2193                           ; BSR set to: 0
  2194   001BC6  C073  FFD9         	movff	f_write@bw,fsr2l
  2195   001BCA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2196   001BCE  518F               	movf	f_write@wcnt& (0+255),w,b
  2197   001BD0  26DE               	addwf	postinc2,f,c
  2198   001BD2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2199   001BD4  22DD               	addwfc	postdec2,f,c
  2200   001BD6                     
  2201                           ; BSR set to: 0
  2202   001BD6  518F               	movf	f_write@wcnt& (0+255),w,b
  2203   001BD8  5F71               	subwf	f_write@btw& (0+255),f,b
  2204   001BDA  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2205   001BDC  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2206   001BDE                     l5867:
  2207                           
  2208                           ; BSR set to: 0
  2209   001BDE  5171               	movf	f_write@btw& (0+255),w,b
  2210   001BE0  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2211   001BE2  A4D8               	btfss	status,2,c
  2212   001BE4  EFF6  F00D         	goto	u8161
  2213   001BE8  EFF8  F00D         	goto	u8160
  2214   001BEC                     u8161:
  2215   001BEC  EF57  F00A         	goto	l5759
  2216   001BF0                     u8160:
  2217   001BF0                     l5869:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2221   001BF0  EE20 F006          	lfsr	2,6
  2222   001BF4  516D               	movf	f_write@fp& (0+255),w,b
  2223   001BF6  26D9               	addwf	fsr2l,f,c
  2224   001BF8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2225   001BFA  22DA               	addwfc	fsr2h,f,c
  2226   001BFC  EE10 F00A          	lfsr	1,10
  2227   001C00  516D               	movf	f_write@fp& (0+255),w,b
  2228   001C02  26E1               	addwf	fsr1l,f,c
  2229   001C04  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2230   001C06  22E2               	addwfc	fsr1h,f,c
  2231   001C08  50DE               	movf	postinc2,w,c
  2232   001C0A  5CE6               	subwf	postinc1,w,c
  2233   001C0C  50DE               	movf	postinc2,w,c
  2234   001C0E  58E6               	subwfb	postinc1,w,c
  2235   001C10  50DE               	movf	postinc2,w,c
  2236   001C12  58E6               	subwfb	postinc1,w,c
  2237   001C14  50DE               	movf	postinc2,w,c
  2238   001C16  58E6               	subwfb	postinc1,w,c
  2239   001C18  B0D8               	btfsc	status,0,c
  2240   001C1A  EF11  F00E         	goto	u8171
  2241   001C1E  EF13  F00E         	goto	u8170
  2242   001C22                     u8171:
  2243   001C22  EF27  F00E         	goto	l5873
  2244   001C26                     u8170:
  2245   001C26                     
  2246                           ; BSR set to: 0
  2247   001C26  EE20 F006          	lfsr	2,6
  2248   001C2A  516D               	movf	f_write@fp& (0+255),w,b
  2249   001C2C  26D9               	addwf	fsr2l,f,c
  2250   001C2E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2251   001C30  22DA               	addwfc	fsr2h,f,c
  2252   001C32  EE10 F00A          	lfsr	1,10
  2253   001C36  516D               	movf	f_write@fp& (0+255),w,b
  2254   001C38  26E1               	addwf	fsr1l,f,c
  2255   001C3A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2256   001C3C  22E2               	addwfc	fsr1h,f,c
  2257   001C3E  CFDE FFE6          	movff	postinc2,postinc1
  2258   001C42  CFDE FFE6          	movff	postinc2,postinc1
  2259   001C46  CFDE FFE6          	movff	postinc2,postinc1
  2260   001C4A  CFDE FFE6          	movff	postinc2,postinc1
  2261   001C4E                     l5873:
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;ff.c: 2801:  fp->flag |= 0x20;
  2265   001C4E  EE20 F004          	lfsr	2,4
  2266   001C52  516D               	movf	f_write@fp& (0+255),w,b
  2267   001C54  26D9               	addwf	fsr2l,f,c
  2268   001C56  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2269   001C58  22DA               	addwfc	fsr2h,f,c
  2270   001C5A  0E00               	movlw	0
  2271   001C5C  8ADB               	bsf	plusw2,5,c
  2272   001C5E                     l684:
  2273                           
  2274                           ; BSR set to: 0
  2275   001C5E  0012               	return		;funcret
  2276   001C60                     __end_of_f_write:
  2277                           	callstack 0
  2278                           
  2279 ;; *************** function _f_open *****************
  2280 ;; Defined at:
  2281 ;;		line 2449 in file "ff.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  fp              2   58[BANK0 ] PTR struct .
  2284 ;;		 -> Fil(32), 
  2285 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2286 ;;		 -> STR_2(9), STR_1(1), 
  2287 ;;  mode            1   62[BANK0 ] unsigned char 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  dj             22   90[BANK0 ] struct .
  2290 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2291 ;;  dw              4   83[BANK0 ] unsigned long 
  2292 ;;  cl              4   79[BANK0 ] unsigned long 
  2293 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2294 ;;		 -> NULL(0), FatFs(558), 
  2295 ;;  res             1   87[BANK0 ] enum E95
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      enum E3587
  2298 ;; Registers used:
  2299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2305 ;;      Params:         0       5       0       0       0       0       0       0       0
  2306 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2307 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2308 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2309 ;;Total ram usage:       54 bytes
  2310 ;; Hardware stack levels used: 1
  2311 ;; Hardware stack levels required when called: 13
  2312 ;; This function calls:
  2313 ;;		_dir_register
  2314 ;;		_find_volume
  2315 ;;		_follow_path
  2316 ;;		_ld_clust
  2317 ;;		_move_window
  2318 ;;		_remove_chain
  2319 ;;		_st_clust
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text2
  2326   002BD4                     __ptext2:
  2327                           	callstack 0
  2328   002BD4                     _f_open:
  2329                           	callstack 17
  2330   002BD4                     
  2331                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIR_t dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458:
      +                            BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJEC
      +                          T;
  2332   002BD4  0100               	movlb	0	; () banked
  2333   002BD6  519A               	movf	f_open@fp& (0+255),w,b
  2334   002BD8  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2335   002BDA  A4D8               	btfss	status,2,c
  2336   002BDC  EFF2  F015         	goto	u7691
  2337   002BE0  EFF4  F015         	goto	u7690
  2338   002BE4                     u7691:
  2339   002BE4  EFF7  F015         	goto	l5629
  2340   002BE8                     u7690:
  2341   002BE8                     
  2342                           ; BSR set to: 0
  2343   002BE8  0E09               	movlw	9
  2344   002BEA  EF1E  F018         	goto	l635
  2345   002BEE                     l5629:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;ff.c: 2465:  fp->fs = 0;
  2349   002BEE  C09A  FFD9         	movff	f_open@fp,fsr2l
  2350   002BF2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2351   002BF6  6ADE               	clrf	postinc2,c
  2352   002BF8  6ADD               	clrf	postdec2,c
  2353   002BFA                     
  2354                           ; BSR set to: 0
  2355                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2356   002BFA  C0D4  F0BA         	movff	_FatFs@ff$F740,f_open@dj
  2357   002BFE  C0D5  F0BB         	movff	_FatFs@ff$F740+1,f_open@dj+1
  2358   002C02                     
  2359                           ; BSR set to: 0
  2360                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2361   002C02  0E1F               	movlw	31
  2362   002C04  179E               	andwf	f_open@mode& (0+255),f,b
  2363   002C06                     
  2364                           ; BSR set to: 0
  2365                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2366   002C06  0EBA               	movlw	low f_open@dj
  2367   002C08  6E45               	movwf	find_volume@rfs^0,c
  2368   002C0A  0E00               	movlw	high f_open@dj
  2369   002C0C  6E46               	movwf	(find_volume@rfs+1)^0,c
  2370   002C0E  0E9C               	movlw	low f_open@path
  2371   002C10  6E47               	movwf	find_volume@path^0,c
  2372   002C12  0E00               	movlw	high f_open@path
  2373   002C14  6E48               	movwf	(find_volume@path+1)^0,c
  2374   002C16  519E               	movf	f_open@mode& (0+255),w,b
  2375   002C18  0BFE               	andlw	254
  2376   002C1A  6E49               	movwf	find_volume@wmode^0,c
  2377   002C1C  EC1A  F004         	call	_find_volume	;wreg free
  2378   002C20  0100               	movlb	0	; () banked
  2379   002C22  6FB7               	movwf	f_open@res& (0+255),b
  2380   002C24                     
  2381                           ; BSR set to: 0
  2382                           ;ff.c: 2479:  if (res == FR_OK) {
  2383   002C24  51B7               	movf	f_open@res& (0+255),w,b
  2384   002C26  A4D8               	btfss	status,2,c
  2385   002C28  EF18  F016         	goto	u7701
  2386   002C2C  EF1A  F016         	goto	u7700
  2387   002C30                     u7701:
  2388   002C30  EF1D  F018         	goto	l5733
  2389   002C34                     u7700:
  2390   002C34                     
  2391                           ; BSR set to: 0
  2392                           ;ff.c: 2480:   (dj).fn = sfn;
  2393   002C34  0EA3               	movlw	low f_open@sfn
  2394   002C36  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2395   002C38  0E00               	movlw	high f_open@sfn
  2396   002C3A  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2397   002C3C                     
  2398                           ; BSR set to: 0
  2399                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2400   002C3C  0EBA               	movlw	low f_open@dj
  2401   002C3E  6F87               	movwf	follow_path@dp& (0+255),b
  2402   002C40  0E00               	movlw	high f_open@dj
  2403   002C42  6F88               	movwf	(follow_path@dp+1)& (0+255),b
  2404   002C44  C09C  F089         	movff	f_open@path,follow_path@path
  2405   002C48  C09D  F08A         	movff	f_open@path+1,follow_path@path+1
  2406   002C4C  ECE1  F021         	call	_follow_path	;wreg free
  2407   002C50  0100               	movlb	0	; () banked
  2408   002C52  6FB7               	movwf	f_open@res& (0+255),b
  2409   002C54                     
  2410                           ; BSR set to: 0
  2411                           ;ff.c: 2482:   dir = dj.dir;
  2412   002C54  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2413   002C58  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2414   002C5C                     
  2415                           ; BSR set to: 0
  2416                           ;ff.c: 2484:   if (res == FR_OK) {
  2417   002C5C  51B7               	movf	f_open@res& (0+255),w,b
  2418   002C5E  A4D8               	btfss	status,2,c
  2419   002C60  EF34  F016         	goto	u7711
  2420   002C64  EF36  F016         	goto	u7710
  2421   002C68                     u7711:
  2422   002C68  EF41  F016         	goto	l5651
  2423   002C6C                     u7710:
  2424   002C6C                     
  2425                           ; BSR set to: 0
  2426                           ;ff.c: 2485:    if (!dir)
  2427   002C6C  51B8               	movf	f_open@dir& (0+255),w,b
  2428   002C6E  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2429   002C70  A4D8               	btfss	status,2,c
  2430   002C72  EF3D  F016         	goto	u7721
  2431   002C76  EF3F  F016         	goto	u7720
  2432   002C7A                     u7721:
  2433   002C7A  EF41  F016         	goto	l5651
  2434   002C7E                     u7720:
  2435   002C7E                     
  2436                           ; BSR set to: 0
  2437                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2438   002C7E  0E06               	movlw	6
  2439   002C80  6FB7               	movwf	f_open@res& (0+255),b
  2440   002C82                     l5651:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2444   002C82  C09E  F09F         	movff	f_open@mode,??_f_open
  2445   002C86  0E1C               	movlw	28
  2446   002C88  179F               	andwf	??_f_open& (0+255),f,b
  2447   002C8A  B4D8               	btfsc	status,2,c
  2448   002C8C  EF4A  F016         	goto	u7731
  2449   002C90  EF4C  F016         	goto	u7730
  2450   002C94                     u7731:
  2451   002C94  EF4C  F017         	goto	l5699
  2452   002C98                     u7730:
  2453   002C98                     
  2454                           ; BSR set to: 0
  2455                           ;ff.c: 2494:    if (res != FR_OK) {
  2456   002C98  51B7               	movf	f_open@res& (0+255),w,b
  2457   002C9A  B4D8               	btfsc	status,2,c
  2458   002C9C  EF52  F016         	goto	u7741
  2459   002CA0  EF54  F016         	goto	u7740
  2460   002CA4                     u7741:
  2461   002CA4  EF6C  F016         	goto	l5663
  2462   002CA8                     u7740:
  2463   002CA8                     
  2464                           ; BSR set to: 0
  2465                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2466   002CA8  0E04               	movlw	4
  2467   002CAA  19B7               	xorwf	f_open@res& (0+255),w,b
  2468   002CAC  A4D8               	btfss	status,2,c
  2469   002CAE  EF5B  F016         	goto	u7751
  2470   002CB2  EF5D  F016         	goto	u7750
  2471   002CB6                     u7751:
  2472   002CB6  EF65  F016         	goto	l5659
  2473   002CBA                     u7750:
  2474   002CBA                     
  2475                           ; BSR set to: 0
  2476                           ;ff.c: 2499:      res = dir_register(&dj);
  2477   002CBA  0EBA               	movlw	low f_open@dj
  2478   002CBC  6F8B               	movwf	dir_register@dp& (0+255),b
  2479   002CBE  0E00               	movlw	high f_open@dj
  2480   002CC0  6F8C               	movwf	(dir_register@dp+1)& (0+255),b
  2481   002CC2  ECD2  F028         	call	_dir_register	;wreg free
  2482   002CC6  0100               	movlb	0	; () banked
  2483   002CC8  6FB7               	movwf	f_open@res& (0+255),b
  2484   002CCA                     l5659:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;ff.c: 2501:     mode |= 0x08;
  2488   002CCA  879E               	bsf	f_open@mode& (0+255),3,b
  2489   002CCC                     
  2490                           ; BSR set to: 0
  2491                           ;ff.c: 2502:     dir = dj.dir;
  2492   002CCC  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2493   002CD0  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2494                           
  2495                           ;ff.c: 2503:    }
  2496   002CD4  EF8A  F016         	goto	l642
  2497   002CD8                     l5663:
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2501   002CD8  EE20 F00B          	lfsr	2,11
  2502   002CDC  51B8               	movf	f_open@dir& (0+255),w,b
  2503   002CDE  26D9               	addwf	fsr2l,f,c
  2504   002CE0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2505   002CE2  22DA               	addwfc	fsr2h,f,c
  2506   002CE4  50DF               	movf	indf2,w,c
  2507   002CE6  6F9F               	movwf	??_f_open& (0+255),b
  2508   002CE8  0E11               	movlw	17
  2509   002CEA  179F               	andwf	??_f_open& (0+255),f,b
  2510   002CEC  B4D8               	btfsc	status,2,c
  2511   002CEE  EF7B  F016         	goto	u7761
  2512   002CF2  EF7D  F016         	goto	u7760
  2513   002CF6                     u7761:
  2514   002CF6  EF81  F016         	goto	l643
  2515   002CFA                     u7760:
  2516   002CFA                     
  2517                           ; BSR set to: 0
  2518                           ;ff.c: 2506:      res = FR_DENIED;
  2519   002CFA  0E07               	movlw	7
  2520   002CFC  6FB7               	movwf	f_open@res& (0+255),b
  2521                           
  2522                           ;ff.c: 2507:     } else {
  2523   002CFE  EF8A  F016         	goto	l642
  2524   002D02                     l643:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;ff.c: 2508:      if (mode & 0x04)
  2528   002D02  A59E               	btfss	f_open@mode& (0+255),2,b
  2529   002D04  EF86  F016         	goto	u7771
  2530   002D08  EF88  F016         	goto	u7770
  2531   002D0C                     u7771:
  2532   002D0C  EF8A  F016         	goto	l642
  2533   002D10                     u7770:
  2534   002D10                     
  2535                           ; BSR set to: 0
  2536                           ;ff.c: 2509:       res = FR_EXIST;
  2537   002D10  0E08               	movlw	8
  2538   002D12  6FB7               	movwf	f_open@res& (0+255),b
  2539   002D14                     l642:
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2543   002D14  51B7               	movf	f_open@res& (0+255),w,b
  2544   002D16  A4D8               	btfss	status,2,c
  2545   002D18  EF90  F016         	goto	u7781
  2546   002D1C  EF92  F016         	goto	u7780
  2547   002D20                     u7781:
  2548   002D20  EF7B  F017         	goto	l649
  2549   002D24                     u7780:
  2550   002D24                     
  2551                           ; BSR set to: 0
  2552   002D24  A79E               	btfss	f_open@mode& (0+255),3,b
  2553   002D26  EF97  F016         	goto	u7791
  2554   002D2A  EF99  F016         	goto	u7790
  2555   002D2E                     u7791:
  2556   002D2E  EF7B  F017         	goto	l649
  2557   002D32                     u7790:
  2558   002D32                     
  2559                           ; BSR set to: 0
  2560                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2561   002D32  EE20 F00E          	lfsr	2,14
  2562   002D36  51B8               	movf	f_open@dir& (0+255),w,b
  2563   002D38  26D9               	addwf	fsr2l,f,c
  2564   002D3A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2565   002D3C  22DA               	addwfc	fsr2h,f,c
  2566   002D3E  0E00               	movlw	0
  2567   002D40  6EDE               	movwf	postinc2,c
  2568   002D42  0E00               	movlw	0
  2569   002D44  6EDE               	movwf	postinc2,c
  2570   002D46  0E21               	movlw	33
  2571   002D48  6EDE               	movwf	postinc2,c
  2572   002D4A  0E46               	movlw	70
  2573   002D4C  6EDD               	movwf	postdec2,c
  2574   002D4E                     
  2575                           ; BSR set to: 0
  2576                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2577   002D4E  EE20 F016          	lfsr	2,22
  2578   002D52  51B8               	movf	f_open@dir& (0+255),w,b
  2579   002D54  26D9               	addwf	fsr2l,f,c
  2580   002D56  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2581   002D58  22DA               	addwfc	fsr2h,f,c
  2582   002D5A  0E00               	movlw	0
  2583   002D5C  6EDE               	movwf	postinc2,c
  2584   002D5E  0E00               	movlw	0
  2585   002D60  6EDE               	movwf	postinc2,c
  2586   002D62  0E21               	movlw	33
  2587   002D64  6EDE               	movwf	postinc2,c
  2588   002D66  0E46               	movlw	70
  2589   002D68  6EDD               	movwf	postdec2,c
  2590   002D6A                     
  2591                           ; BSR set to: 0
  2592                           ;ff.c: 2516:     dir[11] = 0;
  2593   002D6A  EE20 F00B          	lfsr	2,11
  2594   002D6E  51B8               	movf	f_open@dir& (0+255),w,b
  2595   002D70  26D9               	addwf	fsr2l,f,c
  2596   002D72  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2597   002D74  22DA               	addwfc	fsr2h,f,c
  2598   002D76  6ADF               	clrf	indf2,c
  2599   002D78                     
  2600                           ; BSR set to: 0
  2601                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2602   002D78  EE20 F01C          	lfsr	2,28
  2603   002D7C  51B8               	movf	f_open@dir& (0+255),w,b
  2604   002D7E  26D9               	addwf	fsr2l,f,c
  2605   002D80  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2606   002D82  22DA               	addwfc	fsr2h,f,c
  2607   002D84  6ADE               	clrf	postinc2,c
  2608   002D86  6ADE               	clrf	postinc2,c
  2609   002D88  6ADE               	clrf	postinc2,c
  2610   002D8A  6ADD               	clrf	postdec2,c
  2611   002D8C                     
  2612                           ; BSR set to: 0
  2613                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2614   002D8C  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2615   002D90  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2616   002D94  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2617   002D98  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2618   002D9C  ECEA  F02C         	call	_ld_clust	;wreg free
  2619   002DA0  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2620   002DA4  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2621   002DA8  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2622   002DAC  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2623   002DB0                     
  2624                           ;ff.c: 2519:     st_clust(dir, 0);
  2625   002DB0  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2626   002DB4  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2627   002DB8  0E00               	movlw	0
  2628   002DBA  6E03               	movwf	st_clust@cl^0,c
  2629   002DBC  0E00               	movlw	0
  2630   002DBE  6E04               	movwf	(st_clust@cl+1)^0,c
  2631   002DC0  0E00               	movlw	0
  2632   002DC2  6E05               	movwf	(st_clust@cl+2)^0,c
  2633   002DC4  0E00               	movlw	0
  2634   002DC6  6E06               	movwf	(st_clust@cl+3)^0,c
  2635   002DC8  EC89  F02E         	call	_st_clust	;wreg free
  2636   002DCC                     
  2637                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2638   002DCC  0100               	movlb	0	; () banked
  2639   002DCE  EE20 F004          	lfsr	2,4
  2640   002DD2  51BA               	movf	f_open@dj& (0+255),w,b
  2641   002DD4  26D9               	addwf	fsr2l,f,c
  2642   002DD6  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2643   002DD8  22DA               	addwfc	fsr2h,f,c
  2644   002DDA  0E01               	movlw	1
  2645   002DDC  6EDF               	movwf	indf2,c
  2646   002DDE                     
  2647                           ; BSR set to: 0
  2648                           ;ff.c: 2521:     if (cl) {
  2649   002DDE  51AF               	movf	f_open@cl& (0+255),w,b
  2650   002DE0  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2651   002DE2  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2652   002DE4  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2653   002DE6  B4D8               	btfsc	status,2,c
  2654   002DE8  EFF8  F016         	goto	u7801
  2655   002DEC  EFFA  F016         	goto	u7800
  2656   002DF0                     u7801:
  2657   002DF0  EF7B  F017         	goto	l649
  2658   002DF4                     u7800:
  2659   002DF4                     
  2660                           ; BSR set to: 0
  2661                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2662   002DF4  EE20 F02A          	lfsr	2,42
  2663   002DF8  51BA               	movf	f_open@dj& (0+255),w,b
  2664   002DFA  26D9               	addwf	fsr2l,f,c
  2665   002DFC  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2666   002DFE  22DA               	addwfc	fsr2h,f,c
  2667   002E00  CFDE F0B3          	movff	postinc2,f_open@dw
  2668   002E04  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2669   002E08  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2670   002E0C  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2671   002E10                     
  2672                           ; BSR set to: 0
  2673                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2674   002E10  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2675   002E14  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2676   002E18  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2677   002E1C  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2678   002E20  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2679   002E24  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2680   002E28  ECB9  F022         	call	_remove_chain	;wreg free
  2681   002E2C  0100               	movlb	0	; () banked
  2682   002E2E  6FB7               	movwf	f_open@res& (0+255),b
  2683   002E30                     
  2684                           ; BSR set to: 0
  2685                           ;ff.c: 2524:      if (res == FR_OK) {
  2686   002E30  51B7               	movf	f_open@res& (0+255),w,b
  2687   002E32  A4D8               	btfss	status,2,c
  2688   002E34  EF1E  F017         	goto	u7811
  2689   002E38  EF20  F017         	goto	u7810
  2690   002E3C                     u7811:
  2691   002E3C  EF7B  F017         	goto	l649
  2692   002E40                     u7810:
  2693   002E40                     
  2694                           ; BSR set to: 0
  2695                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2696   002E40  0EFF               	movlw	255
  2697   002E42  25AF               	addwf	f_open@cl& (0+255),w,b
  2698   002E44  6F9F               	movwf	??_f_open& (0+255),b
  2699   002E46  0EFF               	movlw	255
  2700   002E48  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2701   002E4A  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2702   002E4C  0EFF               	movlw	255
  2703   002E4E  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2704   002E50  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2705   002E52  0EFF               	movlw	255
  2706   002E54  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2707   002E56  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2708   002E58  EE20 F00A          	lfsr	2,10
  2709   002E5C  51BA               	movf	f_open@dj& (0+255),w,b
  2710   002E5E  26D9               	addwf	fsr2l,f,c
  2711   002E60  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2712   002E62  22DA               	addwfc	fsr2h,f,c
  2713   002E64  C09F  FFDE         	movff	??_f_open,postinc2
  2714   002E68  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2715   002E6C  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2716   002E70  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2717   002E74                     
  2718                           ; BSR set to: 0
  2719                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2720   002E74  C0BA  F030         	movff	f_open@dj,move_window@fs
  2721   002E78  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2722   002E7C  C0B3  F032         	movff	f_open@dw,move_window@sector
  2723   002E80  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2724   002E84  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2725   002E88  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2726   002E8C  ECE8  F02A         	call	_move_window	;wreg free
  2727   002E90  0100               	movlb	0	; () banked
  2728   002E92  6FB7               	movwf	f_open@res& (0+255),b
  2729   002E94  EF7B  F017         	goto	l649
  2730   002E98                     l5699:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;ff.c: 2532:    if (res == FR_OK) {
  2734   002E98  51B7               	movf	f_open@res& (0+255),w,b
  2735   002E9A  A4D8               	btfss	status,2,c
  2736   002E9C  EF52  F017         	goto	u7821
  2737   002EA0  EF54  F017         	goto	u7820
  2738   002EA4                     u7821:
  2739   002EA4  EF7B  F017         	goto	l649
  2740   002EA8                     u7820:
  2741   002EA8                     
  2742                           ; BSR set to: 0
  2743                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2744   002EA8  EE20 F00B          	lfsr	2,11
  2745   002EAC  51B8               	movf	f_open@dir& (0+255),w,b
  2746   002EAE  26D9               	addwf	fsr2l,f,c
  2747   002EB0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2748   002EB2  22DA               	addwfc	fsr2h,f,c
  2749   002EB4  A8DF               	btfss	indf2,4,c
  2750   002EB6  EF5F  F017         	goto	u7831
  2751   002EBA  EF61  F017         	goto	u7830
  2752   002EBE                     u7831:
  2753   002EBE  EF65  F017         	goto	l651
  2754   002EC2                     u7830:
  2755   002EC2                     
  2756                           ; BSR set to: 0
  2757                           ;ff.c: 2534:      res = FR_NO_FILE;
  2758   002EC2  0E04               	movlw	4
  2759   002EC4  6FB7               	movwf	f_open@res& (0+255),b
  2760                           
  2761                           ;ff.c: 2535:     } else {
  2762   002EC6  EF7B  F017         	goto	l649
  2763   002ECA                     l651:
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2767   002ECA  A39E               	btfss	f_open@mode& (0+255),1,b
  2768   002ECC  EF6A  F017         	goto	u7841
  2769   002ED0  EF6C  F017         	goto	u7840
  2770   002ED4                     u7841:
  2771   002ED4  EF7B  F017         	goto	l649
  2772   002ED8                     u7840:
  2773   002ED8                     
  2774                           ; BSR set to: 0
  2775   002ED8  EE20 F00B          	lfsr	2,11
  2776   002EDC  51B8               	movf	f_open@dir& (0+255),w,b
  2777   002EDE  26D9               	addwf	fsr2l,f,c
  2778   002EE0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2779   002EE2  22DA               	addwfc	fsr2h,f,c
  2780   002EE4  A0DF               	btfss	indf2,0,c
  2781   002EE6  EF77  F017         	goto	u7851
  2782   002EEA  EF79  F017         	goto	u7850
  2783   002EEE                     u7851:
  2784   002EEE  EF7B  F017         	goto	l649
  2785   002EF2                     u7850:
  2786   002EF2                     
  2787                           ; BSR set to: 0
  2788                           ;ff.c: 2537:       res = FR_DENIED;
  2789   002EF2  0E07               	movlw	7
  2790   002EF4  6FB7               	movwf	f_open@res& (0+255),b
  2791   002EF6                     l649:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;ff.c: 2541:   if (res == FR_OK) {
  2795   002EF6  51B7               	movf	f_open@res& (0+255),w,b
  2796   002EF8  A4D8               	btfss	status,2,c
  2797   002EFA  EF81  F017         	goto	u7861
  2798   002EFE  EF83  F017         	goto	u7860
  2799   002F02                     u7861:
  2800   002F02  EFA9  F017         	goto	l5717
  2801   002F06                     u7860:
  2802   002F06                     
  2803                           ; BSR set to: 0
  2804                           ;ff.c: 2542:    if (mode & 0x08)
  2805   002F06  A79E               	btfss	f_open@mode& (0+255),3,b
  2806   002F08  EF88  F017         	goto	u7871
  2807   002F0C  EF8A  F017         	goto	u7870
  2808   002F10                     u7871:
  2809   002F10  EF8B  F017         	goto	l5713
  2810   002F14                     u7870:
  2811   002F14                     
  2812                           ; BSR set to: 0
  2813                           ;ff.c: 2543:     mode |= 0x20;
  2814   002F14  8B9E               	bsf	f_open@mode& (0+255),5,b
  2815   002F16                     l5713:
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2819   002F16  EE20 F02A          	lfsr	2,42
  2820   002F1A  51BA               	movf	f_open@dj& (0+255),w,b
  2821   002F1C  26D9               	addwf	fsr2l,f,c
  2822   002F1E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2823   002F20  22DA               	addwfc	fsr2h,f,c
  2824   002F22  EE10 F01A          	lfsr	1,26
  2825   002F26  519A               	movf	f_open@fp& (0+255),w,b
  2826   002F28  26E1               	addwf	fsr1l,f,c
  2827   002F2A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2828   002F2C  22E2               	addwfc	fsr1h,f,c
  2829   002F2E  CFDE FFE6          	movff	postinc2,postinc1
  2830   002F32  CFDE FFE6          	movff	postinc2,postinc1
  2831   002F36  CFDE FFE6          	movff	postinc2,postinc1
  2832   002F3A  CFDE FFE6          	movff	postinc2,postinc1
  2833   002F3E                     
  2834                           ; BSR set to: 0
  2835                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2836   002F3E  EE20 F01E          	lfsr	2,30
  2837   002F42  519A               	movf	f_open@fp& (0+255),w,b
  2838   002F44  26D9               	addwf	fsr2l,f,c
  2839   002F46  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2840   002F48  22DA               	addwfc	fsr2h,f,c
  2841   002F4A  C0B8  FFDE         	movff	f_open@dir,postinc2
  2842   002F4E  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2843   002F52                     l5717:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;ff.c: 2565:   if (res == FR_OK) {
  2847   002F52  51B7               	movf	f_open@res& (0+255),w,b
  2848   002F54  A4D8               	btfss	status,2,c
  2849   002F56  EFAF  F017         	goto	u7881
  2850   002F5A  EFB1  F017         	goto	u7880
  2851   002F5E                     u7881:
  2852   002F5E  EF1D  F018         	goto	l5733
  2853   002F62                     u7880:
  2854   002F62                     
  2855                           ; BSR set to: 0
  2856                           ;ff.c: 2566:    fp->flag = mode;
  2857   002F62  EE20 F004          	lfsr	2,4
  2858   002F66  519A               	movf	f_open@fp& (0+255),w,b
  2859   002F68  26D9               	addwf	fsr2l,f,c
  2860   002F6A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2861   002F6C  22DA               	addwfc	fsr2h,f,c
  2862   002F6E  C09E  FFDF         	movff	f_open@mode,indf2
  2863                           
  2864                           ;ff.c: 2567:    fp->err = 0;
  2865   002F72  EE20 F005          	lfsr	2,5
  2866   002F76  519A               	movf	f_open@fp& (0+255),w,b
  2867   002F78  26D9               	addwf	fsr2l,f,c
  2868   002F7A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2869   002F7C  22DA               	addwfc	fsr2h,f,c
  2870   002F7E  6ADF               	clrf	indf2,c
  2871   002F80                     
  2872                           ; BSR set to: 0
  2873                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2874   002F80  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2875   002F84  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2876   002F88  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2877   002F8C  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2878   002F90  ECEA  F02C         	call	_ld_clust	;wreg free
  2879   002F94  0100               	movlb	0	; () banked
  2880   002F96  EE20 F00E          	lfsr	2,14
  2881   002F9A  519A               	movf	f_open@fp& (0+255),w,b
  2882   002F9C  26D9               	addwf	fsr2l,f,c
  2883   002F9E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2884   002FA0  22DA               	addwfc	fsr2h,f,c
  2885   002FA2  C001  FFDE         	movff	?_ld_clust,postinc2
  2886   002FA6  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2887   002FAA  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2888   002FAE  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2889   002FB2                     
  2890                           ; BSR set to: 0
  2891                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2892   002FB2  EE20 F01C          	lfsr	2,28
  2893   002FB6  51B8               	movf	f_open@dir& (0+255),w,b
  2894   002FB8  26D9               	addwf	fsr2l,f,c
  2895   002FBA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2896   002FBC  22DA               	addwfc	fsr2h,f,c
  2897   002FBE  EE10 F00A          	lfsr	1,10
  2898   002FC2  519A               	movf	f_open@fp& (0+255),w,b
  2899   002FC4  26E1               	addwf	fsr1l,f,c
  2900   002FC6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2901   002FC8  22E2               	addwfc	fsr1h,f,c
  2902   002FCA  CFDE FFE6          	movff	postinc2,postinc1
  2903   002FCE  CFDE FFE6          	movff	postinc2,postinc1
  2904   002FD2  CFDE FFE6          	movff	postinc2,postinc1
  2905   002FD6  CFDE FFE6          	movff	postinc2,postinc1
  2906   002FDA                     
  2907                           ; BSR set to: 0
  2908                           ;ff.c: 2570:    fp->fptr = 0;
  2909   002FDA  EE20 F006          	lfsr	2,6
  2910   002FDE  519A               	movf	f_open@fp& (0+255),w,b
  2911   002FE0  26D9               	addwf	fsr2l,f,c
  2912   002FE2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2913   002FE4  22DA               	addwfc	fsr2h,f,c
  2914   002FE6  6ADE               	clrf	postinc2,c
  2915   002FE8  6ADE               	clrf	postinc2,c
  2916   002FEA  6ADE               	clrf	postinc2,c
  2917   002FEC  6ADD               	clrf	postdec2,c
  2918   002FEE                     
  2919                           ; BSR set to: 0
  2920                           ;ff.c: 2571:    fp->dsect = 0;
  2921   002FEE  EE20 F016          	lfsr	2,22
  2922   002FF2  519A               	movf	f_open@fp& (0+255),w,b
  2923   002FF4  26D9               	addwf	fsr2l,f,c
  2924   002FF6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2925   002FF8  22DA               	addwfc	fsr2h,f,c
  2926   002FFA  6ADE               	clrf	postinc2,c
  2927   002FFC  6ADE               	clrf	postinc2,c
  2928   002FFE  6ADE               	clrf	postinc2,c
  2929   003000  6ADD               	clrf	postdec2,c
  2930   003002                     
  2931                           ; BSR set to: 0
  2932                           ;ff.c: 2575:    fp->fs = dj.fs;
  2933   003002  C09A  FFD9         	movff	f_open@fp,fsr2l
  2934   003006  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2935   00300A  C0BA  FFDE         	movff	f_open@dj,postinc2
  2936   00300E  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  2937   003012                     
  2938                           ; BSR set to: 0
  2939                           ;ff.c: 2576:    fp->id = fp->fs->id;
  2940   003012  C09A  FFD9         	movff	f_open@fp,fsr2l
  2941   003016  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2942   00301A  EE10 F006          	lfsr	1,6
  2943   00301E  50DE               	movf	postinc2,w,c
  2944   003020  26E1               	addwf	fsr1l,f,c
  2945   003022  50DD               	movf	postdec2,w,c
  2946   003024  22E2               	addwfc	fsr1h,f,c
  2947   003026  EE20 F002          	lfsr	2,2
  2948   00302A  519A               	movf	f_open@fp& (0+255),w,b
  2949   00302C  26D9               	addwf	fsr2l,f,c
  2950   00302E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2951   003030  22DA               	addwfc	fsr2h,f,c
  2952   003032  CFE6 FFDE          	movff	postinc1,postinc2
  2953   003036  CFE5 FFDD          	movff	postdec1,postdec2
  2954   00303A                     l5733:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;ff.c: 2580:  return res;
  2958   00303A  51B7               	movf	f_open@res& (0+255),w,b
  2959   00303C                     l635:
  2960                           
  2961                           ; BSR set to: 0
  2962   00303C  0012               	return		;funcret
  2963   00303E                     __end_of_f_open:
  2964                           	callstack 0
  2965                           
  2966 ;; *************** function _remove_chain *****************
  2967 ;; Defined at:
  2968 ;;		line 937 in file "ff.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  fs              2   85[COMRAM] PTR struct .
  2971 ;;		 -> NULL(0), FatFs(558), 
  2972 ;;  clst            4   87[COMRAM] unsigned long 
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  nxt             4    1[BANK0 ] unsigned long 
  2975 ;;  res             1    0[BANK0 ] enum E95
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      enum E95
  2978 ;; Registers used:
  2979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2985 ;;      Params:         6       0       0       0       0       0       0       0       0
  2986 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2987 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2988 ;;      Totals:        10       5       0       0       0       0       0       0       0
  2989 ;;Total ram usage:       15 bytes
  2990 ;; Hardware stack levels used: 1
  2991 ;; Hardware stack levels required when called: 9
  2992 ;; This function calls:
  2993 ;;		_get_fat
  2994 ;;		_put_fat
  2995 ;; This function is called by:
  2996 ;;		_f_open
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text3
  3001   004572                     __ptext3:
  3002                           	callstack 0
  3003   004572                     _remove_chain:
  3004                           	callstack 20
  3005   004572                     
  3006                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3007   004572  505B               	movf	(remove_chain@clst+3)^0,w,c
  3008   004574  105A               	iorwf	(remove_chain@clst+2)^0,w,c
  3009   004576  1059               	iorwf	(remove_chain@clst+1)^0,w,c
  3010   004578  E109               	bnz	u6970
  3011   00457A  0E02               	movlw	2
  3012   00457C  5C58               	subwf	remove_chain@clst^0,w,c
  3013   00457E  A0D8               	btfss	status,0,c
  3014   004580  EFC4  F022         	goto	u6971
  3015   004584  EFC6  F022         	goto	u6970
  3016   004588                     u6971:
  3017   004588  EFDB  F022         	goto	l5189
  3018   00458C                     u6970:
  3019   00458C  EE20 F012          	lfsr	2,18
  3020   004590  5056               	movf	remove_chain@fs^0,w,c
  3021   004592  26D9               	addwf	fsr2l,f,c
  3022   004594  5057               	movf	(remove_chain@fs+1)^0,w,c
  3023   004596  22DA               	addwfc	fsr2h,f,c
  3024   004598  50DE               	movf	postinc2,w,c
  3025   00459A  5C58               	subwf	remove_chain@clst^0,w,c
  3026   00459C  50DE               	movf	postinc2,w,c
  3027   00459E  5859               	subwfb	(remove_chain@clst+1)^0,w,c
  3028   0045A0  50DE               	movf	postinc2,w,c
  3029   0045A2  585A               	subwfb	(remove_chain@clst+2)^0,w,c
  3030   0045A4  50DE               	movf	postinc2,w,c
  3031   0045A6  585B               	subwfb	(remove_chain@clst+3)^0,w,c
  3032   0045A8  A0D8               	btfss	status,0,c
  3033   0045AA  EFD9  F022         	goto	u6981
  3034   0045AE  EFDB  F022         	goto	u6980
  3035   0045B2                     u6981:
  3036   0045B2  EFE0  F022         	goto	l5191
  3037   0045B6                     u6980:
  3038   0045B6                     l5189:
  3039                           
  3040                           ;ff.c: 949:   res = FR_INT_ERR;
  3041   0045B6  0E02               	movlw	2
  3042   0045B8  0100               	movlb	0	; () banked
  3043   0045BA  6F60               	movwf	remove_chain@res& (0+255),b
  3044                           
  3045                           ;ff.c: 951:  } else {
  3046   0045BC  EF8E  F023         	goto	l5219
  3047   0045C0                     l5191:
  3048                           
  3049                           ;ff.c: 952:   res = FR_OK;
  3050   0045C0  0E00               	movlw	0
  3051   0045C2  0100               	movlb	0	; () banked
  3052   0045C4  6F60               	movwf	remove_chain@res& (0+255),b
  3053                           
  3054                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3055   0045C6  EF79  F023         	goto	l363
  3056   0045CA                     l5193:
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3060   0045CA  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3061   0045CE  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3062   0045D2  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3063   0045D6  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3064   0045DA  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3065   0045DE  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3066   0045E2  EC1F  F018         	call	_get_fat	;wreg free
  3067   0045E6  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3068   0045EA  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3069   0045EE  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3070   0045F2  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3071   0045F6                     
  3072                           ;ff.c: 955:    if (nxt == 0) break;
  3073   0045F6  0100               	movlb	0	; () banked
  3074   0045F8  5161               	movf	remove_chain@nxt& (0+255),w,b
  3075   0045FA  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3076   0045FC  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3077   0045FE  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3078   004600  A4D8               	btfss	status,2,c
  3079   004602  EF05  F023         	goto	u6991
  3080   004606  EF07  F023         	goto	u6990
  3081   00460A                     u6991:
  3082   00460A  EF09  F023         	goto	l5199
  3083   00460E                     u6990:
  3084   00460E  EF8E  F023         	goto	l5219
  3085   004612                     l5199:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3089   004612  0561               	decf	remove_chain@nxt& (0+255),w,b
  3090   004614  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3091   004616  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3092   004618  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3093   00461A  A4D8               	btfss	status,2,c
  3094   00461C  EF12  F023         	goto	u7001
  3095   004620  EF14  F023         	goto	u7000
  3096   004624                     u7001:
  3097   004624  EF16  F023         	goto	l5203
  3098   004628                     u7000:
  3099   004628  EFDB  F022         	goto	l5189
  3100   00462C                     l5203:
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3104   00462C  2961               	incf	remove_chain@nxt& (0+255),w,b
  3105   00462E  E10A               	bnz	u7011
  3106   004630  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3107   004632  E108               	bnz	u7011
  3108   004634  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3109   004636  E106               	bnz	u7011
  3110   004638  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3111   00463A  A4D8               	btfss	status,2,c
  3112   00463C  EF22  F023         	goto	u7011
  3113   004640  EF24  F023         	goto	u7010
  3114   004644                     u7011:
  3115   004644  EF28  F023         	goto	l5207
  3116   004648                     u7010:
  3117   004648                     
  3118                           ; BSR set to: 0
  3119   004648  0E01               	movlw	1
  3120   00464A  6F60               	movwf	remove_chain@res& (0+255),b
  3121   00464C  EF8E  F023         	goto	l5219
  3122   004650                     l5207:
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3126   004650  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3127   004654  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3128   004658  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3129   00465C  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3130   004660  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3131   004664  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3132   004668  0E00               	movlw	0
  3133   00466A  6E41               	movwf	put_fat@val^0,c
  3134   00466C  0E00               	movlw	0
  3135   00466E  6E42               	movwf	(put_fat@val+1)^0,c
  3136   004670  0E00               	movlw	0
  3137   004672  6E43               	movwf	(put_fat@val+2)^0,c
  3138   004674  0E00               	movlw	0
  3139   004676  6E44               	movwf	(put_fat@val+3)^0,c
  3140   004678  EC98  F013         	call	_put_fat	;wreg free
  3141   00467C  0100               	movlb	0	; () banked
  3142   00467E  6F60               	movwf	remove_chain@res& (0+255),b
  3143   004680                     
  3144                           ; BSR set to: 0
  3145                           ;ff.c: 959:    if (res != FR_OK) break;
  3146   004680  5160               	movf	remove_chain@res& (0+255),w,b
  3147   004682  B4D8               	btfsc	status,2,c
  3148   004684  EF46  F023         	goto	u7021
  3149   004688  EF48  F023         	goto	u7020
  3150   00468C                     u7021:
  3151   00468C  EF4A  F023         	goto	l5213
  3152   004690                     u7020:
  3153   004690  EF8E  F023         	goto	l5219
  3154   004694                     l5213:
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3158   004694  EE20 F00E          	lfsr	2,14
  3159   004698  5056               	movf	remove_chain@fs^0,w,c
  3160   00469A  26D9               	addwf	fsr2l,f,c
  3161   00469C  5057               	movf	(remove_chain@fs+1)^0,w,c
  3162   00469E  22DA               	addwfc	fsr2h,f,c
  3163   0046A0  28DE               	incf	postinc2,w,c
  3164   0046A2  E10C               	bnz	u7030
  3165   0046A4  28DE               	incf	postinc2,w,c
  3166   0046A6  E10A               	bnz	u7030
  3167   0046A8  28DE               	incf	postinc2,w,c
  3168   0046AA  E108               	bnz	u7030
  3169   0046AC  28DE               	incf	postinc2,w,c
  3170   0046AE  B4D8               	btfsc	status,2,c
  3171   0046B0  EF5C  F023         	goto	u7031
  3172   0046B4  EF5E  F023         	goto	u7030
  3173   0046B8                     u7031:
  3174   0046B8  EF71  F023         	goto	l5217
  3175   0046BC                     u7030:
  3176   0046BC                     
  3177                           ; BSR set to: 0
  3178                           ;ff.c: 961:     fs->free_clust++;
  3179   0046BC  EE20 F00E          	lfsr	2,14
  3180   0046C0  5056               	movf	remove_chain@fs^0,w,c
  3181   0046C2  26D9               	addwf	fsr2l,f,c
  3182   0046C4  5057               	movf	(remove_chain@fs+1)^0,w,c
  3183   0046C6  22DA               	addwfc	fsr2h,f,c
  3184   0046C8  2ADE               	incf	postinc2,f,c
  3185   0046CA  0E00               	movlw	0
  3186   0046CC  22DE               	addwfc	postinc2,f,c
  3187   0046CE  22DE               	addwfc	postinc2,f,c
  3188   0046D0  22DE               	addwfc	postinc2,f,c
  3189                           
  3190                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3191   0046D2  EE20 F005          	lfsr	2,5
  3192   0046D6  5056               	movf	remove_chain@fs^0,w,c
  3193   0046D8  26D9               	addwf	fsr2l,f,c
  3194   0046DA  5057               	movf	(remove_chain@fs+1)^0,w,c
  3195   0046DC  22DA               	addwfc	fsr2h,f,c
  3196   0046DE  0E00               	movlw	0
  3197   0046E0  80DB               	bsf	plusw2,0,c
  3198   0046E2                     l5217:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;ff.c: 974:    clst = nxt;
  3202   0046E2  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3203   0046E6  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3204   0046EA  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3205   0046EE  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3206   0046F2                     l363:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3210   0046F2  EE20 F012          	lfsr	2,18
  3211   0046F6  5056               	movf	remove_chain@fs^0,w,c
  3212   0046F8  26D9               	addwf	fsr2l,f,c
  3213   0046FA  5057               	movf	(remove_chain@fs+1)^0,w,c
  3214   0046FC  22DA               	addwfc	fsr2h,f,c
  3215   0046FE  50DE               	movf	postinc2,w,c
  3216   004700  5C58               	subwf	remove_chain@clst^0,w,c
  3217   004702  50DE               	movf	postinc2,w,c
  3218   004704  5859               	subwfb	(remove_chain@clst+1)^0,w,c
  3219   004706  50DE               	movf	postinc2,w,c
  3220   004708  585A               	subwfb	(remove_chain@clst+2)^0,w,c
  3221   00470A  50DE               	movf	postinc2,w,c
  3222   00470C  585B               	subwfb	(remove_chain@clst+3)^0,w,c
  3223   00470E  A0D8               	btfss	status,0,c
  3224   004710  EF8C  F023         	goto	u7041
  3225   004714  EF8E  F023         	goto	u7040
  3226   004718                     u7041:
  3227   004718  EFE5  F022         	goto	l5193
  3228   00471C                     u7040:
  3229   00471C                     l5219:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;ff.c: 978:  return res;
  3233   00471C  5160               	movf	remove_chain@res& (0+255),w,b
  3234   00471E                     
  3235                           ; BSR set to: 0
  3236   00471E  0012               	return		;funcret
  3237   004720                     __end_of_remove_chain:
  3238                           	callstack 0
  3239                           
  3240 ;; *************** function _follow_path *****************
  3241 ;; Defined at:
  3242 ;;		line 2052 in file "ff.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  dp              2   39[BANK0 ] PTR struct .
  3245 ;;		 -> f_open@dj(22), 
  3246 ;;  path            2   41[BANK0 ] PTR const unsigned char 
  3247 ;;		 -> STR_2(9), STR_1(1), 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  dir             2   43[BANK0 ] PTR unsigned char 
  3250 ;;		 -> NULL(0), FatFs(558), 
  3251 ;;  res             1   46[BANK0 ] enum E95
  3252 ;;  ns              1   45[BANK0 ] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  1    wreg      enum E95
  3255 ;; Registers used:
  3256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3262 ;;      Params:         0       4       0       0       0       0       0       0       0
  3263 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3265 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3266 ;;Total ram usage:        8 bytes
  3267 ;; Hardware stack levels used: 1
  3268 ;; Hardware stack levels required when called: 12
  3269 ;; This function calls:
  3270 ;;		_create_name
  3271 ;;		_dir_find
  3272 ;;		_dir_sdi
  3273 ;;		_ld_clust
  3274 ;; This function is called by:
  3275 ;;		_f_open
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text4
  3280   0043C2                     __ptext4:
  3281                           	callstack 0
  3282   0043C2                     _follow_path:
  3283                           	callstack 17
  3284   0043C2                     
  3285                           ;ff.c: 2053:  DIR_t* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESU
      +                          LT res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3286   0043C2  C089  FFF6         	movff	follow_path@path,tblptrl
  3287   0043C6  C08A  FFF7         	movff	follow_path@path+1,tblptrh
  3288   0043CA                     	if	0	;tblptru may be non-zero
  3289   0043CA                     	endif
  3290   0043CA                     	if	0	;tblptru may be non-zero
  3291   0043CA                     	endif
  3292   0043CA  0008               	tblrd		*
  3293   0043CC  50F5               	movf	tablat,w,c
  3294   0043CE  0A2F               	xorlw	47
  3295   0043D0  B4D8               	btfsc	status,2,c
  3296   0043D2  EFED  F021         	goto	u7071
  3297   0043D6  EFEF  F021         	goto	u7070
  3298   0043DA                     u7071:
  3299   0043DA  EFFD  F021         	goto	l5245
  3300   0043DE                     u7070:
  3301   0043DE  C089  FFF6         	movff	follow_path@path,tblptrl
  3302   0043E2  C08A  FFF7         	movff	follow_path@path+1,tblptrh
  3303   0043E6                     	if	0	;tblptru may be non-zero
  3304   0043E6                     	endif
  3305   0043E6                     	if	0	;tblptru may be non-zero
  3306   0043E6                     	endif
  3307   0043E6  0008               	tblrd		*
  3308   0043E8  50F5               	movf	tablat,w,c
  3309   0043EA  0A5C               	xorlw	92
  3310   0043EC  A4D8               	btfss	status,2,c
  3311   0043EE  EFFB  F021         	goto	u7081
  3312   0043F2  EFFD  F021         	goto	u7080
  3313   0043F6                     u7081:
  3314   0043F6  EF00  F022         	goto	l5247
  3315   0043FA                     u7080:
  3316   0043FA                     l5245:
  3317                           
  3318                           ;ff.c: 2069:   path++;
  3319   0043FA  0100               	movlb	0	; () banked
  3320   0043FC  4B89               	infsnz	follow_path@path& (0+255),f,b
  3321   0043FE  2B8A               	incf	(follow_path@path+1)& (0+255),f,b
  3322   004400                     l5247:
  3323                           
  3324                           ;ff.c: 2070:  dp->sclust = 0;
  3325   004400  0100               	movlb	0	; () banked
  3326   004402  EE20 F006          	lfsr	2,6
  3327   004406  5187               	movf	follow_path@dp& (0+255),w,b
  3328   004408  26D9               	addwf	fsr2l,f,c
  3329   00440A  5188               	movf	(follow_path@dp+1)& (0+255),w,b
  3330   00440C  22DA               	addwfc	fsr2h,f,c
  3331   00440E  6ADE               	clrf	postinc2,c
  3332   004410  6ADE               	clrf	postinc2,c
  3333   004412  6ADE               	clrf	postinc2,c
  3334   004414  6ADD               	clrf	postdec2,c
  3335   004416                     
  3336                           ; BSR set to: 0
  3337                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3338   004416  C089  FFF6         	movff	follow_path@path,tblptrl
  3339   00441A  C08A  FFF7         	movff	follow_path@path+1,tblptrh
  3340   00441E                     	if	0	;tblptru may be non-zero
  3341   00441E                     	endif
  3342   00441E                     	if	0	;tblptru may be non-zero
  3343   00441E                     	endif
  3344   00441E  0E20               	movlw	32
  3345   004420  0008               	tblrd		*
  3346   004422  60F5               	cpfslt	tablat,c
  3347   004424  EF16  F022         	goto	u7091
  3348   004428  EF18  F022         	goto	u7090
  3349   00442C                     u7091:
  3350   00442C  EF2E  F022         	goto	l5255
  3351   004430                     u7090:
  3352   004430                     
  3353                           ; BSR set to: 0
  3354                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3355   004430  C087  F055         	movff	follow_path@dp,dir_sdi@dp
  3356   004434  C088  F056         	movff	follow_path@dp+1,dir_sdi@dp+1
  3357   004438  0E00               	movlw	0
  3358   00443A  6E58               	movwf	(dir_sdi@idx+1)^0,c
  3359   00443C  0E00               	movlw	0
  3360   00443E  6E57               	movwf	dir_sdi@idx^0,c
  3361   004440  ECDD  F01D         	call	_dir_sdi	;wreg free
  3362   004444  0100               	movlb	0	; () banked
  3363   004446  6F8E               	movwf	follow_path@res& (0+255),b
  3364   004448                     
  3365                           ; BSR set to: 0
  3366                           ;ff.c: 2075:   dp->dir = 0;
  3367   004448  EE20 F012          	lfsr	2,18
  3368   00444C  5187               	movf	follow_path@dp& (0+255),w,b
  3369   00444E  26D9               	addwf	fsr2l,f,c
  3370   004450  5188               	movf	(follow_path@dp+1)& (0+255),w,b
  3371   004452  22DA               	addwfc	fsr2h,f,c
  3372   004454  6ADE               	clrf	postinc2,c
  3373   004456  6ADD               	clrf	postdec2,c
  3374                           
  3375                           ;ff.c: 2076:  } else {
  3376   004458  EFB7  F022         	goto	l5291
  3377   00445C                     l5255:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;ff.c: 2078:    res = create_name(dp, &path);
  3381   00445C  C087  F009         	movff	follow_path@dp,create_name@dp
  3382   004460  C088  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3383   004464  0E89               	movlw	low follow_path@path
  3384   004466  6E0B               	movwf	create_name@path^0,c
  3385   004468  0E00               	movlw	high follow_path@path
  3386   00446A  6E0C               	movwf	(create_name@path+1)^0,c
  3387   00446C  EC18  F01A         	call	_create_name	;wreg free
  3388   004470  0100               	movlb	0	; () banked
  3389   004472  6F8E               	movwf	follow_path@res& (0+255),b
  3390   004474                     
  3391                           ; BSR set to: 0
  3392                           ;ff.c: 2079:    if (res != FR_OK) break;
  3393   004474  518E               	movf	follow_path@res& (0+255),w,b
  3394   004476  B4D8               	btfsc	status,2,c
  3395   004478  EF40  F022         	goto	u7101
  3396   00447C  EF42  F022         	goto	u7100
  3397   004480                     u7101:
  3398   004480  EF44  F022         	goto	l5261
  3399   004484                     u7100:
  3400   004484  EFB7  F022         	goto	l5291
  3401   004488                     l5261:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;ff.c: 2080:    res = dir_find(dp);
  3405   004488  C087  F081         	movff	follow_path@dp,dir_find@dp
  3406   00448C  C088  F082         	movff	follow_path@dp+1,dir_find@dp+1
  3407   004490  EC12  F027         	call	_dir_find	;wreg free
  3408   004494  0100               	movlb	0	; () banked
  3409   004496  6F8E               	movwf	follow_path@res& (0+255),b
  3410   004498                     
  3411                           ; BSR set to: 0
  3412                           ;ff.c: 2081:    ns = dp->fn[11];
  3413   004498  EE20 F014          	lfsr	2,20
  3414   00449C  5187               	movf	follow_path@dp& (0+255),w,b
  3415   00449E  26D9               	addwf	fsr2l,f,c
  3416   0044A0  5188               	movf	(follow_path@dp+1)& (0+255),w,b
  3417   0044A2  22DA               	addwfc	fsr2h,f,c
  3418   0044A4  EE10 F00B          	lfsr	1,11
  3419   0044A8  50DE               	movf	postinc2,w,c
  3420   0044AA  26E1               	addwf	fsr1l,f,c
  3421   0044AC  50DD               	movf	postdec2,w,c
  3422   0044AE  22E2               	addwfc	fsr1h,f,c
  3423   0044B0  50E7               	movf	indf1,w,c
  3424   0044B2  6F8D               	movwf	follow_path@ns& (0+255),b
  3425   0044B4                     
  3426                           ; BSR set to: 0
  3427                           ;ff.c: 2082:    if (res != FR_OK) {
  3428   0044B4  518E               	movf	follow_path@res& (0+255),w,b
  3429   0044B6  B4D8               	btfsc	status,2,c
  3430   0044B8  EF60  F022         	goto	u7111
  3431   0044BC  EF62  F022         	goto	u7110
  3432   0044C0                     u7111:
  3433   0044C0  EF76  F022         	goto	l530
  3434   0044C4                     u7110:
  3435   0044C4                     
  3436                           ; BSR set to: 0
  3437                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3438   0044C4  0E04               	movlw	4
  3439   0044C6  198E               	xorwf	follow_path@res& (0+255),w,b
  3440   0044C8  A4D8               	btfss	status,2,c
  3441   0044CA  EF69  F022         	goto	u7121
  3442   0044CE  EF6B  F022         	goto	u7120
  3443   0044D2                     u7121:
  3444   0044D2  EFB7  F022         	goto	l5291
  3445   0044D6                     u7120:
  3446   0044D6                     
  3447                           ; BSR set to: 0
  3448                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3449   0044D6  B58D               	btfsc	follow_path@ns& (0+255),2,b
  3450   0044D8  EF70  F022         	goto	u7131
  3451   0044DC  EF72  F022         	goto	u7130
  3452   0044E0                     u7131:
  3453   0044E0  EFB7  F022         	goto	l5291
  3454   0044E4                     u7130:
  3455   0044E4                     l5281:
  3456                           
  3457                           ; BSR set to: 0
  3458   0044E4  0E05               	movlw	5
  3459   0044E6  6F8E               	movwf	follow_path@res& (0+255),b
  3460   0044E8  EFB7  F022         	goto	l5291
  3461   0044EC                     l530:
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;ff.c: 2094:    if (ns & 0x04) break;
  3465   0044EC  A58D               	btfss	follow_path@ns& (0+255),2,b
  3466   0044EE  EF7B  F022         	goto	u7141
  3467   0044F2  EF7D  F022         	goto	u7140
  3468   0044F6                     u7141:
  3469   0044F6  EF7F  F022         	goto	l5285
  3470   0044FA                     u7140:
  3471   0044FA  EFB7  F022         	goto	l5291
  3472   0044FE                     l5285:
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;ff.c: 2095:    dir = dp->dir;
  3476   0044FE  EE20 F012          	lfsr	2,18
  3477   004502  5187               	movf	follow_path@dp& (0+255),w,b
  3478   004504  26D9               	addwf	fsr2l,f,c
  3479   004506  5188               	movf	(follow_path@dp+1)& (0+255),w,b
  3480   004508  22DA               	addwfc	fsr2h,f,c
  3481   00450A  CFDE F08B          	movff	postinc2,follow_path@dir
  3482   00450E  CFDD F08C          	movff	postdec2,follow_path@dir+1
  3483                           
  3484                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3485   004512  EE20 F00B          	lfsr	2,11
  3486   004516  518B               	movf	follow_path@dir& (0+255),w,b
  3487   004518  26D9               	addwf	fsr2l,f,c
  3488   00451A  518C               	movf	(follow_path@dir+1)& (0+255),w,b
  3489   00451C  22DA               	addwfc	fsr2h,f,c
  3490   00451E  B8DF               	btfsc	indf2,4,c
  3491   004520  EF94  F022         	goto	u7151
  3492   004524  EF96  F022         	goto	u7150
  3493   004528                     u7151:
  3494   004528  EF98  F022         	goto	l5289
  3495   00452C                     u7150:
  3496   00452C  EF72  F022         	goto	l5281
  3497   004530                     l5289:
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3501   004530  C087  FFD9         	movff	follow_path@dp,fsr2l
  3502   004534  C088  FFDA         	movff	follow_path@dp+1,fsr2h
  3503   004538  CFDE F001          	movff	postinc2,ld_clust@fs
  3504   00453C  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3505   004540  C08B  F003         	movff	follow_path@dir,ld_clust@dir
  3506   004544  C08C  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3507   004548  ECEA  F02C         	call	_ld_clust	;wreg free
  3508   00454C  0100               	movlb	0	; () banked
  3509   00454E  EE20 F006          	lfsr	2,6
  3510   004552  5187               	movf	follow_path@dp& (0+255),w,b
  3511   004554  26D9               	addwf	fsr2l,f,c
  3512   004556  5188               	movf	(follow_path@dp+1)& (0+255),w,b
  3513   004558  22DA               	addwfc	fsr2h,f,c
  3514   00455A  C001  FFDE         	movff	?_ld_clust,postinc2
  3515   00455E  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3516   004562  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3517   004566  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3518   00456A  EF2E  F022         	goto	l5255
  3519   00456E                     l5291:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;ff.c: 2103:  return res;
  3523   00456E  518E               	movf	follow_path@res& (0+255),w,b
  3524   004570                     
  3525                           ; BSR set to: 0
  3526   004570  0012               	return		;funcret
  3527   004572                     __end_of_follow_path:
  3528                           	callstack 0
  3529                           
  3530 ;; *************** function _ld_clust *****************
  3531 ;; Defined at:
  3532 ;;		line 1235 in file "ff.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  fs              2    0[COMRAM] PTR struct .
  3535 ;;		 -> NULL(0), FatFs(558), 
  3536 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3537 ;;		 -> NULL(0), FatFs(558), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  cl              4   10[COMRAM] unsigned long 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  4    0[COMRAM] unsigned long 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3549 ;;      Params:         4       0       0       0       0       0       0       0       0
  3550 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3551 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3552 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3553 ;;Total ram usage:       14 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_follow_path
  3559 ;;		_f_open
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text5
  3564   0059D4                     __ptext5:
  3565                           	callstack 0
  3566   0059D4                     _ld_clust:
  3567                           	callstack 29
  3568   0059D4                     
  3569                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3570   0059D4  0E1A               	movlw	26
  3571   0059D6  2403               	addwf	ld_clust@dir^0,w,c
  3572   0059D8  6ED9               	movwf	fsr2l,c
  3573   0059DA  0E00               	movlw	0
  3574   0059DC  2004               	addwfc	(ld_clust@dir+1)^0,w,c
  3575   0059DE  6EDA               	movwf	fsr2h,c
  3576   0059E0  CFDE F005          	movff	postinc2,??_ld_clust
  3577   0059E4  CFDD F006          	movff	postdec2,??_ld_clust+1
  3578   0059E8  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3579   0059EC  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3580   0059F0  6A0D               	clrf	(ld_clust@cl+2)^0,c
  3581   0059F2  6A0E               	clrf	(ld_clust@cl+3)^0,c
  3582                           
  3583                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3584   0059F4  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3585   0059F8  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3586   0059FC  0E03               	movlw	3
  3587   0059FE  18DE               	xorwf	postinc2,w,c
  3588   005A00  A4D8               	btfss	status,2,c
  3589   005A02  EF05  F02D         	goto	u6411
  3590   005A06  EF07  F02D         	goto	u6410
  3591   005A0A                     u6411:
  3592   005A0A  EF25  F02D         	goto	l4893
  3593   005A0E                     u6410:
  3594   005A0E                     
  3595                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3596   005A0E  0E14               	movlw	20
  3597   005A10  2403               	addwf	ld_clust@dir^0,w,c
  3598   005A12  6ED9               	movwf	fsr2l,c
  3599   005A14  0E00               	movlw	0
  3600   005A16  2004               	addwfc	(ld_clust@dir+1)^0,w,c
  3601   005A18  6EDA               	movwf	fsr2h,c
  3602   005A1A  CFDE F005          	movff	postinc2,??_ld_clust
  3603   005A1E  CFDD F006          	movff	postdec2,??_ld_clust+1
  3604   005A22  5005               	movf	??_ld_clust^0,w,c
  3605   005A24  6E07               	movwf	(??_ld_clust+2)^0,c
  3606   005A26  5006               	movf	(??_ld_clust+1)^0,w,c
  3607   005A28  6E08               	movwf	(??_ld_clust+3)^0,c
  3608   005A2A  6A09               	clrf	(??_ld_clust+4)^0,c
  3609   005A2C  6A0A               	clrf	(??_ld_clust+5)^0,c
  3610   005A2E  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3611   005A32  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3612   005A36  6A08               	clrf	(??_ld_clust+3)^0,c
  3613   005A38  6A07               	clrf	(??_ld_clust+2)^0,c
  3614   005A3A  5007               	movf	(??_ld_clust+2)^0,w,c
  3615   005A3C  120B               	iorwf	ld_clust@cl^0,f,c
  3616   005A3E  5008               	movf	(??_ld_clust+3)^0,w,c
  3617   005A40  120C               	iorwf	(ld_clust@cl+1)^0,f,c
  3618   005A42  5009               	movf	(??_ld_clust+4)^0,w,c
  3619   005A44  120D               	iorwf	(ld_clust@cl+2)^0,f,c
  3620   005A46  500A               	movf	(??_ld_clust+5)^0,w,c
  3621   005A48  120E               	iorwf	(ld_clust@cl+3)^0,f,c
  3622   005A4A                     l4893:
  3623                           
  3624                           ;ff.c: 1246:  return cl;
  3625   005A4A  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3626   005A4E  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3627   005A52  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3628   005A56  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3629   005A5A  0012               	return		;funcret
  3630   005A5C                     __end_of_ld_clust:
  3631                           	callstack 0
  3632                           
  3633 ;; *************** function _dir_find *****************
  3634 ;; Defined at:
  3635 ;;		line 1458 in file "ff.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  dp              2   33[BANK0 ] PTR struct .
  3638 ;;		 -> f_open@dj(22), 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  dir             2   36[BANK0 ] PTR unsigned char 
  3641 ;;		 -> NULL(0), FatFs(558), 
  3642 ;;  res             1   38[BANK0 ] enum E95
  3643 ;;  c               1   35[BANK0 ] unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      enum E95
  3646 ;; Registers used:
  3647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3653 ;;      Params:         0       2       0       0       0       0       0       0       0
  3654 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3656 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3657 ;;Total ram usage:        6 bytes
  3658 ;; Hardware stack levels used: 1
  3659 ;; Hardware stack levels required when called: 11
  3660 ;; This function calls:
  3661 ;;		_dir_next
  3662 ;;		_dir_sdi
  3663 ;;		_mem_cmp
  3664 ;;		_move_window
  3665 ;; This function is called by:
  3666 ;;		_follow_path
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text6
  3671   004E24                     __ptext6:
  3672                           	callstack 0
  3673   004E24                     _dir_find:
  3674                           	callstack 17
  3675   004E24                     
  3676                           ;ff.c: 1459:  DIR_t* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *di
      +                          r;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3677   004E24  C081  F055         	movff	dir_find@dp,dir_sdi@dp
  3678   004E28  C082  F056         	movff	dir_find@dp+1,dir_sdi@dp+1
  3679   004E2C  0E00               	movlw	0
  3680   004E2E  6E58               	movwf	(dir_sdi@idx+1)^0,c
  3681   004E30  0E00               	movlw	0
  3682   004E32  6E57               	movwf	dir_sdi@idx^0,c
  3683   004E34  ECDD  F01D         	call	_dir_sdi	;wreg free
  3684   004E38  0100               	movlb	0	; () banked
  3685   004E3A  6F86               	movwf	dir_find@res& (0+255),b
  3686   004E3C                     
  3687                           ; BSR set to: 0
  3688                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3689   004E3C  5186               	movf	dir_find@res& (0+255),w,b
  3690   004E3E  B4D8               	btfsc	status,2,c
  3691   004E40  EF24  F027         	goto	u6421
  3692   004E44  EF26  F027         	goto	u6420
  3693   004E48                     u6421:
  3694   004E48  EF2A  F027         	goto	l4907
  3695   004E4C                     u6420:
  3696   004E4C                     l4903:
  3697   004E4C  0100               	movlb	0	; () banked
  3698   004E4E  5186               	movf	dir_find@res& (0+255),w,b
  3699   004E50  EFAD  F027         	goto	l464
  3700   004E54                     l4907:
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3704   004E54  C081  FFD9         	movff	dir_find@dp,fsr2l
  3705   004E58  C082  FFDA         	movff	dir_find@dp+1,fsr2h
  3706   004E5C  CFDE F030          	movff	postinc2,move_window@fs
  3707   004E60  CFDD F031          	movff	postdec2,move_window@fs+1
  3708   004E64  EE20 F00E          	lfsr	2,14
  3709   004E68  5181               	movf	dir_find@dp& (0+255),w,b
  3710   004E6A  26D9               	addwf	fsr2l,f,c
  3711   004E6C  5182               	movf	(dir_find@dp+1)& (0+255),w,b
  3712   004E6E  22DA               	addwfc	fsr2h,f,c
  3713   004E70  CFDE F032          	movff	postinc2,move_window@sector
  3714   004E74  CFDE F033          	movff	postinc2,move_window@sector+1
  3715   004E78  CFDE F034          	movff	postinc2,move_window@sector+2
  3716   004E7C  CFDE F035          	movff	postinc2,move_window@sector+3
  3717   004E80  ECE8  F02A         	call	_move_window	;wreg free
  3718   004E84  0100               	movlb	0	; () banked
  3719   004E86  6F86               	movwf	dir_find@res& (0+255),b
  3720   004E88                     
  3721                           ; BSR set to: 0
  3722                           ;ff.c: 1476:   if (res != FR_OK) break;
  3723   004E88  5186               	movf	dir_find@res& (0+255),w,b
  3724   004E8A  B4D8               	btfsc	status,2,c
  3725   004E8C  EF4A  F027         	goto	u6431
  3726   004E90  EF4C  F027         	goto	u6430
  3727   004E94                     u6431:
  3728   004E94  EF4E  F027         	goto	l4913
  3729   004E98                     u6430:
  3730   004E98  EF26  F027         	goto	l4903
  3731   004E9C                     l4913:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;ff.c: 1477:   dir = dp->dir;
  3735   004E9C  EE20 F012          	lfsr	2,18
  3736   004EA0  5181               	movf	dir_find@dp& (0+255),w,b
  3737   004EA2  26D9               	addwf	fsr2l,f,c
  3738   004EA4  5182               	movf	(dir_find@dp+1)& (0+255),w,b
  3739   004EA6  22DA               	addwfc	fsr2h,f,c
  3740   004EA8  CFDE F084          	movff	postinc2,dir_find@dir
  3741   004EAC  CFDD F085          	movff	postdec2,dir_find@dir+1
  3742   004EB0                     
  3743                           ; BSR set to: 0
  3744                           ;ff.c: 1478:   c = dir[0];
  3745   004EB0  C084  FFD9         	movff	dir_find@dir,fsr2l
  3746   004EB4  C085  FFDA         	movff	dir_find@dir+1,fsr2h
  3747   004EB8  50DF               	movf	indf2,w,c
  3748   004EBA  6F83               	movwf	dir_find@c& (0+255),b
  3749   004EBC                     
  3750                           ; BSR set to: 0
  3751                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3752   004EBC  5183               	movf	dir_find@c& (0+255),w,b
  3753   004EBE  A4D8               	btfss	status,2,c
  3754   004EC0  EF64  F027         	goto	u6441
  3755   004EC4  EF66  F027         	goto	u6440
  3756   004EC8                     u6441:
  3757   004EC8  EF6A  F027         	goto	l4921
  3758   004ECC                     u6440:
  3759   004ECC                     
  3760                           ; BSR set to: 0
  3761   004ECC  0E04               	movlw	4
  3762   004ECE  6F86               	movwf	dir_find@res& (0+255),b
  3763   004ED0  EF26  F027         	goto	l4903
  3764   004ED4                     l4921:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3768   004ED4  EE20 F00B          	lfsr	2,11
  3769   004ED8  5184               	movf	dir_find@dir& (0+255),w,b
  3770   004EDA  26D9               	addwf	fsr2l,f,c
  3771   004EDC  5185               	movf	(dir_find@dir+1)& (0+255),w,b
  3772   004EDE  22DA               	addwfc	fsr2h,f,c
  3773   004EE0  B6DF               	btfsc	indf2,3,c
  3774   004EE2  EF75  F027         	goto	u6451
  3775   004EE6  EF77  F027         	goto	u6450
  3776   004EEA                     u6451:
  3777   004EEA  EF96  F027         	goto	l4927
  3778   004EEE                     u6450:
  3779   004EEE                     
  3780                           ; BSR set to: 0
  3781   004EEE  C084  F001         	movff	dir_find@dir,mem_cmp@dst
  3782   004EF2  C085  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3783   004EF6  EE20 F014          	lfsr	2,20
  3784   004EFA  5181               	movf	dir_find@dp& (0+255),w,b
  3785   004EFC  26D9               	addwf	fsr2l,f,c
  3786   004EFE  5182               	movf	(dir_find@dp+1)& (0+255),w,b
  3787   004F00  22DA               	addwfc	fsr2h,f,c
  3788   004F02  CFDE F003          	movff	postinc2,mem_cmp@src
  3789   004F06  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3790   004F0A  0E00               	movlw	0
  3791   004F0C  6E06               	movwf	(mem_cmp@cnt+1)^0,c
  3792   004F0E  0E0B               	movlw	11
  3793   004F10  6E05               	movwf	mem_cmp@cnt^0,c
  3794   004F12  EC2E  F02D         	call	_mem_cmp	;wreg free
  3795   004F16  5001               	movf	?_mem_cmp^0,w,c
  3796   004F18  1002               	iorwf	(?_mem_cmp+1)^0,w,c
  3797   004F1A  A4D8               	btfss	status,2,c
  3798   004F1C  EF92  F027         	goto	u6461
  3799   004F20  EF94  F027         	goto	u6460
  3800   004F24                     u6461:
  3801   004F24  EF96  F027         	goto	l4927
  3802   004F28                     u6460:
  3803   004F28  EF26  F027         	goto	l4903
  3804   004F2C                     l4927:
  3805                           
  3806                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3807   004F2C  C081  F06D         	movff	dir_find@dp,dir_next@dp
  3808   004F30  C082  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3809   004F34  0E00               	movlw	0
  3810   004F36  0100               	movlb	0	; () banked
  3811   004F38  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3812   004F3A  0E00               	movlw	0
  3813   004F3C  6F6F               	movwf	dir_next@stretch& (0+255),b
  3814   004F3E  EC32  F011         	call	_dir_next	;wreg free
  3815   004F42  0100               	movlb	0	; () banked
  3816   004F44  6F86               	movwf	dir_find@res& (0+255),b
  3817   004F46                     
  3818                           ; BSR set to: 0
  3819                           ;ff.c: 1506:  } while (res == FR_OK);
  3820   004F46  5186               	movf	dir_find@res& (0+255),w,b
  3821   004F48  B4D8               	btfsc	status,2,c
  3822   004F4A  EFA9  F027         	goto	u6471
  3823   004F4E  EFAB  F027         	goto	u6470
  3824   004F52                     u6471:
  3825   004F52  EF2A  F027         	goto	l4907
  3826   004F56                     u6470:
  3827   004F56  EF26  F027         	goto	l4903
  3828   004F5A                     l464:
  3829                           
  3830                           ; BSR set to: 0
  3831   004F5A  0012               	return		;funcret
  3832   004F5C                     __end_of_dir_find:
  3833                           	callstack 0
  3834                           
  3835 ;; *************** function _mem_cmp *****************
  3836 ;; Defined at:
  3837 ;;		line 533 in file "ff.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  dst             2    0[COMRAM] PTR const void 
  3840 ;;		 -> NULL(0), FatFs(558), 
  3841 ;;  src             2    2[COMRAM] PTR const void 
  3842 ;;		 -> f_open@sfn(12), 
  3843 ;;  cnt             2    4[COMRAM] unsigned short 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  r               2   12[COMRAM] int 
  3846 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3847 ;;		 -> f_open@sfn(12), 
  3848 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3849 ;;		 -> NULL(0), FatFs(558), 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  2    0[COMRAM] int 
  3852 ;; Registers used:
  3853 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3859 ;;      Params:         6       0       0       0       0       0       0       0       0
  3860 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3861 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3862 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3863 ;;Total ram usage:       14 bytes
  3864 ;; Hardware stack levels used: 1
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_dir_find
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text7
  3873   005A5C                     __ptext7:
  3874                           	callstack 0
  3875   005A5C                     _mem_cmp:
  3876                           	callstack 27
  3877   005A5C                     
  3878                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3879   005A5C  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3880   005A60  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3881   005A64  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3882   005A68  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3883   005A6C                     
  3884                           ;ff.c: 535:  int r = 0;
  3885   005A6C  0E00               	movlw	0
  3886   005A6E  6E0E               	movwf	(mem_cmp@r+1)^0,c
  3887   005A70  0E00               	movlw	0
  3888   005A72  6E0D               	movwf	mem_cmp@r^0,c
  3889   005A74                     l4517:
  3890   005A74  0605               	decf	mem_cmp@cnt^0,f,c
  3891   005A76  A0D8               	btfss	status,0,c
  3892   005A78  0606               	decf	(mem_cmp@cnt+1)^0,f,c
  3893   005A7A  2805               	incf	mem_cmp@cnt^0,w,c
  3894   005A7C  E108               	bnz	u5710
  3895   005A7E  2806               	incf	(mem_cmp@cnt+1)^0,w,c
  3896   005A80  B4D8               	btfsc	status,2,c
  3897   005A82  EF45  F02D         	goto	u5711
  3898   005A86  EF47  F02D         	goto	u5710
  3899   005A8A                     u5711:
  3900   005A8A  EF66  F02D         	goto	l276
  3901   005A8E                     u5710:
  3902   005A8E  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3903   005A92  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3904   005A96  4A09               	infsnz	mem_cmp@d^0,f,c
  3905   005A98  2A0A               	incf	(mem_cmp@d+1)^0,f,c
  3906   005A9A  50DF               	movf	indf2,w,c
  3907   005A9C  6E07               	movwf	??_mem_cmp^0,c
  3908   005A9E  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3909   005AA2  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3910   005AA6  4A0B               	infsnz	mem_cmp@s^0,f,c
  3911   005AA8  2A0C               	incf	(mem_cmp@s+1)^0,f,c
  3912   005AAA  50DF               	movf	indf2,w,c
  3913   005AAC  6E08               	movwf	(??_mem_cmp+1)^0,c
  3914   005AAE  5008               	movf	(??_mem_cmp+1)^0,w,c
  3915   005AB0  5C07               	subwf	??_mem_cmp^0,w,c
  3916   005AB2  6E0D               	movwf	mem_cmp@r^0,c
  3917   005AB4  6A0E               	clrf	(mem_cmp@r+1)^0,c
  3918   005AB6  A0D8               	btfss	status,0,c
  3919   005AB8  060E               	decf	(mem_cmp@r+1)^0,f,c
  3920   005ABA  500D               	movf	mem_cmp@r^0,w,c
  3921   005ABC  100E               	iorwf	(mem_cmp@r+1)^0,w,c
  3922   005ABE  B4D8               	btfsc	status,2,c
  3923   005AC0  EF64  F02D         	goto	u5721
  3924   005AC4  EF66  F02D         	goto	u5720
  3925   005AC8                     u5721:
  3926   005AC8  EF3A  F02D         	goto	l4517
  3927   005ACC                     u5720:
  3928   005ACC                     l276:
  3929                           
  3930                           ;ff.c: 538:  return r;
  3931   005ACC  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3932   005AD0  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3933   005AD4  0012               	return		;funcret
  3934   005AD6                     __end_of_mem_cmp:
  3935                           	callstack 0
  3936                           
  3937 ;; *************** function _create_name *****************
  3938 ;; Defined at:
  3939 ;;		line 1843 in file "ff.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  dp              2    8[COMRAM] PTR struct .
  3942 ;;		 -> f_open@dj(22), 
  3943 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3944 ;;		 -> follow_path@path(2), 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  i               2   26[COMRAM] unsigned short 
  3947 ;;  sfn             2   24[COMRAM] PTR unsigned char 
  3948 ;;		 -> f_open@sfn(12), 
  3949 ;;  p               2   21[COMRAM] PTR const unsigned char 
  3950 ;;		 -> STR_2(9), STR_1(1), 
  3951 ;;  ni              2   19[COMRAM] unsigned short 
  3952 ;;  si              2   16[COMRAM] unsigned short 
  3953 ;;  c               1   28[COMRAM] unsigned char 
  3954 ;;  d               1   23[COMRAM] unsigned char 
  3955 ;;  b               1   18[COMRAM] unsigned char 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      enum E95
  3958 ;; Registers used:
  3959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3965 ;;      Params:         4       0       0       0       0       0       0       0       0
  3966 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3967 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3968 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3969 ;;Total ram usage:       21 bytes
  3970 ;; Hardware stack levels used: 1
  3971 ;; Hardware stack levels required when called: 1
  3972 ;; This function calls:
  3973 ;;		_chk_chr
  3974 ;;		_mem_set
  3975 ;; This function is called by:
  3976 ;;		_follow_path
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text8
  3981   003430                     __ptext8:
  3982                           	callstack 0
  3983   003430                     _create_name:
  3984                           	callstack 27
  3985   003430                     
  3986                           ;ff.c: 1844:  DIR_t* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE
      +                           b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  fo
      +                          r (p = *path; *p == '/' || *p == '\\'; p++) ;
  3987   003430  C00B  FFD9         	movff	create_name@path,fsr2l
  3988   003434  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3989   003438  CFDE F016          	movff	postinc2,create_name@p
  3990   00343C  CFDD F017          	movff	postdec2,create_name@p+1
  3991   003440  EF24  F01A         	goto	l4939
  3992   003444                     l4937:
  3993   003444  4A16               	infsnz	create_name@p^0,f,c
  3994   003446  2A17               	incf	(create_name@p+1)^0,f,c
  3995   003448                     l4939:
  3996   003448  C016  FFF6         	movff	create_name@p,tblptrl
  3997   00344C  C017  FFF7         	movff	create_name@p+1,tblptrh
  3998   003450                     	if	0	;tblptru may be non-zero
  3999   003450                     	endif
  4000   003450                     	if	0	;tblptru may be non-zero
  4001   003450                     	endif
  4002   003450  0008               	tblrd		*
  4003   003452  50F5               	movf	tablat,w,c
  4004   003454  0A2F               	xorlw	47
  4005   003456  B4D8               	btfsc	status,2,c
  4006   003458  EF30  F01A         	goto	u6481
  4007   00345C  EF32  F01A         	goto	u6480
  4008   003460                     u6481:
  4009   003460  EF22  F01A         	goto	l4937
  4010   003464                     u6480:
  4011   003464  C016  FFF6         	movff	create_name@p,tblptrl
  4012   003468  C017  FFF7         	movff	create_name@p+1,tblptrh
  4013   00346C                     	if	0	;tblptru may be non-zero
  4014   00346C                     	endif
  4015   00346C                     	if	0	;tblptru may be non-zero
  4016   00346C                     	endif
  4017   00346C  0008               	tblrd		*
  4018   00346E  50F5               	movf	tablat,w,c
  4019   003470  0A5C               	xorlw	92
  4020   003472  B4D8               	btfsc	status,2,c
  4021   003474  EF3E  F01A         	goto	u6491
  4022   003478  EF40  F01A         	goto	u6490
  4023   00347C                     u6491:
  4024   00347C  EF22  F01A         	goto	l4937
  4025   003480                     u6490:
  4026   003480                     
  4027                           ;ff.c: 1975:  sfn = dp->fn;
  4028   003480  EE20 F014          	lfsr	2,20
  4029   003484  5009               	movf	create_name@dp^0,w,c
  4030   003486  26D9               	addwf	fsr2l,f,c
  4031   003488  500A               	movf	(create_name@dp+1)^0,w,c
  4032   00348A  22DA               	addwfc	fsr2h,f,c
  4033   00348C  CFDE F019          	movff	postinc2,create_name@sfn
  4034   003490  CFDD F01A          	movff	postdec2,create_name@sfn+1
  4035   003494                     
  4036                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  4037   003494  C019  F001         	movff	create_name@sfn,mem_set@dst
  4038   003498  C01A  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4039   00349C  0E00               	movlw	0
  4040   00349E  6E04               	movwf	(mem_set@val+1)^0,c
  4041   0034A0  0E20               	movlw	32
  4042   0034A2  6E03               	movwf	mem_set@val^0,c
  4043   0034A4  0E00               	movlw	0
  4044   0034A6  6E06               	movwf	(mem_set@cnt+1)^0,c
  4045   0034A8  0E0B               	movlw	11
  4046   0034AA  6E05               	movwf	mem_set@cnt^0,c
  4047   0034AC  EC6D  F02E         	call	_mem_set	;wreg free
  4048   0034B0                     
  4049                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  4050   0034B0  0E00               	movlw	0
  4051   0034B2  6E13               	movwf	create_name@b^0,c
  4052   0034B4  C013  F01B         	movff	create_name@b,create_name@i
  4053   0034B8  6A1C               	clrf	(create_name@i+1)^0,c
  4054   0034BA  C01B  F011         	movff	create_name@i,create_name@si
  4055   0034BE  C01C  F012         	movff	create_name@i+1,create_name@si+1
  4056   0034C2  0E00               	movlw	0
  4057   0034C4  6E15               	movwf	(create_name@ni+1)^0,c
  4058   0034C6  0E08               	movlw	8
  4059   0034C8  6E14               	movwf	create_name@ni^0,c
  4060   0034CA                     l4951:
  4061                           
  4062                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4063   0034CA  5011               	movf	create_name@si^0,w,c
  4064   0034CC  2416               	addwf	create_name@p^0,w,c
  4065   0034CE  6E0D               	movwf	??_create_name^0,c
  4066   0034D0  5012               	movf	(create_name@si+1)^0,w,c
  4067   0034D2  2017               	addwfc	(create_name@p+1)^0,w,c
  4068   0034D4  6E0E               	movwf	(??_create_name+1)^0,c
  4069   0034D6  C00D  FFF6         	movff	??_create_name,tblptrl
  4070   0034DA  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4071   0034DE                     	if	0	;tblptru may be non-zero
  4072   0034DE                     	endif
  4073   0034DE                     	if	0	;tblptru may be non-zero
  4074   0034DE                     	endif
  4075   0034DE  0008               	tblrd		*
  4076   0034E0  CFF5 F01D          	movff	tablat,create_name@c
  4077   0034E4  4A11               	infsnz	create_name@si^0,f,c
  4078   0034E6  2A12               	incf	(create_name@si+1)^0,f,c
  4079   0034E8                     
  4080                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4081   0034E8  0E20               	movlw	32
  4082   0034EA  641D               	cpfsgt	create_name@c^0,c
  4083   0034EC  EF7A  F01A         	goto	u6501
  4084   0034F0  EF7C  F01A         	goto	u6500
  4085   0034F4                     u6501:
  4086   0034F4  EF90  F01B         	goto	l5035
  4087   0034F8                     u6500:
  4088   0034F8  0E2F               	movlw	47
  4089   0034FA  181D               	xorwf	create_name@c^0,w,c
  4090   0034FC  B4D8               	btfsc	status,2,c
  4091   0034FE  EF83  F01A         	goto	u6511
  4092   003502  EF85  F01A         	goto	u6510
  4093   003506                     u6511:
  4094   003506  EF90  F01B         	goto	l5035
  4095   00350A                     u6510:
  4096   00350A  0E5C               	movlw	92
  4097   00350C  181D               	xorwf	create_name@c^0,w,c
  4098   00350E  A4D8               	btfss	status,2,c
  4099   003510  EF8C  F01A         	goto	u6521
  4100   003514  EF8E  F01A         	goto	u6520
  4101   003518                     u6521:
  4102   003518  EF90  F01A         	goto	l4961
  4103   00351C                     u6520:
  4104   00351C  EF90  F01B         	goto	l5035
  4105   003520                     l4961:
  4106                           
  4107                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4108   003520  0E2E               	movlw	46
  4109   003522  181D               	xorwf	create_name@c^0,w,c
  4110   003524  B4D8               	btfsc	status,2,c
  4111   003526  EF97  F01A         	goto	u6531
  4112   00352A  EF99  F01A         	goto	u6530
  4113   00352E                     u6531:
  4114   00352E  EFA4  F01A         	goto	l4965
  4115   003532                     u6530:
  4116   003532  5014               	movf	create_name@ni^0,w,c
  4117   003534  5C1B               	subwf	create_name@i^0,w,c
  4118   003536  5015               	movf	(create_name@ni+1)^0,w,c
  4119   003538  581C               	subwfb	(create_name@i+1)^0,w,c
  4120   00353A  A0D8               	btfss	status,0,c
  4121   00353C  EFA2  F01A         	goto	u6541
  4122   003540  EFA4  F01A         	goto	u6540
  4123   003544                     u6541:
  4124   003544  EFC8  F01A         	goto	l4977
  4125   003548                     u6540:
  4126   003548                     l4965:
  4127                           
  4128                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4129   003548  0E08               	movlw	8
  4130   00354A  1814               	xorwf	create_name@ni^0,w,c
  4131   00354C  1015               	iorwf	(create_name@ni+1)^0,w,c
  4132   00354E  A4D8               	btfss	status,2,c
  4133   003550  EFAC  F01A         	goto	u6551
  4134   003554  EFAE  F01A         	goto	u6550
  4135   003558                     u6551:
  4136   003558  EFB7  F01A         	goto	l4969
  4137   00355C                     u6550:
  4138   00355C  0E2E               	movlw	46
  4139   00355E  181D               	xorwf	create_name@c^0,w,c
  4140   003560  B4D8               	btfsc	status,2,c
  4141   003562  EFB5  F01A         	goto	u6561
  4142   003566  EFB7  F01A         	goto	u6560
  4143   00356A                     u6561:
  4144   00356A  EFBA  F01A         	goto	l4973
  4145   00356E                     u6560:
  4146   00356E                     l4969:
  4147   00356E  0E06               	movlw	6
  4148   003570  EFFD  F01B         	goto	l491
  4149   003574                     l4973:
  4150                           
  4151                           ;ff.c: 1996:    i = 8; ni = 11;
  4152   003574  0E00               	movlw	0
  4153   003576  6E1C               	movwf	(create_name@i+1)^0,c
  4154   003578  0E08               	movlw	8
  4155   00357A  6E1B               	movwf	create_name@i^0,c
  4156   00357C  0E00               	movlw	0
  4157   00357E  6E15               	movwf	(create_name@ni+1)^0,c
  4158   003580  0E0B               	movlw	11
  4159   003582  6E14               	movwf	create_name@ni^0,c
  4160   003584                     
  4161                           ;ff.c: 1997:    b <<= 2; continue;
  4162   003584  90D8               	bcf	status,0,c
  4163   003586  3613               	rlcf	create_name@b^0,f,c
  4164   003588  90D8               	bcf	status,0,c
  4165   00358A  3613               	rlcf	create_name@b^0,f,c
  4166   00358C  EF65  F01A         	goto	l4951
  4167   003590                     l4977:
  4168                           
  4169                           ;ff.c: 1999:   if (c >= 0x80) {
  4170   003590  0E7F               	movlw	127
  4171   003592  641D               	cpfsgt	create_name@c^0,c
  4172   003594  EFCE  F01A         	goto	u6571
  4173   003598  EFD0  F01A         	goto	u6570
  4174   00359C                     u6571:
  4175   00359C  EFD2  F01A         	goto	l493
  4176   0035A0                     u6570:
  4177   0035A0                     
  4178                           ;ff.c: 2000:    b |= 3;
  4179   0035A0  0E03               	movlw	3
  4180   0035A2  1213               	iorwf	create_name@b^0,f,c
  4181   0035A4                     l493:
  4182                           
  4183                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4184   0035A4  0E80               	movlw	128
  4185   0035A6  641D               	cpfsgt	create_name@c^0,c
  4186   0035A8  EFD8  F01A         	goto	u6581
  4187   0035AC  EFDA  F01A         	goto	u6580
  4188   0035B0                     u6581:
  4189   0035B0  EFE2  F01A         	goto	l4983
  4190   0035B4                     u6580:
  4191   0035B4  0E9F               	movlw	159
  4192   0035B6  641D               	cpfsgt	create_name@c^0,c
  4193   0035B8  EFE0  F01A         	goto	u6591
  4194   0035BC  EFE2  F01A         	goto	u6590
  4195   0035C0                     u6591:
  4196   0035C0  EFF2  F01A         	goto	l4987
  4197   0035C4                     u6590:
  4198   0035C4                     l4983:
  4199   0035C4  0EDF               	movlw	223
  4200   0035C6  641D               	cpfsgt	create_name@c^0,c
  4201   0035C8  EFE8  F01A         	goto	u6601
  4202   0035CC  EFEA  F01A         	goto	u6600
  4203   0035D0                     u6601:
  4204   0035D0  EF4A  F01B         	goto	l5011
  4205   0035D4                     u6600:
  4206   0035D4  0EFD               	movlw	253
  4207   0035D6  601D               	cpfslt	create_name@c^0,c
  4208   0035D8  EFF0  F01A         	goto	u6611
  4209   0035DC  EFF2  F01A         	goto	u6610
  4210   0035E0                     u6611:
  4211   0035E0  EF4A  F01B         	goto	l5011
  4212   0035E4                     u6610:
  4213   0035E4                     l4987:
  4214                           
  4215                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4216   0035E4  5011               	movf	create_name@si^0,w,c
  4217   0035E6  2416               	addwf	create_name@p^0,w,c
  4218   0035E8  6E0D               	movwf	??_create_name^0,c
  4219   0035EA  5012               	movf	(create_name@si+1)^0,w,c
  4220   0035EC  2017               	addwfc	(create_name@p+1)^0,w,c
  4221   0035EE  6E0E               	movwf	(??_create_name+1)^0,c
  4222   0035F0  C00D  FFF6         	movff	??_create_name,tblptrl
  4223   0035F4  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4224   0035F8                     	if	0	;tblptru may be non-zero
  4225   0035F8                     	endif
  4226   0035F8                     	if	0	;tblptru may be non-zero
  4227   0035F8                     	endif
  4228   0035F8  0008               	tblrd		*
  4229   0035FA  CFF5 F018          	movff	tablat,create_name@d
  4230   0035FE  4A11               	infsnz	create_name@si^0,f,c
  4231   003600  2A12               	incf	(create_name@si+1)^0,f,c
  4232   003602                     
  4233                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4234   003602  0E3F               	movlw	63
  4235   003604  6418               	cpfsgt	create_name@d^0,c
  4236   003606  EF07  F01B         	goto	u6621
  4237   00360A  EF09  F01B         	goto	u6620
  4238   00360E                     u6621:
  4239   00360E  EF11  F01B         	goto	l4995
  4240   003612                     u6620:
  4241   003612  0E7E               	movlw	126
  4242   003614  6418               	cpfsgt	create_name@d^0,c
  4243   003616  EF0F  F01B         	goto	u6631
  4244   00361A  EF11  F01B         	goto	u6630
  4245   00361E                     u6631:
  4246   00361E  EF21  F01B         	goto	l4999
  4247   003622                     u6630:
  4248   003622                     l4995:
  4249   003622  0E7F               	movlw	127
  4250   003624  6418               	cpfsgt	create_name@d^0,c
  4251   003626  EF17  F01B         	goto	u6641
  4252   00362A  EF19  F01B         	goto	u6640
  4253   00362E                     u6641:
  4254   00362E  EFB7  F01A         	goto	l4969
  4255   003632                     u6640:
  4256   003632  0EFD               	movlw	253
  4257   003634  6018               	cpfslt	create_name@d^0,c
  4258   003636  EF1F  F01B         	goto	u6651
  4259   00363A  EF21  F01B         	goto	u6650
  4260   00363E                     u6651:
  4261   00363E  EFB7  F01A         	goto	l4969
  4262   003642                     u6650:
  4263   003642                     l4999:
  4264   003642  0EFF               	movlw	255
  4265   003644  2414               	addwf	create_name@ni^0,w,c
  4266   003646  6E0D               	movwf	??_create_name^0,c
  4267   003648  0EFF               	movlw	255
  4268   00364A  2015               	addwfc	(create_name@ni+1)^0,w,c
  4269   00364C  6E0E               	movwf	(??_create_name+1)^0,c
  4270   00364E  500D               	movf	??_create_name^0,w,c
  4271   003650  5C1B               	subwf	create_name@i^0,w,c
  4272   003652  500E               	movf	(??_create_name+1)^0,w,c
  4273   003654  581C               	subwfb	(create_name@i+1)^0,w,c
  4274   003656  A0D8               	btfss	status,0,c
  4275   003658  EF30  F01B         	goto	u6661
  4276   00365C  EF32  F01B         	goto	u6660
  4277   003660                     u6661:
  4278   003660  EF34  F01B         	goto	l5005
  4279   003664                     u6660:
  4280   003664  EFB7  F01A         	goto	l4969
  4281   003668                     l5005:
  4282                           
  4283                           ;ff.c: 2013:    sfn[i++] = c;
  4284   003668  501B               	movf	create_name@i^0,w,c
  4285   00366A  2419               	addwf	create_name@sfn^0,w,c
  4286   00366C  6ED9               	movwf	fsr2l,c
  4287   00366E  501C               	movf	(create_name@i+1)^0,w,c
  4288   003670  201A               	addwfc	(create_name@sfn+1)^0,w,c
  4289   003672  6EDA               	movwf	fsr2h,c
  4290   003674  C01D  FFDF         	movff	create_name@c,indf2
  4291   003678  4A1B               	infsnz	create_name@i^0,f,c
  4292   00367A  2A1C               	incf	(create_name@i+1)^0,f,c
  4293   00367C                     
  4294                           ;ff.c: 2014:    sfn[i++] = d;
  4295   00367C  501B               	movf	create_name@i^0,w,c
  4296   00367E  2419               	addwf	create_name@sfn^0,w,c
  4297   003680  6ED9               	movwf	fsr2l,c
  4298   003682  501C               	movf	(create_name@i+1)^0,w,c
  4299   003684  201A               	addwfc	(create_name@sfn+1)^0,w,c
  4300   003686  6EDA               	movwf	fsr2h,c
  4301   003688  C018  FFDF         	movff	create_name@d,indf2
  4302   00368C  4A1B               	infsnz	create_name@i^0,f,c
  4303   00368E  2A1C               	incf	(create_name@i+1)^0,f,c
  4304                           
  4305                           ;ff.c: 2015:   } else {
  4306   003690  EF65  F01A         	goto	l4951
  4307   003694                     l5011:
  4308                           
  4309                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4310   003694  0E1A               	movlw	low STR_4
  4311   003696  6E01               	movwf	chk_chr@str^0,c
  4312   003698  0E08               	movlw	high STR_4
  4313   00369A  6E02               	movwf	(chk_chr@str+1)^0,c
  4314   00369C  C01D  F003         	movff	create_name@c,chk_chr@chr
  4315   0036A0  6A04               	clrf	(chk_chr@chr+1)^0,c
  4316   0036A2  ECA0  F02D         	call	_chk_chr	;wreg free
  4317   0036A6  5001               	movf	?_chk_chr^0,w,c
  4318   0036A8  1002               	iorwf	(?_chk_chr+1)^0,w,c
  4319   0036AA  B4D8               	btfsc	status,2,c
  4320   0036AC  EF5A  F01B         	goto	u6671
  4321   0036B0  EF5C  F01B         	goto	u6670
  4322   0036B4                     u6671:
  4323   0036B4  EF5E  F01B         	goto	l5017
  4324   0036B8                     u6670:
  4325   0036B8  EFB7  F01A         	goto	l4969
  4326   0036BC                     l5017:
  4327                           
  4328                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4329   0036BC  0E40               	movlw	64
  4330   0036BE  641D               	cpfsgt	create_name@c^0,c
  4331   0036C0  EF64  F01B         	goto	u6681
  4332   0036C4  EF66  F01B         	goto	u6680
  4333   0036C8                     u6681:
  4334   0036C8  EF71  F01B         	goto	l5023
  4335   0036CC                     u6680:
  4336   0036CC  0E5B               	movlw	91
  4337   0036CE  601D               	cpfslt	create_name@c^0,c
  4338   0036D0  EF6C  F01B         	goto	u6691
  4339   0036D4  EF6E  F01B         	goto	u6690
  4340   0036D8                     u6691:
  4341   0036D8  EF71  F01B         	goto	l5023
  4342   0036DC                     u6690:
  4343   0036DC                     
  4344                           ;ff.c: 2019:     b |= 2;
  4345   0036DC  8213               	bsf	create_name@b^0,1,c
  4346                           
  4347                           ;ff.c: 2020:    } else {
  4348   0036DE  EF84  F01B         	goto	l5031
  4349   0036E2                     l5023:
  4350                           
  4351                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4352   0036E2  0E60               	movlw	96
  4353   0036E4  641D               	cpfsgt	create_name@c^0,c
  4354   0036E6  EF77  F01B         	goto	u6701
  4355   0036EA  EF79  F01B         	goto	u6700
  4356   0036EE                     u6701:
  4357   0036EE  EF84  F01B         	goto	l5031
  4358   0036F2                     u6700:
  4359   0036F2  0E7B               	movlw	123
  4360   0036F4  601D               	cpfslt	create_name@c^0,c
  4361   0036F6  EF7F  F01B         	goto	u6711
  4362   0036FA  EF81  F01B         	goto	u6710
  4363   0036FE                     u6711:
  4364   0036FE  EF84  F01B         	goto	l5031
  4365   003702                     u6710:
  4366   003702                     
  4367                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4368   003702  8013               	bsf	create_name@b^0,0,c
  4369   003704  0E20               	movlw	32
  4370   003706  5E1D               	subwf	create_name@c^0,f,c
  4371   003708                     l5031:
  4372                           
  4373                           ;ff.c: 2025:    sfn[i++] = c;
  4374   003708  501B               	movf	create_name@i^0,w,c
  4375   00370A  2419               	addwf	create_name@sfn^0,w,c
  4376   00370C  6ED9               	movwf	fsr2l,c
  4377   00370E  501C               	movf	(create_name@i+1)^0,w,c
  4378   003710  201A               	addwfc	(create_name@sfn+1)^0,w,c
  4379   003712  6EDA               	movwf	fsr2h,c
  4380   003714  C01D  FFDF         	movff	create_name@c,indf2
  4381   003718  4A1B               	infsnz	create_name@i^0,f,c
  4382   00371A  2A1C               	incf	(create_name@i+1)^0,f,c
  4383   00371C  EF65  F01A         	goto	l4951
  4384   003720                     l5035:
  4385                           
  4386                           ;ff.c: 2028:  *path = &p[si];
  4387   003720  5011               	movf	create_name@si^0,w,c
  4388   003722  2416               	addwf	create_name@p^0,w,c
  4389   003724  6E0D               	movwf	??_create_name^0,c
  4390   003726  5012               	movf	(create_name@si+1)^0,w,c
  4391   003728  2017               	addwfc	(create_name@p+1)^0,w,c
  4392   00372A  6E0E               	movwf	(??_create_name+1)^0,c
  4393   00372C  C00B  FFD9         	movff	create_name@path,fsr2l
  4394   003730  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4395   003734  C00D  FFDE         	movff	??_create_name,postinc2
  4396   003738  C00E  FFDD         	movff	??_create_name+1,postdec2
  4397   00373C                     
  4398                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4399   00373C  0E20               	movlw	32
  4400   00373E  641D               	cpfsgt	create_name@c^0,c
  4401   003740  EFA4  F01B         	goto	u6721
  4402   003744  EFA6  F01B         	goto	u6720
  4403   003748                     u6721:
  4404   003748  EFAC  F01B         	goto	l5041
  4405   00374C                     u6720:
  4406   00374C  0E00               	movlw	0
  4407   00374E  6E10               	movwf	(_create_name$1131+1)^0,c
  4408   003750  0E00               	movlw	0
  4409   003752  6E0F               	movwf	_create_name$1131^0,c
  4410   003754  EFB0  F01B         	goto	l5043
  4411   003758                     l5041:
  4412   003758  0E00               	movlw	0
  4413   00375A  6E10               	movwf	(_create_name$1131+1)^0,c
  4414   00375C  0E04               	movlw	4
  4415   00375E  6E0F               	movwf	_create_name$1131^0,c
  4416   003760                     l5043:
  4417   003760  C00F  F01D         	movff	_create_name$1131,create_name@c
  4418   003764                     
  4419                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4420   003764  501B               	movf	create_name@i^0,w,c
  4421   003766  101C               	iorwf	(create_name@i+1)^0,w,c
  4422   003768  A4D8               	btfss	status,2,c
  4423   00376A  EFB9  F01B         	goto	u6731
  4424   00376E  EFBB  F01B         	goto	u6730
  4425   003772                     u6731:
  4426   003772  EFBD  F01B         	goto	l5051
  4427   003776                     u6730:
  4428   003776  EFB7  F01A         	goto	l4969
  4429   00377A                     l5051:
  4430                           
  4431                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4432   00377A  C019  FFD9         	movff	create_name@sfn,fsr2l
  4433   00377E  C01A  FFDA         	movff	create_name@sfn+1,fsr2h
  4434   003782  0EE5               	movlw	229
  4435   003784  18DE               	xorwf	postinc2,w,c
  4436   003786  A4D8               	btfss	status,2,c
  4437   003788  EFC8  F01B         	goto	u6741
  4438   00378C  EFCA  F01B         	goto	u6740
  4439   003790                     u6741:
  4440   003790  EFD0  F01B         	goto	l5055
  4441   003794                     u6740:
  4442   003794  C019  FFD9         	movff	create_name@sfn,fsr2l
  4443   003798  C01A  FFDA         	movff	create_name@sfn+1,fsr2h
  4444   00379C  0E05               	movlw	5
  4445   00379E  6EDF               	movwf	indf2,c
  4446   0037A0                     l5055:
  4447                           
  4448                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4449   0037A0  0E08               	movlw	8
  4450   0037A2  1814               	xorwf	create_name@ni^0,w,c
  4451   0037A4  1015               	iorwf	(create_name@ni+1)^0,w,c
  4452   0037A6  A4D8               	btfss	status,2,c
  4453   0037A8  EFD8  F01B         	goto	u6751
  4454   0037AC  EFDA  F01B         	goto	u6750
  4455   0037B0                     u6751:
  4456   0037B0  EFDE  F01B         	goto	l517
  4457   0037B4                     u6750:
  4458   0037B4  90D8               	bcf	status,0,c
  4459   0037B6  3613               	rlcf	create_name@b^0,f,c
  4460   0037B8  90D8               	bcf	status,0,c
  4461   0037BA  3613               	rlcf	create_name@b^0,f,c
  4462   0037BC                     l517:
  4463                           
  4464                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4465   0037BC  5013               	movf	create_name@b^0,w,c
  4466   0037BE  0B03               	andlw	3
  4467   0037C0  06E8               	decf	wreg,f,c
  4468   0037C2  A4D8               	btfss	status,2,c
  4469   0037C4  EFE6  F01B         	goto	u6761
  4470   0037C8  EFE8  F01B         	goto	u6760
  4471   0037CC                     u6761:
  4472   0037CC  EFE9  F01B         	goto	l5061
  4473   0037D0                     u6760:
  4474   0037D0  881D               	bsf	create_name@c^0,4,c
  4475   0037D2                     l5061:
  4476                           
  4477                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4478   0037D2  5013               	movf	create_name@b^0,w,c
  4479   0037D4  0B0C               	andlw	12
  4480   0037D6  0A04               	xorlw	4
  4481   0037D8  A4D8               	btfss	status,2,c
  4482   0037DA  EFF1  F01B         	goto	u6771
  4483   0037DE  EFF3  F01B         	goto	u6770
  4484   0037E2                     u6771:
  4485   0037E2  EFF4  F01B         	goto	l5065
  4486   0037E6                     u6770:
  4487   0037E6  861D               	bsf	create_name@c^0,3,c
  4488   0037E8                     l5065:
  4489                           
  4490                           ;ff.c: 2038:  sfn[11] = c;
  4491   0037E8  EE20 F00B          	lfsr	2,11
  4492   0037EC  5019               	movf	create_name@sfn^0,w,c
  4493   0037EE  26D9               	addwf	fsr2l,f,c
  4494   0037F0  501A               	movf	(create_name@sfn+1)^0,w,c
  4495   0037F2  22DA               	addwfc	fsr2h,f,c
  4496   0037F4  C01D  FFDF         	movff	create_name@c,indf2
  4497   0037F8                     
  4498                           ;ff.c: 2040:  return FR_OK;
  4499   0037F8  0E00               	movlw	0
  4500   0037FA                     l491:
  4501   0037FA  0012               	return		;funcret
  4502   0037FC                     __end_of_create_name:
  4503                           	callstack 0
  4504                           
  4505 ;; *************** function _chk_chr *****************
  4506 ;; Defined at:
  4507 ;;		line 543 in file "ff.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4510 ;;		 -> STR_5(15), 
  4511 ;;  chr             2    2[COMRAM] int 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  2    0[COMRAM] int 
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4523 ;;      Params:         4       0       0       0       0       0       0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4525 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4526 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4527 ;;Total ram usage:        6 bytes
  4528 ;; Hardware stack levels used: 1
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_create_name
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text9
  4537   005B40                     __ptext9:
  4538                           	callstack 0
  4539   005B40                     _chk_chr:
  4540                           	callstack 27
  4541   005B40                     
  4542                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4543   005B40  EFA4  F02D         	goto	l4525
  4544   005B44                     l4523:
  4545   005B44  4A01               	infsnz	chk_chr@str^0,f,c
  4546   005B46  2A02               	incf	(chk_chr@str+1)^0,f,c
  4547   005B48                     l4525:
  4548   005B48  C001  FFF6         	movff	chk_chr@str,tblptrl
  4549   005B4C  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4550   005B50                     	if	0	;tblptru may be non-zero
  4551   005B50                     	endif
  4552   005B50                     	if	0	;tblptru may be non-zero
  4553   005B50                     	endif
  4554   005B50  0008               	tblrd		*
  4555   005B52  50F5               	movf	tablat,w,c
  4556   005B54  0900               	iorlw	0
  4557   005B56  B4D8               	btfsc	status,2,c
  4558   005B58  EFB0  F02D         	goto	u5731
  4559   005B5C  EFB2  F02D         	goto	u5730
  4560   005B60                     u5731:
  4561   005B60  EFC6  F02D         	goto	l4529
  4562   005B64                     u5730:
  4563   005B64  C001  FFF6         	movff	chk_chr@str,tblptrl
  4564   005B68  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4565   005B6C                     	if	0	;tblptru may be non-zero
  4566   005B6C                     	endif
  4567   005B6C                     	if	0	;tblptru may be non-zero
  4568   005B6C                     	endif
  4569   005B6C  0008               	tblrd		*
  4570   005B6E  50F5               	movf	tablat,w,c
  4571   005B70  6E05               	movwf	??_chk_chr^0,c
  4572   005B72  6A06               	clrf	(??_chk_chr+1)^0,c
  4573   005B74  5003               	movf	chk_chr@chr^0,w,c
  4574   005B76  1805               	xorwf	??_chk_chr^0,w,c
  4575   005B78  E107               	bnz	u5741
  4576   005B7A  5004               	movf	(chk_chr@chr+1)^0,w,c
  4577   005B7C  1806               	xorwf	(??_chk_chr+1)^0,w,c
  4578   005B7E  A4D8               	btfss	status,2,c
  4579   005B80  EFC4  F02D         	goto	u5741
  4580   005B84  EFC6  F02D         	goto	u5740
  4581   005B88                     u5741:
  4582   005B88  EFA2  F02D         	goto	l4523
  4583   005B8C                     u5740:
  4584   005B8C                     l4529:
  4585                           
  4586                           ;ff.c: 545:  return *str;
  4587   005B8C  C001  FFF6         	movff	chk_chr@str,tblptrl
  4588   005B90  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4589   005B94                     	if	0	;tblptru may be non-zero
  4590   005B94                     	endif
  4591   005B94                     	if	0	;tblptru may be non-zero
  4592   005B94                     	endif
  4593   005B94  0008               	tblrd		*
  4594   005B96  50F5               	movf	tablat,w,c
  4595   005B98  6E01               	movwf	?_chk_chr^0,c
  4596   005B9A  6A02               	clrf	(?_chk_chr+1)^0,c
  4597   005B9C  0012               	return		;funcret
  4598   005B9E                     __end_of_chk_chr:
  4599                           	callstack 0
  4600                           
  4601 ;; *************** function _dir_register *****************
  4602 ;; Defined at:
  4603 ;;		line 1578 in file "ff.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  dp              2   43[BANK0 ] PTR struct .
  4606 ;;		 -> f_open@dj(22), 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  res             1   45[BANK0 ] enum E95
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      enum E95
  4611 ;; Registers used:
  4612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4618 ;;      Params:         0       2       0       0       0       0       0       0       0
  4619 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4621 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4622 ;;Total ram usage:        3 bytes
  4623 ;; Hardware stack levels used: 1
  4624 ;; Hardware stack levels required when called: 12
  4625 ;; This function calls:
  4626 ;;		_dir_alloc
  4627 ;;		_mem_cpy
  4628 ;;		_mem_set
  4629 ;;		_move_window
  4630 ;; This function is called by:
  4631 ;;		_f_open
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text10
  4636   0051A4                     __ptext10:
  4637                           	callstack 0
  4638   0051A4                     _dir_register:
  4639                           	callstack 17
  4640   0051A4                     
  4641                           ;ff.c: 1579:  DIR_t* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_a
      +                          lloc(dp, 1);
  4642   0051A4  C08B  F081         	movff	dir_register@dp,dir_alloc@dp
  4643   0051A8  C08C  F082         	movff	dir_register@dp+1,dir_alloc@dp+1
  4644   0051AC  0E00               	movlw	0
  4645   0051AE  0100               	movlb	0	; () banked
  4646   0051B0  6F84               	movwf	(dir_alloc@nent+1)& (0+255),b
  4647   0051B2  0E01               	movlw	1
  4648   0051B4  6F83               	movwf	dir_alloc@nent& (0+255),b
  4649   0051B6  ECD6  F025         	call	_dir_alloc	;wreg free
  4650   0051BA  0100               	movlb	0	; () banked
  4651   0051BC  6F8D               	movwf	dir_register@res& (0+255),b
  4652   0051BE                     
  4653                           ; BSR set to: 0
  4654                           ;ff.c: 1632:  if (res == FR_OK) {
  4655   0051BE  518D               	movf	dir_register@res& (0+255),w,b
  4656   0051C0  A4D8               	btfss	status,2,c
  4657   0051C2  EFE5  F028         	goto	u7051
  4658   0051C6  EFE7  F028         	goto	u7050
  4659   0051CA                     u7051:
  4660   0051CA  EF44  F029         	goto	l5237
  4661   0051CE                     u7050:
  4662   0051CE                     
  4663                           ; BSR set to: 0
  4664                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4665   0051CE  C08B  FFD9         	movff	dir_register@dp,fsr2l
  4666   0051D2  C08C  FFDA         	movff	dir_register@dp+1,fsr2h
  4667   0051D6  CFDE F030          	movff	postinc2,move_window@fs
  4668   0051DA  CFDD F031          	movff	postdec2,move_window@fs+1
  4669   0051DE  EE20 F00E          	lfsr	2,14
  4670   0051E2  518B               	movf	dir_register@dp& (0+255),w,b
  4671   0051E4  26D9               	addwf	fsr2l,f,c
  4672   0051E6  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  4673   0051E8  22DA               	addwfc	fsr2h,f,c
  4674   0051EA  CFDE F032          	movff	postinc2,move_window@sector
  4675   0051EE  CFDE F033          	movff	postinc2,move_window@sector+1
  4676   0051F2  CFDE F034          	movff	postinc2,move_window@sector+2
  4677   0051F6  CFDE F035          	movff	postinc2,move_window@sector+3
  4678   0051FA  ECE8  F02A         	call	_move_window	;wreg free
  4679   0051FE  0100               	movlb	0	; () banked
  4680   005200  6F8D               	movwf	dir_register@res& (0+255),b
  4681   005202                     
  4682                           ; BSR set to: 0
  4683                           ;ff.c: 1634:   if (res == FR_OK) {
  4684   005202  518D               	movf	dir_register@res& (0+255),w,b
  4685   005204  A4D8               	btfss	status,2,c
  4686   005206  EF07  F029         	goto	u7061
  4687   00520A  EF09  F029         	goto	u7060
  4688   00520E                     u7061:
  4689   00520E  EF44  F029         	goto	l5237
  4690   005212                     u7060:
  4691   005212                     
  4692                           ; BSR set to: 0
  4693                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4694   005212  EE20 F012          	lfsr	2,18
  4695   005216  518B               	movf	dir_register@dp& (0+255),w,b
  4696   005218  26D9               	addwf	fsr2l,f,c
  4697   00521A  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  4698   00521C  22DA               	addwfc	fsr2h,f,c
  4699   00521E  CFDE F001          	movff	postinc2,mem_set@dst
  4700   005222  CFDD F002          	movff	postdec2,mem_set@dst+1
  4701   005226  0E00               	movlw	0
  4702   005228  6E04               	movwf	(mem_set@val+1)^0,c
  4703   00522A  0E00               	movlw	0
  4704   00522C  6E03               	movwf	mem_set@val^0,c
  4705   00522E  0E00               	movlw	0
  4706   005230  6E06               	movwf	(mem_set@cnt+1)^0,c
  4707   005232  0E20               	movlw	32
  4708   005234  6E05               	movwf	mem_set@cnt^0,c
  4709   005236  EC6D  F02E         	call	_mem_set	;wreg free
  4710   00523A                     
  4711                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4712   00523A  0100               	movlb	0	; () banked
  4713   00523C  EE20 F012          	lfsr	2,18
  4714   005240  518B               	movf	dir_register@dp& (0+255),w,b
  4715   005242  26D9               	addwf	fsr2l,f,c
  4716   005244  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  4717   005246  22DA               	addwfc	fsr2h,f,c
  4718   005248  CFDE F001          	movff	postinc2,mem_cpy@dst
  4719   00524C  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4720   005250  EE20 F014          	lfsr	2,20
  4721   005254  518B               	movf	dir_register@dp& (0+255),w,b
  4722   005256  26D9               	addwf	fsr2l,f,c
  4723   005258  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  4724   00525A  22DA               	addwfc	fsr2h,f,c
  4725   00525C  CFDE F003          	movff	postinc2,mem_cpy@src
  4726   005260  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4727   005264  0E00               	movlw	0
  4728   005266  6E06               	movwf	(mem_cpy@cnt+1)^0,c
  4729   005268  0E0B               	movlw	11
  4730   00526A  6E05               	movwf	mem_cpy@cnt^0,c
  4731   00526C  ECB8  F029         	call	_mem_cpy	;wreg free
  4732   005270                     
  4733                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4734   005270  C08B  FFD9         	movff	dir_register@dp,fsr2l
  4735   005274  C08C  FFDA         	movff	dir_register@dp+1,fsr2h
  4736   005278  EE10 F004          	lfsr	1,4
  4737   00527C  50DE               	movf	postinc2,w,c
  4738   00527E  26E1               	addwf	fsr1l,f,c
  4739   005280  50DD               	movf	postdec2,w,c
  4740   005282  22E2               	addwfc	fsr1h,f,c
  4741   005284  0E01               	movlw	1
  4742   005286  6EE7               	movwf	indf1,c
  4743   005288                     l5237:
  4744                           
  4745                           ;ff.c: 1644:  return res;
  4746   005288  0100               	movlb	0	; () banked
  4747   00528A  518D               	movf	dir_register@res& (0+255),w,b
  4748   00528C                     
  4749                           ; BSR set to: 0
  4750   00528C  0012               	return		;funcret
  4751   00528E                     __end_of_dir_register:
  4752                           	callstack 0
  4753                           
  4754 ;; *************** function _mem_cpy *****************
  4755 ;; Defined at:
  4756 ;;		line 507 in file "ff.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  dst             2    0[COMRAM] PTR void 
  4759 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4760 ;;  src             2    2[COMRAM] PTR const void 
  4761 ;;		 -> f_open@sfn(12), NULL(0), STR_3(25), FatFs(558), 
  4762 ;;  cnt             2    4[COMRAM] unsigned short 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4765 ;;		 -> f_open@sfn(12), NULL(0), STR_3(25), FatFs(558), 
  4766 ;;  d               2    8[COMRAM] PTR unsigned char 
  4767 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4777 ;;      Params:         6       0       0       0       0       0       0       0       0
  4778 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4779 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4780 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4781 ;;Total ram usage:       12 bytes
  4782 ;; Hardware stack levels used: 1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_dir_register
  4787 ;;		_f_write
  4788 ;;		_f_read
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text11
  4793   005370                     __ptext11:
  4794                           	callstack 0
  4795   005370                     _mem_cpy:
  4796                           	callstack 29
  4797   005370                     
  4798                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4799   005370  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4800   005374  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4801                           
  4802                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4803   005378  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4804   00537C  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4805                           
  4806                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4807   005380  EFED  F029         	goto	l4815
  4808   005384                     l4807:
  4809                           
  4810                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4811   005384  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4812   005388  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4813   00538C  6AF8               	clrf	tblptru,c
  4814   00538E  0E07               	movlw	(high __ramtop+-1)
  4815   005390  64F7               	cpfsgt	tblptrh,c
  4816   005392  D007               	bra	u6267
  4817   005394  0009               	tblrd		*+
  4818   005396  CFF5 F007          	movff	tablat,??_mem_cpy
  4819   00539A  0009               	tblrd		*+
  4820   00539C  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4821   0053A0  D008               	bra	u6260
  4822   0053A2                     u6267:
  4823   0053A2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4824   0053A6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4825   0053AA  CFEE F007          	movff	postinc0,??_mem_cpy
  4826   0053AE  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4827   0053B2                     u6260:
  4828   0053B2  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4829   0053B6  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4830   0053BA  C007  FFDE         	movff	??_mem_cpy,postinc2
  4831   0053BE  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4832   0053C2                     
  4833                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4834   0053C2  0E02               	movlw	2
  4835   0053C4  2609               	addwf	mem_cpy@d^0,f,c
  4836   0053C6  0E00               	movlw	0
  4837   0053C8  220A               	addwfc	(mem_cpy@d+1)^0,f,c
  4838   0053CA  0E02               	movlw	2
  4839   0053CC  260B               	addwf	mem_cpy@s^0,f,c
  4840   0053CE  0E00               	movlw	0
  4841   0053D0  220C               	addwfc	(mem_cpy@s+1)^0,f,c
  4842   0053D2                     
  4843                           ;ff.c: 515:   cnt -= sizeof (int);
  4844   0053D2  0E02               	movlw	2
  4845   0053D4  5E05               	subwf	mem_cpy@cnt^0,f,c
  4846   0053D6  0E00               	movlw	0
  4847   0053D8  5A06               	subwfb	(mem_cpy@cnt+1)^0,f,c
  4848   0053DA                     l4815:
  4849                           
  4850                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4851   0053DA  5006               	movf	(mem_cpy@cnt+1)^0,w,c
  4852   0053DC  E107               	bnz	u6271
  4853   0053DE  0E02               	movlw	2
  4854   0053E0  5C05               	subwf	mem_cpy@cnt^0,w,c
  4855   0053E2  B0D8               	btfsc	status,0,c
  4856   0053E4  EFF6  F029         	goto	u6271
  4857   0053E8  EFF8  F029         	goto	u6270
  4858   0053EC                     u6271:
  4859   0053EC  EFC2  F029         	goto	l4807
  4860   0053F0                     u6270:
  4861   0053F0  EF13  F02A         	goto	l4823
  4862   0053F4                     l4817:
  4863                           
  4864                           ;ff.c: 519:   *d++ = *s++;
  4865   0053F4  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4866   0053F8  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4867   0053FC  6AF8               	clrf	tblptru,c
  4868   0053FE  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4869   005402  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4870   005406  0E07               	movlw	(high __ramtop+-1)
  4871   005408  64F7               	cpfsgt	tblptrh,c
  4872   00540A  D003               	bra	u6287
  4873   00540C  0008               	tblrd		*
  4874   00540E  50F5               	movf	tablat,w,c
  4875   005410  D005               	bra	u6280
  4876   005412                     u6287:
  4877   005412  CFF6 FFE9          	movff	tblptrl,fsr0l
  4878   005416  CFF7 FFEA          	movff	tblptrh,fsr0h
  4879   00541A  50EF               	movf	indf0,w,c
  4880   00541C                     u6280:
  4881   00541C  6EDF               	movwf	indf2,c
  4882   00541E  4A0B               	infsnz	mem_cpy@s^0,f,c
  4883   005420  2A0C               	incf	(mem_cpy@s+1)^0,f,c
  4884   005422  4A09               	infsnz	mem_cpy@d^0,f,c
  4885   005424  2A0A               	incf	(mem_cpy@d+1)^0,f,c
  4886   005426                     l4823:
  4887                           
  4888                           ;ff.c: 518:  while (cnt--)
  4889   005426  0605               	decf	mem_cpy@cnt^0,f,c
  4890   005428  A0D8               	btfss	status,0,c
  4891   00542A  0606               	decf	(mem_cpy@cnt+1)^0,f,c
  4892   00542C  2805               	incf	mem_cpy@cnt^0,w,c
  4893   00542E  E106               	bnz	u6291
  4894   005430  2806               	incf	(mem_cpy@cnt+1)^0,w,c
  4895   005432  A4D8               	btfss	status,2,c
  4896   005434  EF1E  F02A         	goto	u6291
  4897   005438  EF20  F02A         	goto	u6290
  4898   00543C                     u6291:
  4899   00543C  EFFA  F029         	goto	l4817
  4900   005440                     u6290:
  4901   005440  0012               	return		;funcret
  4902   005442                     __end_of_mem_cpy:
  4903                           	callstack 0
  4904                           
  4905 ;; *************** function _dir_alloc *****************
  4906 ;; Defined at:
  4907 ;;		line 1199 in file "ff.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  dp              2   33[BANK0 ] PTR struct .
  4910 ;;		 -> f_open@dj(22), 
  4911 ;;  nent            2   35[BANK0 ] unsigned short 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  n               2   40[BANK0 ] unsigned short 
  4914 ;;  res             1   42[BANK0 ] enum E95
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      enum E95
  4917 ;; Registers used:
  4918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4924 ;;      Params:         0       4       0       0       0       0       0       0       0
  4925 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4926 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4927 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4928 ;;Total ram usage:       10 bytes
  4929 ;; Hardware stack levels used: 1
  4930 ;; Hardware stack levels required when called: 11
  4931 ;; This function calls:
  4932 ;;		_dir_next
  4933 ;;		_dir_sdi
  4934 ;;		_move_window
  4935 ;; This function is called by:
  4936 ;;		_dir_register
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text12
  4941   004BAC                     __ptext12:
  4942                           	callstack 0
  4943   004BAC                     _dir_alloc:
  4944                           	callstack 17
  4945   004BAC                     
  4946                           ;ff.c: 1200:  DIR_t* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;
      +                          ff.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4947   004BAC  C081  F055         	movff	dir_alloc@dp,dir_sdi@dp
  4948   004BB0  C082  F056         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4949   004BB4  0E00               	movlw	0
  4950   004BB6  6E58               	movwf	(dir_sdi@idx+1)^0,c
  4951   004BB8  0E00               	movlw	0
  4952   004BBA  6E57               	movwf	dir_sdi@idx^0,c
  4953   004BBC  ECDD  F01D         	call	_dir_sdi	;wreg free
  4954   004BC0  0100               	movlb	0	; () banked
  4955   004BC2  6F8A               	movwf	dir_alloc@res& (0+255),b
  4956   004BC4                     
  4957                           ; BSR set to: 0
  4958                           ;ff.c: 1209:  if (res == FR_OK) {
  4959   004BC4  518A               	movf	dir_alloc@res& (0+255),w,b
  4960   004BC6  A4D8               	btfss	status,2,c
  4961   004BC8  EFE8  F025         	goto	u6341
  4962   004BCC  EFEA  F025         	goto	u6340
  4963   004BD0                     u6341:
  4964   004BD0  EF67  F026         	goto	l4883
  4965   004BD4                     u6340:
  4966   004BD4                     
  4967                           ; BSR set to: 0
  4968                           ;ff.c: 1210:   n = 0;
  4969   004BD4  0E00               	movlw	0
  4970   004BD6  6F89               	movwf	(dir_alloc@n+1)& (0+255),b
  4971   004BD8  0E00               	movlw	0
  4972   004BDA  6F88               	movwf	dir_alloc@n& (0+255),b
  4973   004BDC                     l4863:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4977   004BDC  C081  FFD9         	movff	dir_alloc@dp,fsr2l
  4978   004BE0  C082  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4979   004BE4  CFDE F030          	movff	postinc2,move_window@fs
  4980   004BE8  CFDD F031          	movff	postdec2,move_window@fs+1
  4981   004BEC  EE20 F00E          	lfsr	2,14
  4982   004BF0  5181               	movf	dir_alloc@dp& (0+255),w,b
  4983   004BF2  26D9               	addwf	fsr2l,f,c
  4984   004BF4  5182               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4985   004BF6  22DA               	addwfc	fsr2h,f,c
  4986   004BF8  CFDE F032          	movff	postinc2,move_window@sector
  4987   004BFC  CFDE F033          	movff	postinc2,move_window@sector+1
  4988   004C00  CFDE F034          	movff	postinc2,move_window@sector+2
  4989   004C04  CFDE F035          	movff	postinc2,move_window@sector+3
  4990   004C08  ECE8  F02A         	call	_move_window	;wreg free
  4991   004C0C  0100               	movlb	0	; () banked
  4992   004C0E  6F8A               	movwf	dir_alloc@res& (0+255),b
  4993   004C10                     
  4994                           ; BSR set to: 0
  4995                           ;ff.c: 1213:    if (res != FR_OK) break;
  4996   004C10  518A               	movf	dir_alloc@res& (0+255),w,b
  4997   004C12  B4D8               	btfsc	status,2,c
  4998   004C14  EF0E  F026         	goto	u6351
  4999   004C18  EF10  F026         	goto	u6350
  5000   004C1C                     u6351:
  5001   004C1C  EF12  F026         	goto	l4869
  5002   004C20                     u6350:
  5003   004C20  EF67  F026         	goto	l4883
  5004   004C24                     l4869:
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  5008   004C24  EE20 F012          	lfsr	2,18
  5009   004C28  5181               	movf	dir_alloc@dp& (0+255),w,b
  5010   004C2A  26D9               	addwf	fsr2l,f,c
  5011   004C2C  5182               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5012   004C2E  22DA               	addwfc	fsr2h,f,c
  5013   004C30  CFDE F085          	movff	postinc2,??_dir_alloc
  5014   004C34  CFDD F086          	movff	postdec2,??_dir_alloc+1
  5015   004C38  C085  FFD9         	movff	??_dir_alloc,fsr2l
  5016   004C3C  C086  FFDA         	movff	??_dir_alloc+1,fsr2h
  5017   004C40  0EE5               	movlw	229
  5018   004C42  18DE               	xorwf	postinc2,w,c
  5019   004C44  B4D8               	btfsc	status,2,c
  5020   004C46  EF27  F026         	goto	u6361
  5021   004C4A  EF29  F026         	goto	u6360
  5022   004C4E                     u6361:
  5023   004C4E  EF3F  F026         	goto	l4873
  5024   004C52                     u6360:
  5025   004C52                     
  5026                           ; BSR set to: 0
  5027   004C52  EE20 F012          	lfsr	2,18
  5028   004C56  5181               	movf	dir_alloc@dp& (0+255),w,b
  5029   004C58  26D9               	addwf	fsr2l,f,c
  5030   004C5A  5182               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5031   004C5C  22DA               	addwfc	fsr2h,f,c
  5032   004C5E  CFDE F085          	movff	postinc2,??_dir_alloc
  5033   004C62  CFDD F086          	movff	postdec2,??_dir_alloc+1
  5034   004C66  C085  FFD9         	movff	??_dir_alloc,fsr2l
  5035   004C6A  C086  FFDA         	movff	??_dir_alloc+1,fsr2h
  5036   004C6E  50DF               	movf	indf2,w,c
  5037   004C70  A4D8               	btfss	status,2,c
  5038   004C72  EF3D  F026         	goto	u6371
  5039   004C76  EF3F  F026         	goto	u6370
  5040   004C7A                     u6371:
  5041   004C7A  EF4F  F026         	goto	l4877
  5042   004C7E                     u6370:
  5043   004C7E                     l4873:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;ff.c: 1215:     if (++n == nent) break;
  5047   004C7E  4B88               	infsnz	dir_alloc@n& (0+255),f,b
  5048   004C80  2B89               	incf	(dir_alloc@n+1)& (0+255),f,b
  5049   004C82  5183               	movf	dir_alloc@nent& (0+255),w,b
  5050   004C84  1988               	xorwf	dir_alloc@n& (0+255),w,b
  5051   004C86  E107               	bnz	u6381
  5052   004C88  5184               	movf	(dir_alloc@nent+1)& (0+255),w,b
  5053   004C8A  1989               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  5054   004C8C  A4D8               	btfss	status,2,c
  5055   004C8E  EF4B  F026         	goto	u6381
  5056   004C92  EF4D  F026         	goto	u6380
  5057   004C96                     u6381:
  5058   004C96  EF53  F026         	goto	l4879
  5059   004C9A                     u6380:
  5060   004C9A  EF67  F026         	goto	l4883
  5061   004C9E                     l4877:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;ff.c: 1217:     n = 0;
  5065   004C9E  0E00               	movlw	0
  5066   004CA0  6F89               	movwf	(dir_alloc@n+1)& (0+255),b
  5067   004CA2  0E00               	movlw	0
  5068   004CA4  6F88               	movwf	dir_alloc@n& (0+255),b
  5069   004CA6                     l4879:
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;ff.c: 1219:    res = dir_next(dp, 1);
  5073   004CA6  C081  F06D         	movff	dir_alloc@dp,dir_next@dp
  5074   004CAA  C082  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  5075   004CAE  0E00               	movlw	0
  5076   004CB0  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5077   004CB2  0E01               	movlw	1
  5078   004CB4  6F6F               	movwf	dir_next@stretch& (0+255),b
  5079   004CB6  EC32  F011         	call	_dir_next	;wreg free
  5080   004CBA  0100               	movlb	0	; () banked
  5081   004CBC  6F8A               	movwf	dir_alloc@res& (0+255),b
  5082   004CBE                     
  5083                           ; BSR set to: 0
  5084                           ;ff.c: 1220:   } while (res == FR_OK);
  5085   004CBE  518A               	movf	dir_alloc@res& (0+255),w,b
  5086   004CC0  B4D8               	btfsc	status,2,c
  5087   004CC2  EF65  F026         	goto	u6391
  5088   004CC6  EF67  F026         	goto	u6390
  5089   004CCA                     u6391:
  5090   004CCA  EFEE  F025         	goto	l4863
  5091   004CCE                     u6390:
  5092   004CCE                     l4883:
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  5096   004CCE  0E04               	movlw	4
  5097   004CD0  198A               	xorwf	dir_alloc@res& (0+255),w,b
  5098   004CD2  A4D8               	btfss	status,2,c
  5099   004CD4  EF6E  F026         	goto	u6401
  5100   004CD8  EF70  F026         	goto	u6400
  5101   004CDC                     u6401:
  5102   004CDC  EF72  F026         	goto	l452
  5103   004CE0                     u6400:
  5104   004CE0                     
  5105                           ; BSR set to: 0
  5106   004CE0  0E07               	movlw	7
  5107   004CE2  6F8A               	movwf	dir_alloc@res& (0+255),b
  5108   004CE4                     l452:
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;ff.c: 1223:  return res;
  5112   004CE4  518A               	movf	dir_alloc@res& (0+255),w,b
  5113   004CE6                     
  5114                           ; BSR set to: 0
  5115   004CE6  0012               	return		;funcret
  5116   004CE8                     __end_of_dir_alloc:
  5117                           	callstack 0
  5118                           
  5119 ;; *************** function _dir_sdi *****************
  5120 ;; Defined at:
  5121 ;;		line 1080 in file "ff.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  dp              2   84[COMRAM] PTR struct .
  5124 ;;		 -> f_open@dj(22), 
  5125 ;;  idx             2   86[COMRAM] unsigned short 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  clst            4    6[BANK0 ] unsigned long 
  5128 ;;  sect            4    2[BANK0 ] unsigned long 
  5129 ;;  ic              2    0[BANK0 ] unsigned short 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      enum E95
  5132 ;; Registers used:
  5133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5139 ;;      Params:         4       0       0       0       0       0       0       0       0
  5140 ;;      Locals:         0      10       0       0       0       0       0       0       0
  5141 ;;      Temps:          7       0       0       0       0       0       0       0       0
  5142 ;;      Totals:        11      10       0       0       0       0       0       0       0
  5143 ;;Total ram usage:       21 bytes
  5144 ;; Hardware stack levels used: 1
  5145 ;; Hardware stack levels required when called: 9
  5146 ;; This function calls:
  5147 ;;		_clust2sect
  5148 ;;		_get_fat
  5149 ;; This function is called by:
  5150 ;;		_dir_alloc
  5151 ;;		_dir_find
  5152 ;;		_follow_path
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text13
  5157   003BBA                     __ptext13:
  5158                           	callstack 0
  5159   003BBA                     _dir_sdi:
  5160                           	callstack 19
  5161   003BBA                     
  5162                           ;ff.c: 1081:  DIR_t* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, se
      +                          ct;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  5163   003BBA  EE20 F004          	lfsr	2,4
  5164   003BBE  5055               	movf	dir_sdi@dp^0,w,c
  5165   003BC0  26D9               	addwf	fsr2l,f,c
  5166   003BC2  5056               	movf	(dir_sdi@dp+1)^0,w,c
  5167   003BC4  22DA               	addwfc	fsr2h,f,c
  5168   003BC6  C057  FFDE         	movff	dir_sdi@idx,postinc2
  5169   003BCA  C058  FFDD         	movff	dir_sdi@idx+1,postdec2
  5170                           
  5171                           ;ff.c: 1090:  clst = dp->sclust;
  5172   003BCE  EE20 F006          	lfsr	2,6
  5173   003BD2  5055               	movf	dir_sdi@dp^0,w,c
  5174   003BD4  26D9               	addwf	fsr2l,f,c
  5175   003BD6  5056               	movf	(dir_sdi@dp+1)^0,w,c
  5176   003BD8  22DA               	addwfc	fsr2h,f,c
  5177   003BDA  CFDE F066          	movff	postinc2,dir_sdi@clst
  5178   003BDE  CFDE F067          	movff	postinc2,dir_sdi@clst+1
  5179   003BE2  CFDE F068          	movff	postinc2,dir_sdi@clst+2
  5180   003BE6  CFDE F069          	movff	postinc2,dir_sdi@clst+3
  5181   003BEA                     
  5182                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  5183   003BEA  0100               	movlb	0	; () banked
  5184   003BEC  0566               	decf	dir_sdi@clst& (0+255),w,b
  5185   003BEE  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5186   003BF0  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5187   003BF2  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5188   003BF4  B4D8               	btfsc	status,2,c
  5189   003BF6  EFFF  F01D         	goto	u5751
  5190   003BFA  EF01  F01E         	goto	u5750
  5191   003BFE                     u5751:
  5192   003BFE  EF1A  F01E         	goto	l4539
  5193   003C02                     u5750:
  5194   003C02                     
  5195                           ; BSR set to: 0
  5196   003C02  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5197   003C06  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5198   003C0A  EE10 F012          	lfsr	1,18
  5199   003C0E  50DE               	movf	postinc2,w,c
  5200   003C10  26E1               	addwf	fsr1l,f,c
  5201   003C12  50DD               	movf	postdec2,w,c
  5202   003C14  22E2               	addwfc	fsr1h,f,c
  5203   003C16  50E6               	movf	postinc1,w,c
  5204   003C18  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  5205   003C1A  50E6               	movf	postinc1,w,c
  5206   003C1C  5967               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5207   003C1E  50E6               	movf	postinc1,w,c
  5208   003C20  5968               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5209   003C22  50E6               	movf	postinc1,w,c
  5210   003C24  5969               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5211   003C26  A0D8               	btfss	status,0,c
  5212   003C28  EF18  F01E         	goto	u5761
  5213   003C2C  EF1A  F01E         	goto	u5760
  5214   003C30                     u5761:
  5215   003C30  EF1D  F01E         	goto	l4543
  5216   003C34                     u5760:
  5217   003C34                     l4539:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;ff.c: 1092:   return FR_INT_ERR;
  5221   003C34  0E02               	movlw	2
  5222   003C36  EF82  F01F         	goto	l405
  5223   003C3A                     l4543:
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  5227   003C3A  5166               	movf	dir_sdi@clst& (0+255),w,b
  5228   003C3C  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5229   003C3E  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5230   003C40  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5231   003C42  A4D8               	btfss	status,2,c
  5232   003C44  EF26  F01E         	goto	u5771
  5233   003C48  EF28  F01E         	goto	u5770
  5234   003C4C                     u5771:
  5235   003C4C  EF4F  F01E         	goto	l4549
  5236   003C50                     u5770:
  5237   003C50                     
  5238                           ; BSR set to: 0
  5239   003C50  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5240   003C54  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5241   003C58  CFDE F059          	movff	postinc2,??_dir_sdi
  5242   003C5C  CFDD F05A          	movff	postdec2,??_dir_sdi+1
  5243   003C60  C059  FFD9         	movff	??_dir_sdi,fsr2l
  5244   003C64  C05A  FFDA         	movff	??_dir_sdi+1,fsr2h
  5245   003C68  0E03               	movlw	3
  5246   003C6A  18DE               	xorwf	postinc2,w,c
  5247   003C6C  A4D8               	btfss	status,2,c
  5248   003C6E  EF3B  F01E         	goto	u5781
  5249   003C72  EF3D  F01E         	goto	u5780
  5250   003C76                     u5781:
  5251   003C76  EF4F  F01E         	goto	l4549
  5252   003C7A                     u5780:
  5253   003C7A                     
  5254                           ; BSR set to: 0
  5255                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5256   003C7A  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5257   003C7E  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5258   003C82  EE10 F022          	lfsr	1,34
  5259   003C86  50DE               	movf	postinc2,w,c
  5260   003C88  26E1               	addwf	fsr1l,f,c
  5261   003C8A  50DD               	movf	postdec2,w,c
  5262   003C8C  22E2               	addwfc	fsr1h,f,c
  5263   003C8E  CFE6 F066          	movff	postinc1,dir_sdi@clst
  5264   003C92  CFE6 F067          	movff	postinc1,dir_sdi@clst+1
  5265   003C96  CFE6 F068          	movff	postinc1,dir_sdi@clst+2
  5266   003C9A  CFE6 F069          	movff	postinc1,dir_sdi@clst+3
  5267   003C9E                     l4549:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;ff.c: 1096:  if (clst == 0) {
  5271   003C9E  5166               	movf	dir_sdi@clst& (0+255),w,b
  5272   003CA0  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5273   003CA2  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5274   003CA4  1169               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5275   003CA6  A4D8               	btfss	status,2,c
  5276   003CA8  EF58  F01E         	goto	u5791
  5277   003CAC  EF5A  F01E         	goto	u5790
  5278   003CB0                     u5791:
  5279   003CB0  EF85  F01E         	goto	l4559
  5280   003CB4                     u5790:
  5281   003CB4                     
  5282                           ; BSR set to: 0
  5283                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5284   003CB4  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5285   003CB8  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5286   003CBC  EE10 F008          	lfsr	1,8
  5287   003CC0  50DE               	movf	postinc2,w,c
  5288   003CC2  26E1               	addwf	fsr1l,f,c
  5289   003CC4  50DD               	movf	postdec2,w,c
  5290   003CC6  22E2               	addwfc	fsr1h,f,c
  5291   003CC8  50E6               	movf	postinc1,w,c
  5292   003CCA  5C57               	subwf	dir_sdi@idx^0,w,c
  5293   003CCC  50E6               	movf	postinc1,w,c
  5294   003CCE  5858               	subwfb	(dir_sdi@idx+1)^0,w,c
  5295   003CD0  A0D8               	btfss	status,0,c
  5296   003CD2  EF6D  F01E         	goto	u5801
  5297   003CD6  EF6F  F01E         	goto	u5800
  5298   003CDA                     u5801:
  5299   003CDA  EF71  F01E         	goto	l4557
  5300   003CDE                     u5800:
  5301   003CDE  EF1A  F01E         	goto	l4539
  5302   003CE2                     l4557:
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5306   003CE2  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5307   003CE6  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5308   003CEA  EE10 F022          	lfsr	1,34
  5309   003CEE  50DE               	movf	postinc2,w,c
  5310   003CF0  26E1               	addwf	fsr1l,f,c
  5311   003CF2  50DD               	movf	postdec2,w,c
  5312   003CF4  22E2               	addwfc	fsr1h,f,c
  5313   003CF6  CFE6 F062          	movff	postinc1,dir_sdi@sect
  5314   003CFA  CFE6 F063          	movff	postinc1,dir_sdi@sect+1
  5315   003CFE  CFE6 F064          	movff	postinc1,dir_sdi@sect+2
  5316   003D02  CFE6 F065          	movff	postinc1,dir_sdi@sect+3
  5317                           
  5318                           ;ff.c: 1100:  }
  5319   003D06  EF16  F01F         	goto	l4581
  5320   003D0A                     l4559:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5324   003D0A  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5325   003D0E  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5326   003D12  EE10 F002          	lfsr	1,2
  5327   003D16  50DE               	movf	postinc2,w,c
  5328   003D18  26E1               	addwf	fsr1l,f,c
  5329   003D1A  50DD               	movf	postdec2,w,c
  5330   003D1C  22E2               	addwfc	fsr1h,f,c
  5331   003D1E  50E7               	movf	indf1,w,c
  5332   003D20  6E59               	movwf	??_dir_sdi^0,c
  5333   003D22  5059               	movf	??_dir_sdi^0,w,c
  5334   003D24  0D10               	mullw	16
  5335   003D26  CFF3 F060          	movff	prodl,dir_sdi@ic
  5336   003D2A  CFF4 F061          	movff	prodh,dir_sdi@ic+1
  5337                           
  5338                           ;ff.c: 1103:   while (idx >= ic) {
  5339   003D2E  EFF1  F01E         	goto	l410
  5340   003D32                     l4561:
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5344   003D32  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5345   003D36  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5346   003D3A  CFDE F03B          	movff	postinc2,get_fat@fs
  5347   003D3E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5348   003D42  C066  F03D         	movff	dir_sdi@clst,get_fat@clst
  5349   003D46  C067  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5350   003D4A  C068  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5351   003D4E  C069  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5352   003D52  EC1F  F018         	call	_get_fat	;wreg free
  5353   003D56  C03B  F066         	movff	?_get_fat,dir_sdi@clst
  5354   003D5A  C03C  F067         	movff	?_get_fat+1,dir_sdi@clst+1
  5355   003D5E  C03D  F068         	movff	?_get_fat+2,dir_sdi@clst+2
  5356   003D62  C03E  F069         	movff	?_get_fat+3,dir_sdi@clst+3
  5357   003D66                     
  5358                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5359   003D66  0100               	movlb	0	; () banked
  5360   003D68  2966               	incf	dir_sdi@clst& (0+255),w,b
  5361   003D6A  E10A               	bnz	u5811
  5362   003D6C  2967               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5363   003D6E  E108               	bnz	u5811
  5364   003D70  2968               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5365   003D72  E106               	bnz	u5811
  5366   003D74  2969               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5367   003D76  A4D8               	btfss	status,2,c
  5368   003D78  EFC0  F01E         	goto	u5811
  5369   003D7C  EFC2  F01E         	goto	u5810
  5370   003D80                     u5811:
  5371   003D80  EFC5  F01E         	goto	l4569
  5372   003D84                     u5810:
  5373   003D84                     
  5374                           ; BSR set to: 0
  5375   003D84  0E01               	movlw	1
  5376   003D86  EF82  F01F         	goto	l405
  5377   003D8A                     l4569:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5381   003D8A  5169               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5382   003D8C  1168               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5383   003D8E  1167               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5384   003D90  E109               	bnz	u5820
  5385   003D92  0E02               	movlw	2
  5386   003D94  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  5387   003D96  A0D8               	btfss	status,0,c
  5388   003D98  EFD0  F01E         	goto	u5821
  5389   003D9C  EFD2  F01E         	goto	u5820
  5390   003DA0                     u5821:
  5391   003DA0  EF1A  F01E         	goto	l4539
  5392   003DA4                     u5820:
  5393   003DA4                     
  5394                           ; BSR set to: 0
  5395   003DA4  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5396   003DA8  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5397   003DAC  EE10 F012          	lfsr	1,18
  5398   003DB0  50DE               	movf	postinc2,w,c
  5399   003DB2  26E1               	addwf	fsr1l,f,c
  5400   003DB4  50DD               	movf	postdec2,w,c
  5401   003DB6  22E2               	addwfc	fsr1h,f,c
  5402   003DB8  50E6               	movf	postinc1,w,c
  5403   003DBA  5D66               	subwf	dir_sdi@clst& (0+255),w,b
  5404   003DBC  50E6               	movf	postinc1,w,c
  5405   003DBE  5967               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5406   003DC0  50E6               	movf	postinc1,w,c
  5407   003DC2  5968               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5408   003DC4  50E6               	movf	postinc1,w,c
  5409   003DC6  5969               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5410   003DC8  A0D8               	btfss	status,0,c
  5411   003DCA  EFE9  F01E         	goto	u5831
  5412   003DCE  EFEB  F01E         	goto	u5830
  5413   003DD2                     u5831:
  5414   003DD2  EFED  F01E         	goto	l4577
  5415   003DD6                     u5830:
  5416   003DD6  EF1A  F01E         	goto	l4539
  5417   003DDA                     l4577:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;ff.c: 1108:    idx -= ic;
  5421   003DDA  5160               	movf	dir_sdi@ic& (0+255),w,b
  5422   003DDC  5E57               	subwf	dir_sdi@idx^0,f,c
  5423   003DDE  5161               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5424   003DE0  5A58               	subwfb	(dir_sdi@idx+1)^0,f,c
  5425   003DE2                     l410:
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;ff.c: 1103:   while (idx >= ic) {
  5429   003DE2  5160               	movf	dir_sdi@ic& (0+255),w,b
  5430   003DE4  5C57               	subwf	dir_sdi@idx^0,w,c
  5431   003DE6  5161               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5432   003DE8  5858               	subwfb	(dir_sdi@idx+1)^0,w,c
  5433   003DEA  B0D8               	btfsc	status,0,c
  5434   003DEC  EFFA  F01E         	goto	u5841
  5435   003DF0  EFFC  F01E         	goto	u5840
  5436   003DF4                     u5841:
  5437   003DF4  EF99  F01E         	goto	l4561
  5438   003DF8                     u5840:
  5439   003DF8                     
  5440                           ; BSR set to: 0
  5441                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5442   003DF8  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5443   003DFC  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5444   003E00  CFDE F00D          	movff	postinc2,clust2sect@fs
  5445   003E04  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5446   003E08  C066  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5447   003E0C  C067  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5448   003E10  C068  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5449   003E14  C069  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5450   003E18  EC85  F02A         	call	_clust2sect	;wreg free
  5451   003E1C  C00D  F062         	movff	?_clust2sect,dir_sdi@sect
  5452   003E20  C00E  F063         	movff	?_clust2sect+1,dir_sdi@sect+1
  5453   003E24  C00F  F064         	movff	?_clust2sect+2,dir_sdi@sect+2
  5454   003E28  C010  F065         	movff	?_clust2sect+3,dir_sdi@sect+3
  5455   003E2C                     l4581:
  5456                           
  5457                           ;ff.c: 1112:  dp->clust = clst;
  5458   003E2C  EE20 F00A          	lfsr	2,10
  5459   003E30  5055               	movf	dir_sdi@dp^0,w,c
  5460   003E32  26D9               	addwf	fsr2l,f,c
  5461   003E34  5056               	movf	(dir_sdi@dp+1)^0,w,c
  5462   003E36  22DA               	addwfc	fsr2h,f,c
  5463   003E38  C066  FFDE         	movff	dir_sdi@clst,postinc2
  5464   003E3C  C067  FFDE         	movff	dir_sdi@clst+1,postinc2
  5465   003E40  C068  FFDE         	movff	dir_sdi@clst+2,postinc2
  5466   003E44  C069  FFDE         	movff	dir_sdi@clst+3,postinc2
  5467   003E48                     
  5468                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5469   003E48  0100               	movlb	0	; () banked
  5470   003E4A  5162               	movf	dir_sdi@sect& (0+255),w,b
  5471   003E4C  1163               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5472   003E4E  1164               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5473   003E50  1165               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5474   003E52  A4D8               	btfss	status,2,c
  5475   003E54  EF2E  F01F         	goto	u5851
  5476   003E58  EF30  F01F         	goto	u5850
  5477   003E5C                     u5851:
  5478   003E5C  EF32  F01F         	goto	l4589
  5479   003E60                     u5850:
  5480   003E60  EF1A  F01E         	goto	l4539
  5481   003E64                     l4589:
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5485   003E64  C057  F059         	movff	dir_sdi@idx,??_dir_sdi
  5486   003E68  C058  F05A         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5487   003E6C  0E04               	movlw	4
  5488   003E6E  6E5B               	movwf	(??_dir_sdi+2)^0,c
  5489   003E70                     u5865:
  5490   003E70  90D8               	bcf	status,0,c
  5491   003E72  325A               	rrcf	(??_dir_sdi+1)^0,f,c
  5492   003E74  3259               	rrcf	??_dir_sdi^0,f,c
  5493   003E76  2E5B               	decfsz	(??_dir_sdi+2)^0,f,c
  5494   003E78  EF38  F01F         	goto	u5865
  5495   003E7C  5059               	movf	??_dir_sdi^0,w,c
  5496   003E7E  2562               	addwf	dir_sdi@sect& (0+255),w,b
  5497   003E80  6E5C               	movwf	(??_dir_sdi+3)^0,c
  5498   003E82  505A               	movf	(??_dir_sdi+1)^0,w,c
  5499   003E84  2163               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5500   003E86  6E5D               	movwf	(??_dir_sdi+4)^0,c
  5501   003E88  0E00               	movlw	0
  5502   003E8A  2164               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5503   003E8C  6E5E               	movwf	(??_dir_sdi+5)^0,c
  5504   003E8E  0E00               	movlw	0
  5505   003E90  2165               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5506   003E92  6E5F               	movwf	(??_dir_sdi+6)^0,c
  5507   003E94  EE20 F00E          	lfsr	2,14
  5508   003E98  5055               	movf	dir_sdi@dp^0,w,c
  5509   003E9A  26D9               	addwf	fsr2l,f,c
  5510   003E9C  5056               	movf	(dir_sdi@dp+1)^0,w,c
  5511   003E9E  22DA               	addwfc	fsr2h,f,c
  5512   003EA0  C05C  FFDE         	movff	??_dir_sdi+3,postinc2
  5513   003EA4  C05D  FFDE         	movff	??_dir_sdi+4,postinc2
  5514   003EA8  C05E  FFDE         	movff	??_dir_sdi+5,postinc2
  5515   003EAC  C05F  FFDE         	movff	??_dir_sdi+6,postinc2
  5516                           
  5517                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5518   003EB0  0E0F               	movlw	15
  5519   003EB2  1457               	andwf	dir_sdi@idx^0,w,c
  5520   003EB4  6E59               	movwf	??_dir_sdi^0,c
  5521   003EB6  0E00               	movlw	0
  5522   003EB8  1458               	andwf	(dir_sdi@idx+1)^0,w,c
  5523   003EBA  6E5A               	movwf	(??_dir_sdi+1)^0,c
  5524   003EBC  0E05               	movlw	5
  5525   003EBE                     u5875:
  5526   003EBE  90D8               	bcf	status,0,c
  5527   003EC0  3659               	rlcf	??_dir_sdi^0,f,c
  5528   003EC2  365A               	rlcf	(??_dir_sdi+1)^0,f,c
  5529   003EC4  2EE8               	decfsz	wreg,f,c
  5530   003EC6  EF5F  F01F         	goto	u5875
  5531   003ECA  C055  FFD9         	movff	dir_sdi@dp,fsr2l
  5532   003ECE  C056  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5533   003ED2  CFDE F05B          	movff	postinc2,??_dir_sdi+2
  5534   003ED6  CFDD F05C          	movff	postdec2,??_dir_sdi+3
  5535   003EDA  5059               	movf	??_dir_sdi^0,w,c
  5536   003EDC  245B               	addwf	(??_dir_sdi+2)^0,w,c
  5537   003EDE  6E5D               	movwf	(??_dir_sdi+4)^0,c
  5538   003EE0  505A               	movf	(??_dir_sdi+1)^0,w,c
  5539   003EE2  205C               	addwfc	(??_dir_sdi+3)^0,w,c
  5540   003EE4  6E5E               	movwf	(??_dir_sdi+5)^0,c
  5541   003EE6  0E2E               	movlw	46
  5542   003EE8  265D               	addwf	(??_dir_sdi+4)^0,f,c
  5543   003EEA  0E00               	movlw	0
  5544   003EEC  225E               	addwfc	(??_dir_sdi+5)^0,f,c
  5545   003EEE  EE20 F012          	lfsr	2,18
  5546   003EF2  5055               	movf	dir_sdi@dp^0,w,c
  5547   003EF4  26D9               	addwf	fsr2l,f,c
  5548   003EF6  5056               	movf	(dir_sdi@dp+1)^0,w,c
  5549   003EF8  22DA               	addwfc	fsr2h,f,c
  5550   003EFA  C05D  FFDE         	movff	??_dir_sdi+4,postinc2
  5551   003EFE  C05E  FFDD         	movff	??_dir_sdi+5,postdec2
  5552   003F02                     
  5553                           ; BSR set to: 0
  5554                           ;ff.c: 1117:  return FR_OK;
  5555   003F02  0E00               	movlw	0
  5556   003F04                     l405:
  5557                           
  5558                           ; BSR set to: 0
  5559   003F04  0012               	return		;funcret
  5560   003F06                     __end_of_dir_sdi:
  5561                           	callstack 0
  5562                           
  5563 ;; *************** function _dir_next *****************
  5564 ;; Defined at:
  5565 ;;		line 1128 in file "ff.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  dp              2   13[BANK0 ] PTR struct .
  5568 ;;		 -> f_open@dj(22), 
  5569 ;;  stretch         2   15[BANK0 ] int 
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  clst            4   29[BANK0 ] unsigned long 
  5572 ;;  i               2   27[BANK0 ] unsigned short 
  5573 ;;  c               2   25[BANK0 ] unsigned short 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  1    wreg      enum E95
  5576 ;; Registers used:
  5577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5583 ;;      Params:         0       4       0       0       0       0       0       0       0
  5584 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5585 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5586 ;;      Totals:         0      20       0       0       0       0       0       0       0
  5587 ;;Total ram usage:       20 bytes
  5588 ;; Hardware stack levels used: 1
  5589 ;; Hardware stack levels required when called: 10
  5590 ;; This function calls:
  5591 ;;		_clust2sect
  5592 ;;		_create_chain
  5593 ;;		_get_fat
  5594 ;;		_mem_set
  5595 ;;		_sync_window
  5596 ;; This function is called by:
  5597 ;;		_dir_alloc
  5598 ;;		_dir_find
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text14
  5603   002264                     __ptext14:
  5604                           	callstack 0
  5605   002264                     _dir_next:
  5606                           	callstack 17
  5607   002264                     
  5608                           ;ff.c: 1129:  DIR_t* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;
      +                          ;ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5609   002264  0100               	movlb	0	; () banked
  5610   002266  EE20 F004          	lfsr	2,4
  5611   00226A  516D               	movf	dir_next@dp& (0+255),w,b
  5612   00226C  26D9               	addwf	fsr2l,f,c
  5613   00226E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5614   002270  22DA               	addwfc	fsr2h,f,c
  5615   002272  CFDE F071          	movff	postinc2,??_dir_next
  5616   002276  CFDD F072          	movff	postdec2,??_dir_next+1
  5617   00227A  0E01               	movlw	1
  5618   00227C  2571               	addwf	??_dir_next& (0+255),w,b
  5619   00227E  6F7B               	movwf	dir_next@i& (0+255),b
  5620   002280  0E00               	movlw	0
  5621   002282  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5622   002284  6F7C               	movwf	(dir_next@i+1)& (0+255),b
  5623   002286                     
  5624                           ; BSR set to: 0
  5625                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5626   002286  517B               	movf	dir_next@i& (0+255),w,b
  5627   002288  117C               	iorwf	(dir_next@i+1)& (0+255),w,b
  5628   00228A  B4D8               	btfsc	status,2,c
  5629   00228C  EF4A  F011         	goto	u5881
  5630   002290  EF4C  F011         	goto	u5880
  5631   002294                     u5881:
  5632   002294  EF5D  F011         	goto	l4601
  5633   002298                     u5880:
  5634   002298                     
  5635                           ; BSR set to: 0
  5636   002298  EE20 F00E          	lfsr	2,14
  5637   00229C  516D               	movf	dir_next@dp& (0+255),w,b
  5638   00229E  26D9               	addwf	fsr2l,f,c
  5639   0022A0  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5640   0022A2  22DA               	addwfc	fsr2h,f,c
  5641   0022A4  50DE               	movf	postinc2,w,c
  5642   0022A6  10DE               	iorwf	postinc2,w,c
  5643   0022A8  10DE               	iorwf	postinc2,w,c
  5644   0022AA  10DE               	iorwf	postinc2,w,c
  5645   0022AC  A4D8               	btfss	status,2,c
  5646   0022AE  EF5B  F011         	goto	u5891
  5647   0022B2  EF5D  F011         	goto	u5890
  5648   0022B6                     u5891:
  5649   0022B6  EF60  F011         	goto	l4605
  5650   0022BA                     u5890:
  5651   0022BA                     l4601:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;ff.c: 1142:   return FR_NO_FILE;
  5655   0022BA  0E04               	movlw	4
  5656   0022BC  EF97  F013         	goto	l423
  5657   0022C0                     l4605:
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5661   0022C0  0E0F               	movlw	15
  5662   0022C2  157B               	andwf	dir_next@i& (0+255),w,b
  5663   0022C4  6F71               	movwf	??_dir_next& (0+255),b
  5664   0022C6  0E00               	movlw	0
  5665   0022C8  157C               	andwf	(dir_next@i+1)& (0+255),w,b
  5666   0022CA  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5667   0022CC  5171               	movf	??_dir_next& (0+255),w,b
  5668   0022CE  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5669   0022D0  A4D8               	btfss	status,2,c
  5670   0022D2  EF6D  F011         	goto	u5901
  5671   0022D6  EF6F  F011         	goto	u5900
  5672   0022DA                     u5901:
  5673   0022DA  EF63  F013         	goto	l4691
  5674   0022DE                     u5900:
  5675   0022DE                     
  5676                           ; BSR set to: 0
  5677                           ;ff.c: 1145:   dp->sect++;
  5678   0022DE  EE20 F00E          	lfsr	2,14
  5679   0022E2  516D               	movf	dir_next@dp& (0+255),w,b
  5680   0022E4  26D9               	addwf	fsr2l,f,c
  5681   0022E6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5682   0022E8  22DA               	addwfc	fsr2h,f,c
  5683   0022EA  2ADE               	incf	postinc2,f,c
  5684   0022EC  0E00               	movlw	0
  5685   0022EE  22DE               	addwfc	postinc2,f,c
  5686   0022F0  22DE               	addwfc	postinc2,f,c
  5687   0022F2  22DE               	addwfc	postinc2,f,c
  5688                           
  5689                           ;ff.c: 1147:   if (!dp->clust) {
  5690   0022F4  EE20 F00A          	lfsr	2,10
  5691   0022F8  516D               	movf	dir_next@dp& (0+255),w,b
  5692   0022FA  26D9               	addwf	fsr2l,f,c
  5693   0022FC  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5694   0022FE  22DA               	addwfc	fsr2h,f,c
  5695   002300  50DE               	movf	postinc2,w,c
  5696   002302  10DE               	iorwf	postinc2,w,c
  5697   002304  10DE               	iorwf	postinc2,w,c
  5698   002306  10DE               	iorwf	postinc2,w,c
  5699   002308  A4D8               	btfss	status,2,c
  5700   00230A  EF89  F011         	goto	u5911
  5701   00230E  EF8B  F011         	goto	u5910
  5702   002312                     u5911:
  5703   002312  EFA2  F011         	goto	l4615
  5704   002316                     u5910:
  5705   002316                     
  5706                           ; BSR set to: 0
  5707                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5708   002316  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5709   00231A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5710   00231E  EE10 F008          	lfsr	1,8
  5711   002322  50DE               	movf	postinc2,w,c
  5712   002324  26E1               	addwf	fsr1l,f,c
  5713   002326  50DD               	movf	postdec2,w,c
  5714   002328  22E2               	addwfc	fsr1h,f,c
  5715   00232A  50E6               	movf	postinc1,w,c
  5716   00232C  5D7B               	subwf	dir_next@i& (0+255),w,b
  5717   00232E  50E6               	movf	postinc1,w,c
  5718   002330  597C               	subwfb	(dir_next@i+1)& (0+255),w,b
  5719   002332  A0D8               	btfss	status,0,c
  5720   002334  EF9E  F011         	goto	u5921
  5721   002338  EFA0  F011         	goto	u5920
  5722   00233C                     u5921:
  5723   00233C  EF63  F013         	goto	l4691
  5724   002340                     u5920:
  5725   002340  EF5D  F011         	goto	l4601
  5726   002344                     l4615:
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5730   002344  C07B  F071         	movff	dir_next@i,??_dir_next
  5731   002348  C07C  F072         	movff	dir_next@i+1,??_dir_next+1
  5732   00234C  0E04               	movlw	4
  5733   00234E  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5734   002350                     u5935:
  5735   002350  90D8               	bcf	status,0,c
  5736   002352  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5737   002354  3371               	rrcf	??_dir_next& (0+255),f,b
  5738   002356  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5739   002358  EFA8  F011         	goto	u5935
  5740   00235C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5741   002360  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5742   002364  EE10 F002          	lfsr	1,2
  5743   002368  50DE               	movf	postinc2,w,c
  5744   00236A  26E1               	addwf	fsr1l,f,c
  5745   00236C  50DD               	movf	postdec2,w,c
  5746   00236E  22E2               	addwfc	fsr1h,f,c
  5747   002370  50E7               	movf	indf1,w,c
  5748   002372  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5749   002374  0EFF               	movlw	255
  5750   002376  2574               	addwf	(??_dir_next+3)& (0+255),w,b
  5751   002378  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5752   00237A  6B76               	clrf	(??_dir_next+5)& (0+255),b
  5753   00237C  0EFF               	movlw	255
  5754   00237E  2376               	addwfc	(??_dir_next+5)& (0+255),f,b
  5755   002380  5171               	movf	??_dir_next& (0+255),w,b
  5756   002382  1575               	andwf	(??_dir_next+4)& (0+255),w,b
  5757   002384  6F77               	movwf	(??_dir_next+6)& (0+255),b
  5758   002386  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5759   002388  1576               	andwf	(??_dir_next+5)& (0+255),w,b
  5760   00238A  6F78               	movwf	(??_dir_next+7)& (0+255),b
  5761   00238C  5177               	movf	(??_dir_next+6)& (0+255),w,b
  5762   00238E  1178               	iorwf	(??_dir_next+7)& (0+255),w,b
  5763   002390  A4D8               	btfss	status,2,c
  5764   002392  EFCD  F011         	goto	u5941
  5765   002396  EFCF  F011         	goto	u5940
  5766   00239A                     u5941:
  5767   00239A  EF63  F013         	goto	l4691
  5768   00239E                     u5940:
  5769   00239E                     
  5770                           ; BSR set to: 0
  5771                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5772   00239E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5773   0023A2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5774   0023A6  CFDE F03B          	movff	postinc2,get_fat@fs
  5775   0023AA  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5776   0023AE  EE20 F00A          	lfsr	2,10
  5777   0023B2  516D               	movf	dir_next@dp& (0+255),w,b
  5778   0023B4  26D9               	addwf	fsr2l,f,c
  5779   0023B6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5780   0023B8  22DA               	addwfc	fsr2h,f,c
  5781   0023BA  CFDE F03D          	movff	postinc2,get_fat@clst
  5782   0023BE  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5783   0023C2  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5784   0023C6  CFDE F040          	movff	postinc2,get_fat@clst+3
  5785   0023CA  EC1F  F018         	call	_get_fat	;wreg free
  5786   0023CE  C03B  F07D         	movff	?_get_fat,dir_next@clst
  5787   0023D2  C03C  F07E         	movff	?_get_fat+1,dir_next@clst+1
  5788   0023D6  C03D  F07F         	movff	?_get_fat+2,dir_next@clst+2
  5789   0023DA  C03E  F080         	movff	?_get_fat+3,dir_next@clst+3
  5790   0023DE                     
  5791                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5792   0023DE  0100               	movlb	0	; () banked
  5793   0023E0  5180               	movf	(dir_next@clst+3)& (0+255),w,b
  5794   0023E2  117F               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5795   0023E4  117E               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5796   0023E6  E107               	bnz	u5951
  5797   0023E8  0E02               	movlw	2
  5798   0023EA  5D7D               	subwf	dir_next@clst& (0+255),w,b
  5799   0023EC  B0D8               	btfsc	status,0,c
  5800   0023EE  EFFB  F011         	goto	u5951
  5801   0023F2  EFFD  F011         	goto	u5950
  5802   0023F6                     u5951:
  5803   0023F6  EF00  F012         	goto	l4625
  5804   0023FA                     u5950:
  5805   0023FA                     l4621:
  5806                           
  5807                           ; BSR set to: 0
  5808   0023FA  0E02               	movlw	2
  5809   0023FC  EF97  F013         	goto	l423
  5810   002400                     l4625:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5814   002400  297D               	incf	dir_next@clst& (0+255),w,b
  5815   002402  E10A               	bnz	u5961
  5816   002404  297E               	incf	(dir_next@clst+1)& (0+255),w,b
  5817   002406  E108               	bnz	u5961
  5818   002408  297F               	incf	(dir_next@clst+2)& (0+255),w,b
  5819   00240A  E106               	bnz	u5961
  5820   00240C  2980               	incf	(dir_next@clst+3)& (0+255),w,b
  5821   00240E  A4D8               	btfss	status,2,c
  5822   002410  EF0C  F012         	goto	u5961
  5823   002414  EF0E  F012         	goto	u5960
  5824   002418                     u5961:
  5825   002418  EF11  F012         	goto	l4631
  5826   00241C                     u5960:
  5827   00241C                     l4627:
  5828   00241C  0E01               	movlw	1
  5829   00241E  EF97  F013         	goto	l423
  5830   002422                     l4631:
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5834   002422  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5835   002426  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5836   00242A  EE10 F012          	lfsr	1,18
  5837   00242E  50DE               	movf	postinc2,w,c
  5838   002430  26E1               	addwf	fsr1l,f,c
  5839   002432  50DD               	movf	postdec2,w,c
  5840   002434  22E2               	addwfc	fsr1h,f,c
  5841   002436  50E6               	movf	postinc1,w,c
  5842   002438  5D7D               	subwf	dir_next@clst& (0+255),w,b
  5843   00243A  50E6               	movf	postinc1,w,c
  5844   00243C  597E               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5845   00243E  50E6               	movf	postinc1,w,c
  5846   002440  597F               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5847   002442  50E6               	movf	postinc1,w,c
  5848   002444  5980               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5849   002446  A0D8               	btfss	status,0,c
  5850   002448  EF28  F012         	goto	u5971
  5851   00244C  EF2A  F012         	goto	u5970
  5852   002450                     u5971:
  5853   002450  EF34  F013         	goto	l4687
  5854   002454                     u5970:
  5855   002454                     
  5856                           ; BSR set to: 0
  5857                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5858   002454  516F               	movf	dir_next@stretch& (0+255),w,b
  5859   002456  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5860   002458  A4D8               	btfss	status,2,c
  5861   00245A  EF31  F012         	goto	u5981
  5862   00245E  EF33  F012         	goto	u5980
  5863   002462                     u5981:
  5864   002462  EF35  F012         	goto	l4639
  5865   002466                     u5980:
  5866   002466  EF5D  F011         	goto	l4601
  5867   00246A                     l4639:
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5871   00246A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5872   00246E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5873   002472  CFDE F056          	movff	postinc2,create_chain@fs
  5874   002476  CFDD F057          	movff	postdec2,create_chain@fs+1
  5875   00247A  EE20 F00A          	lfsr	2,10
  5876   00247E  516D               	movf	dir_next@dp& (0+255),w,b
  5877   002480  26D9               	addwf	fsr2l,f,c
  5878   002482  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5879   002484  22DA               	addwfc	fsr2h,f,c
  5880   002486  CFDE F058          	movff	postinc2,create_chain@clst
  5881   00248A  CFDE F059          	movff	postinc2,create_chain@clst+1
  5882   00248E  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5883   002492  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5884   002496  ECFE  F01B         	call	_create_chain	;wreg free
  5885   00249A  C056  F07D         	movff	?_create_chain,dir_next@clst
  5886   00249E  C057  F07E         	movff	?_create_chain+1,dir_next@clst+1
  5887   0024A2  C058  F07F         	movff	?_create_chain+2,dir_next@clst+2
  5888   0024A6  C059  F080         	movff	?_create_chain+3,dir_next@clst+3
  5889   0024AA                     
  5890                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5891   0024AA  0100               	movlb	0	; () banked
  5892   0024AC  517D               	movf	dir_next@clst& (0+255),w,b
  5893   0024AE  117E               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5894   0024B0  117F               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5895   0024B2  1180               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5896   0024B4  A4D8               	btfss	status,2,c
  5897   0024B6  EF5F  F012         	goto	u5991
  5898   0024BA  EF61  F012         	goto	u5990
  5899   0024BE                     u5991:
  5900   0024BE  EF64  F012         	goto	l4647
  5901   0024C2                     u5990:
  5902   0024C2                     
  5903                           ; BSR set to: 0
  5904   0024C2  0E07               	movlw	7
  5905   0024C4  EF97  F013         	goto	l423
  5906   0024C8                     l4647:
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5910   0024C8  057D               	decf	dir_next@clst& (0+255),w,b
  5911   0024CA  117E               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5912   0024CC  117F               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5913   0024CE  1180               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5914   0024D0  A4D8               	btfss	status,2,c
  5915   0024D2  EF6D  F012         	goto	u6001
  5916   0024D6  EF6F  F012         	goto	u6000
  5917   0024DA                     u6001:
  5918   0024DA  EF71  F012         	goto	l4653
  5919   0024DE                     u6000:
  5920   0024DE  EFFD  F011         	goto	l4621
  5921   0024E2                     l4653:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5925   0024E2  297D               	incf	dir_next@clst& (0+255),w,b
  5926   0024E4  E10A               	bnz	u6011
  5927   0024E6  297E               	incf	(dir_next@clst+1)& (0+255),w,b
  5928   0024E8  E108               	bnz	u6011
  5929   0024EA  297F               	incf	(dir_next@clst+2)& (0+255),w,b
  5930   0024EC  E106               	bnz	u6011
  5931   0024EE  2980               	incf	(dir_next@clst+3)& (0+255),w,b
  5932   0024F0  A4D8               	btfss	status,2,c
  5933   0024F2  EF7D  F012         	goto	u6011
  5934   0024F6  EF7F  F012         	goto	u6010
  5935   0024FA                     u6011:
  5936   0024FA  EF81  F012         	goto	l4659
  5937   0024FE                     u6010:
  5938   0024FE  EF0E  F012         	goto	l4627
  5939   002502                     l4659:
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5943   002502  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5944   002506  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5945   00250A  CFDE F01B          	movff	postinc2,sync_window@fs
  5946   00250E  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5947   002512  EC65  F024         	call	_sync_window	;wreg free
  5948   002516  0900               	iorlw	0
  5949   002518  B4D8               	btfsc	status,2,c
  5950   00251A  EF91  F012         	goto	u6021
  5951   00251E  EF93  F012         	goto	u6020
  5952   002522                     u6021:
  5953   002522  EF95  F012         	goto	l4665
  5954   002526                     u6020:
  5955   002526  EF0E  F012         	goto	l4627
  5956   00252A                     l4665:
  5957                           
  5958                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5959   00252A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5960   00252E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5961   002532  CFDE F071          	movff	postinc2,??_dir_next
  5962   002536  CFDD F072          	movff	postdec2,??_dir_next+1
  5963   00253A  0E2E               	movlw	46
  5964   00253C  0100               	movlb	0	; () banked
  5965   00253E  2571               	addwf	??_dir_next& (0+255),w,b
  5966   002540  6E01               	movwf	mem_set@dst^0,c
  5967   002542  0E00               	movlw	0
  5968   002544  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5969   002546  6E02               	movwf	(mem_set@dst+1)^0,c
  5970   002548  0E00               	movlw	0
  5971   00254A  6E04               	movwf	(mem_set@val+1)^0,c
  5972   00254C  0E00               	movlw	0
  5973   00254E  6E03               	movwf	mem_set@val^0,c
  5974   002550  0E02               	movlw	2
  5975   002552  6E06               	movwf	(mem_set@cnt+1)^0,c
  5976   002554  0E00               	movlw	0
  5977   002556  6E05               	movwf	mem_set@cnt^0,c
  5978   002558  EC6D  F02E         	call	_mem_set	;wreg free
  5979   00255C                     
  5980                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5981   00255C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5982   002560  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5983   002564  CFDE F00D          	movff	postinc2,clust2sect@fs
  5984   002568  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5985   00256C  C07D  F00F         	movff	dir_next@clst,clust2sect@clst
  5986   002570  C07E  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5987   002574  C07F  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5988   002578  C080  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5989   00257C  EC85  F02A         	call	_clust2sect	;wreg free
  5990   002580  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5991   002584  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5992   002588  EE10 F02A          	lfsr	1,42
  5993   00258C  50DE               	movf	postinc2,w,c
  5994   00258E  26E1               	addwf	fsr1l,f,c
  5995   002590  50DD               	movf	postdec2,w,c
  5996   002592  22E2               	addwfc	fsr1h,f,c
  5997   002594  C00D  FFE6         	movff	?_clust2sect,postinc1
  5998   002598  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5999   00259C  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  6000   0025A0  C010  FFE6         	movff	?_clust2sect+3,postinc1
  6001   0025A4                     
  6002                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  6003   0025A4  0E00               	movlw	0
  6004   0025A6  0100               	movlb	0	; () banked
  6005   0025A8  6F7A               	movwf	(dir_next@c+1)& (0+255),b
  6006   0025AA  0E00               	movlw	0
  6007   0025AC  6F79               	movwf	dir_next@c& (0+255),b
  6008   0025AE  EF0B  F013         	goto	l4683
  6009   0025B2                     l4671:
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;ff.c: 1168:       dp->fs->wflag = 1;
  6013   0025B2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6014   0025B6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6015   0025BA  EE10 F004          	lfsr	1,4
  6016   0025BE  50DE               	movf	postinc2,w,c
  6017   0025C0  26E1               	addwf	fsr1l,f,c
  6018   0025C2  50DD               	movf	postdec2,w,c
  6019   0025C4  22E2               	addwfc	fsr1h,f,c
  6020   0025C6  0E01               	movlw	1
  6021   0025C8  6EE7               	movwf	indf1,c
  6022   0025CA                     
  6023                           ; BSR set to: 0
  6024                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  6025   0025CA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6026   0025CE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6027   0025D2  CFDE F01B          	movff	postinc2,sync_window@fs
  6028   0025D6  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6029   0025DA  EC65  F024         	call	_sync_window	;wreg free
  6030   0025DE  0900               	iorlw	0
  6031   0025E0  B4D8               	btfsc	status,2,c
  6032   0025E2  EFF5  F012         	goto	u6031
  6033   0025E6  EFF7  F012         	goto	u6030
  6034   0025EA                     u6031:
  6035   0025EA  EFF9  F012         	goto	l4679
  6036   0025EE                     u6030:
  6037   0025EE  EF0E  F012         	goto	l4627
  6038   0025F2                     l4679:
  6039                           
  6040                           ;ff.c: 1170:       dp->fs->winsect++;
  6041   0025F2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6042   0025F6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6043   0025FA  EE10 F02A          	lfsr	1,42
  6044   0025FE  50DE               	movf	postinc2,w,c
  6045   002600  26E1               	addwf	fsr1l,f,c
  6046   002602  50DD               	movf	postdec2,w,c
  6047   002604  22E2               	addwfc	fsr1h,f,c
  6048   002606  2AE6               	incf	postinc1,f,c
  6049   002608  0E00               	movlw	0
  6050   00260A  22E6               	addwfc	postinc1,f,c
  6051   00260C  22E6               	addwfc	postinc1,f,c
  6052   00260E  22E6               	addwfc	postinc1,f,c
  6053   002610                     
  6054                           ;ff.c: 1171:      }
  6055   002610  0100               	movlb	0	; () banked
  6056   002612  4B79               	infsnz	dir_next@c& (0+255),f,b
  6057   002614  2B7A               	incf	(dir_next@c+1)& (0+255),f,b
  6058   002616                     l4683:
  6059                           
  6060                           ; BSR set to: 0
  6061   002616  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6062   00261A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6063   00261E  EE10 F002          	lfsr	1,2
  6064   002622  50DE               	movf	postinc2,w,c
  6065   002624  26E1               	addwf	fsr1l,f,c
  6066   002626  50DD               	movf	postdec2,w,c
  6067   002628  22E2               	addwfc	fsr1h,f,c
  6068   00262A  50E7               	movf	indf1,w,c
  6069   00262C  6F71               	movwf	??_dir_next& (0+255),b
  6070   00262E  6B72               	clrf	(??_dir_next+1)& (0+255),b
  6071   002630  5171               	movf	??_dir_next& (0+255),w,b
  6072   002632  5D79               	subwf	dir_next@c& (0+255),w,b
  6073   002634  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6074   002636  597A               	subwfb	(dir_next@c+1)& (0+255),w,b
  6075   002638  A0D8               	btfss	status,0,c
  6076   00263A  EF21  F013         	goto	u6041
  6077   00263E  EF23  F013         	goto	u6040
  6078   002642                     u6041:
  6079   002642  EFD9  F012         	goto	l4671
  6080   002646                     u6040:
  6081   002646                     
  6082                           ; BSR set to: 0
  6083                           ;ff.c: 1172:      dp->fs->winsect -= c;
  6084   002646  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6085   00264A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6086   00264E  EE10 F02A          	lfsr	1,42
  6087   002652  50DE               	movf	postinc2,w,c
  6088   002654  26E1               	addwf	fsr1l,f,c
  6089   002656  50DD               	movf	postdec2,w,c
  6090   002658  22E2               	addwfc	fsr1h,f,c
  6091   00265A  5179               	movf	dir_next@c& (0+255),w,b
  6092   00265C  5EE6               	subwf	postinc1,f,c
  6093   00265E  517A               	movf	(dir_next@c+1)& (0+255),w,b
  6094   002660  5AE6               	subwfb	postinc1,f,c
  6095   002662  0E00               	movlw	0
  6096   002664  5AE6               	subwfb	postinc1,f,c
  6097   002666  5AE6               	subwfb	postinc1,f,c
  6098   002668                     l4687:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;ff.c: 1178:     dp->clust = clst;
  6102   002668  EE20 F00A          	lfsr	2,10
  6103   00266C  516D               	movf	dir_next@dp& (0+255),w,b
  6104   00266E  26D9               	addwf	fsr2l,f,c
  6105   002670  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6106   002672  22DA               	addwfc	fsr2h,f,c
  6107   002674  C07D  FFDE         	movff	dir_next@clst,postinc2
  6108   002678  C07E  FFDE         	movff	dir_next@clst+1,postinc2
  6109   00267C  C07F  FFDE         	movff	dir_next@clst+2,postinc2
  6110   002680  C080  FFDE         	movff	dir_next@clst+3,postinc2
  6111   002684                     
  6112                           ; BSR set to: 0
  6113                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  6114   002684  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6115   002688  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6116   00268C  CFDE F00D          	movff	postinc2,clust2sect@fs
  6117   002690  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6118   002694  C07D  F00F         	movff	dir_next@clst,clust2sect@clst
  6119   002698  C07E  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6120   00269C  C07F  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6121   0026A0  C080  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6122   0026A4  EC85  F02A         	call	_clust2sect	;wreg free
  6123   0026A8  0100               	movlb	0	; () banked
  6124   0026AA  EE20 F00E          	lfsr	2,14
  6125   0026AE  516D               	movf	dir_next@dp& (0+255),w,b
  6126   0026B0  26D9               	addwf	fsr2l,f,c
  6127   0026B2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6128   0026B4  22DA               	addwfc	fsr2h,f,c
  6129   0026B6  C00D  FFDE         	movff	?_clust2sect,postinc2
  6130   0026BA  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  6131   0026BE  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  6132   0026C2  C010  FFDE         	movff	?_clust2sect+3,postinc2
  6133   0026C6                     l4691:
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;ff.c: 1184:  dp->index = (WORD)i;
  6137   0026C6  EE20 F004          	lfsr	2,4
  6138   0026CA  516D               	movf	dir_next@dp& (0+255),w,b
  6139   0026CC  26D9               	addwf	fsr2l,f,c
  6140   0026CE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6141   0026D0  22DA               	addwfc	fsr2h,f,c
  6142   0026D2  C07B  FFDE         	movff	dir_next@i,postinc2
  6143   0026D6  C07C  FFDD         	movff	dir_next@i+1,postdec2
  6144   0026DA                     
  6145                           ; BSR set to: 0
  6146                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  6147   0026DA  0E0F               	movlw	15
  6148   0026DC  157B               	andwf	dir_next@i& (0+255),w,b
  6149   0026DE  6F71               	movwf	??_dir_next& (0+255),b
  6150   0026E0  0E00               	movlw	0
  6151   0026E2  157C               	andwf	(dir_next@i+1)& (0+255),w,b
  6152   0026E4  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6153   0026E6  0E05               	movlw	5
  6154   0026E8                     u6055:
  6155   0026E8  90D8               	bcf	status,0,c
  6156   0026EA  3771               	rlcf	??_dir_next& (0+255),f,b
  6157   0026EC  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  6158   0026EE  2EE8               	decfsz	wreg,f,c
  6159   0026F0  EF74  F013         	goto	u6055
  6160   0026F4  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6161   0026F8  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6162   0026FC  CFDE F073          	movff	postinc2,??_dir_next+2
  6163   002700  CFDD F074          	movff	postdec2,??_dir_next+3
  6164   002704  5171               	movf	??_dir_next& (0+255),w,b
  6165   002706  2573               	addwf	(??_dir_next+2)& (0+255),w,b
  6166   002708  6F75               	movwf	(??_dir_next+4)& (0+255),b
  6167   00270A  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6168   00270C  2174               	addwfc	(??_dir_next+3)& (0+255),w,b
  6169   00270E  6F76               	movwf	(??_dir_next+5)& (0+255),b
  6170   002710  0E2E               	movlw	46
  6171   002712  2775               	addwf	(??_dir_next+4)& (0+255),f,b
  6172   002714  0E00               	movlw	0
  6173   002716  2376               	addwfc	(??_dir_next+5)& (0+255),f,b
  6174   002718  EE20 F012          	lfsr	2,18
  6175   00271C  516D               	movf	dir_next@dp& (0+255),w,b
  6176   00271E  26D9               	addwf	fsr2l,f,c
  6177   002720  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6178   002722  22DA               	addwfc	fsr2h,f,c
  6179   002724  C075  FFDE         	movff	??_dir_next+4,postinc2
  6180   002728  C076  FFDD         	movff	??_dir_next+5,postdec2
  6181   00272C                     
  6182                           ; BSR set to: 0
  6183                           ;ff.c: 1187:  return FR_OK;
  6184   00272C  0E00               	movlw	0
  6185   00272E                     l423:
  6186   00272E  0012               	return		;funcret
  6187   002730                     __end_of_dir_next:
  6188                           	callstack 0
  6189                           
  6190 ;; *************** function _create_chain *****************
  6191 ;; Defined at:
  6192 ;;		line 990 in file "ff.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;  fs              2   85[COMRAM] PTR struct .
  6195 ;;		 -> NULL(0), FatFs(558), 
  6196 ;;  clst            4   87[COMRAM] unsigned long 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  cs              4    9[BANK0 ] unsigned long 
  6199 ;;  ncl             4    5[BANK0 ] unsigned long 
  6200 ;;  scl             4    1[BANK0 ] unsigned long 
  6201 ;;  res             1    0[BANK0 ] enum E95
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  4   85[COMRAM] unsigned long 
  6204 ;; Registers used:
  6205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6211 ;;      Params:         6       0       0       0       0       0       0       0       0
  6212 ;;      Locals:         0      13       0       0       0       0       0       0       0
  6213 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6214 ;;      Totals:        10      13       0       0       0       0       0       0       0
  6215 ;;Total ram usage:       23 bytes
  6216 ;; Hardware stack levels used: 1
  6217 ;; Hardware stack levels required when called: 9
  6218 ;; This function calls:
  6219 ;;		_get_fat
  6220 ;;		_put_fat
  6221 ;; This function is called by:
  6222 ;;		_dir_next
  6223 ;;		_f_write
  6224 ;;		_f_lseek
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text15
  6229   0037FC                     __ptext15:
  6230                           	callstack 0
  6231   0037FC                     _create_chain:
  6232                           	callstack 20
  6233   0037FC                     
  6234                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  6235   0037FC  5058               	movf	create_chain@clst^0,w,c
  6236   0037FE  1059               	iorwf	(create_chain@clst+1)^0,w,c
  6237   003800  105A               	iorwf	(create_chain@clst+2)^0,w,c
  6238   003802  105B               	iorwf	(create_chain@clst+3)^0,w,c
  6239   003804  A4D8               	btfss	status,2,c
  6240   003806  EF07  F01C         	goto	u5221
  6241   00380A  EF09  F01C         	goto	u5220
  6242   00380E                     u5221:
  6243   00380E  EF42  F01C         	goto	l4285
  6244   003812                     u5220:
  6245   003812                     
  6246                           ;ff.c: 1000:   scl = fs->last_clust;
  6247   003812  EE20 F00A          	lfsr	2,10
  6248   003816  5056               	movf	create_chain@fs^0,w,c
  6249   003818  26D9               	addwf	fsr2l,f,c
  6250   00381A  5057               	movf	(create_chain@fs+1)^0,w,c
  6251   00381C  22DA               	addwfc	fsr2h,f,c
  6252   00381E  CFDE F061          	movff	postinc2,create_chain@scl
  6253   003822  CFDE F062          	movff	postinc2,create_chain@scl+1
  6254   003826  CFDE F063          	movff	postinc2,create_chain@scl+2
  6255   00382A  CFDE F064          	movff	postinc2,create_chain@scl+3
  6256   00382E                     
  6257                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  6258   00382E  0100               	movlb	0	; () banked
  6259   003830  5161               	movf	create_chain@scl& (0+255),w,b
  6260   003832  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  6261   003834  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  6262   003836  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  6263   003838  B4D8               	btfsc	status,2,c
  6264   00383A  EF21  F01C         	goto	u5231
  6265   00383E  EF23  F01C         	goto	u5230
  6266   003842                     u5231:
  6267   003842  EF38  F01C         	goto	l4283
  6268   003846                     u5230:
  6269   003846                     
  6270                           ; BSR set to: 0
  6271   003846  EE20 F012          	lfsr	2,18
  6272   00384A  5056               	movf	create_chain@fs^0,w,c
  6273   00384C  26D9               	addwf	fsr2l,f,c
  6274   00384E  5057               	movf	(create_chain@fs+1)^0,w,c
  6275   003850  22DA               	addwfc	fsr2h,f,c
  6276   003852  50DE               	movf	postinc2,w,c
  6277   003854  5D61               	subwf	create_chain@scl& (0+255),w,b
  6278   003856  50DE               	movf	postinc2,w,c
  6279   003858  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  6280   00385A  50DE               	movf	postinc2,w,c
  6281   00385C  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  6282   00385E  50DE               	movf	postinc2,w,c
  6283   003860  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  6284   003862  A0D8               	btfss	status,0,c
  6285   003864  EF36  F01C         	goto	u5241
  6286   003868  EF38  F01C         	goto	u5240
  6287   00386C                     u5241:
  6288   00386C  EFA7  F01C         	goto	l378
  6289   003870                     u5240:
  6290   003870                     l4283:
  6291                           
  6292                           ; BSR set to: 0
  6293   003870  0E01               	movlw	1
  6294   003872  6F61               	movwf	create_chain@scl& (0+255),b
  6295   003874  0E00               	movlw	0
  6296   003876  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  6297   003878  0E00               	movlw	0
  6298   00387A  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  6299   00387C  0E00               	movlw	0
  6300   00387E  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  6301   003880  EFA7  F01C         	goto	l378
  6302   003884                     l4285:
  6303                           
  6304                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  6305   003884  C056  F03B         	movff	create_chain@fs,get_fat@fs
  6306   003888  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  6307   00388C  C058  F03D         	movff	create_chain@clst,get_fat@clst
  6308   003890  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  6309   003894  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  6310   003898  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  6311   00389C  EC1F  F018         	call	_get_fat	;wreg free
  6312   0038A0  C03B  F069         	movff	?_get_fat,create_chain@cs
  6313   0038A4  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  6314   0038A8  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  6315   0038AC  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  6316   0038B0                     
  6317                           ;ff.c: 1005:   if (cs < 2) return 1;
  6318   0038B0  0100               	movlb	0	; () banked
  6319   0038B2  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  6320   0038B4  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  6321   0038B6  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  6322   0038B8  E107               	bnz	u5251
  6323   0038BA  0E02               	movlw	2
  6324   0038BC  5D69               	subwf	create_chain@cs& (0+255),w,b
  6325   0038BE  B0D8               	btfsc	status,0,c
  6326   0038C0  EF64  F01C         	goto	u5251
  6327   0038C4  EF66  F01C         	goto	u5250
  6328   0038C8                     u5251:
  6329   0038C8  EF70  F01C         	goto	l4293
  6330   0038CC                     u5250:
  6331   0038CC                     
  6332                           ; BSR set to: 0
  6333   0038CC  0E01               	movlw	1
  6334   0038CE  6E56               	movwf	?_create_chain^0,c
  6335   0038D0  0E00               	movlw	0
  6336   0038D2  6E57               	movwf	(?_create_chain+1)^0,c
  6337   0038D4  0E00               	movlw	0
  6338   0038D6  6E58               	movwf	(?_create_chain+2)^0,c
  6339   0038D8  0E00               	movlw	0
  6340   0038DA  6E59               	movwf	(?_create_chain+3)^0,c
  6341   0038DC  EFDC  F01D         	goto	l380
  6342   0038E0                     l4293:
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  6346   0038E0  2969               	incf	create_chain@cs& (0+255),w,b
  6347   0038E2  E10A               	bnz	u5261
  6348   0038E4  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  6349   0038E6  E108               	bnz	u5261
  6350   0038E8  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  6351   0038EA  E106               	bnz	u5261
  6352   0038EC  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  6353   0038EE  A4D8               	btfss	status,2,c
  6354   0038F0  EF7C  F01C         	goto	u5261
  6355   0038F4  EF7E  F01C         	goto	u5260
  6356   0038F8                     u5261:
  6357   0038F8  EF88  F01C         	goto	l4297
  6358   0038FC                     u5260:
  6359   0038FC                     l4295:
  6360                           
  6361                           ; BSR set to: 0
  6362   0038FC  C069  F056         	movff	create_chain@cs,?_create_chain
  6363   003900  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  6364   003904  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  6365   003908  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  6366   00390C  EFDC  F01D         	goto	l380
  6367   003910                     l4297:
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  6371   003910  EE20 F012          	lfsr	2,18
  6372   003914  5056               	movf	create_chain@fs^0,w,c
  6373   003916  26D9               	addwf	fsr2l,f,c
  6374   003918  5057               	movf	(create_chain@fs+1)^0,w,c
  6375   00391A  22DA               	addwfc	fsr2h,f,c
  6376   00391C  50DE               	movf	postinc2,w,c
  6377   00391E  5D69               	subwf	create_chain@cs& (0+255),w,b
  6378   003920  50DE               	movf	postinc2,w,c
  6379   003922  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  6380   003924  50DE               	movf	postinc2,w,c
  6381   003926  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  6382   003928  50DE               	movf	postinc2,w,c
  6383   00392A  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  6384   00392C  B0D8               	btfsc	status,0,c
  6385   00392E  EF9B  F01C         	goto	u5271
  6386   003932  EF9D  F01C         	goto	u5270
  6387   003936                     u5271:
  6388   003936  EF9F  F01C         	goto	l382
  6389   00393A                     u5270:
  6390   00393A  EF7E  F01C         	goto	l4295
  6391   00393E                     l382:
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;ff.c: 1008:   scl = clst;
  6395   00393E  C058  F061         	movff	create_chain@clst,create_chain@scl
  6396   003942  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  6397   003946  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  6398   00394A  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  6399   00394E                     l378:
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;ff.c: 1011:  ncl = scl;
  6403   00394E  C061  F065         	movff	create_chain@scl,create_chain@ncl
  6404   003952  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  6405   003956  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  6406   00395A  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  6407   00395E                     l4301:
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;ff.c: 1013:   ncl++;
  6411   00395E  0E01               	movlw	1
  6412   003960  2765               	addwf	create_chain@ncl& (0+255),f,b
  6413   003962  0E00               	movlw	0
  6414   003964  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  6415   003966  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  6416   003968  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  6417   00396A                     
  6418                           ; BSR set to: 0
  6419                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  6420   00396A  EE20 F012          	lfsr	2,18
  6421   00396E  5056               	movf	create_chain@fs^0,w,c
  6422   003970  26D9               	addwf	fsr2l,f,c
  6423   003972  5057               	movf	(create_chain@fs+1)^0,w,c
  6424   003974  22DA               	addwfc	fsr2h,f,c
  6425   003976  50DE               	movf	postinc2,w,c
  6426   003978  5D65               	subwf	create_chain@ncl& (0+255),w,b
  6427   00397A  50DE               	movf	postinc2,w,c
  6428   00397C  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  6429   00397E  50DE               	movf	postinc2,w,c
  6430   003980  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  6431   003982  50DE               	movf	postinc2,w,c
  6432   003984  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  6433   003986  A0D8               	btfss	status,0,c
  6434   003988  EFC8  F01C         	goto	u5281
  6435   00398C  EFCA  F01C         	goto	u5280
  6436   003990                     u5281:
  6437   003990  EFE9  F01C         	goto	l4313
  6438   003994                     u5280:
  6439   003994                     
  6440                           ; BSR set to: 0
  6441                           ;ff.c: 1015:    ncl = 2;
  6442   003994  0E02               	movlw	2
  6443   003996  6F65               	movwf	create_chain@ncl& (0+255),b
  6444   003998  0E00               	movlw	0
  6445   00399A  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  6446   00399C  0E00               	movlw	0
  6447   00399E  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  6448   0039A0  0E00               	movlw	0
  6449   0039A2  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  6450   0039A4                     
  6451                           ; BSR set to: 0
  6452                           ;ff.c: 1016:    if (ncl > scl) return 0;
  6453   0039A4  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  6454   0039A6  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  6455   0039A8  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  6456   0039AA  E107               	bnz	u5291
  6457   0039AC  0E02               	movlw	2
  6458   0039AE  5D61               	subwf	create_chain@scl& (0+255),w,b
  6459   0039B0  B0D8               	btfsc	status,0,c
  6460   0039B2  EFDD  F01C         	goto	u5291
  6461   0039B6  EFDF  F01C         	goto	u5290
  6462   0039BA                     u5291:
  6463   0039BA  EFE9  F01C         	goto	l4313
  6464   0039BE                     u5290:
  6465   0039BE                     l4309:
  6466                           
  6467                           ; BSR set to: 0
  6468   0039BE  0E00               	movlw	0
  6469   0039C0  6E56               	movwf	?_create_chain^0,c
  6470   0039C2  0E00               	movlw	0
  6471   0039C4  6E57               	movwf	(?_create_chain+1)^0,c
  6472   0039C6  0E00               	movlw	0
  6473   0039C8  6E58               	movwf	(?_create_chain+2)^0,c
  6474   0039CA  0E00               	movlw	0
  6475   0039CC  6E59               	movwf	(?_create_chain+3)^0,c
  6476   0039CE  EFDC  F01D         	goto	l380
  6477   0039D2                     l4313:
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  6481   0039D2  C056  F03B         	movff	create_chain@fs,get_fat@fs
  6482   0039D6  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  6483   0039DA  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  6484   0039DE  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  6485   0039E2  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  6486   0039E6  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  6487   0039EA  EC1F  F018         	call	_get_fat	;wreg free
  6488   0039EE  C03B  F069         	movff	?_get_fat,create_chain@cs
  6489   0039F2  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  6490   0039F6  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  6491   0039FA  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  6492   0039FE                     
  6493                           ;ff.c: 1019:   if (cs == 0) break;
  6494   0039FE  0100               	movlb	0	; () banked
  6495   003A00  5169               	movf	create_chain@cs& (0+255),w,b
  6496   003A02  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  6497   003A04  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  6498   003A06  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  6499   003A08  A4D8               	btfss	status,2,c
  6500   003A0A  EF09  F01D         	goto	u5301
  6501   003A0E  EF0B  F01D         	goto	u5300
  6502   003A12                     u5301:
  6503   003A12  EF0D  F01D         	goto	l4319
  6504   003A16                     u5300:
  6505   003A16  EF3C  F01D         	goto	l4329
  6506   003A1A                     l4319:
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  6510   003A1A  2969               	incf	create_chain@cs& (0+255),w,b
  6511   003A1C  E10C               	bnz	u5310
  6512   003A1E  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  6513   003A20  E10A               	bnz	u5310
  6514   003A22  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  6515   003A24  E108               	bnz	u5310
  6516   003A26  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  6517   003A28  B4D8               	btfsc	status,2,c
  6518   003A2A  EF19  F01D         	goto	u5311
  6519   003A2E  EF1B  F01D         	goto	u5310
  6520   003A32                     u5311:
  6521   003A32  EF7E  F01C         	goto	l4295
  6522   003A36                     u5310:
  6523   003A36                     
  6524                           ; BSR set to: 0
  6525   003A36  0569               	decf	create_chain@cs& (0+255),w,b
  6526   003A38  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  6527   003A3A  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  6528   003A3C  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  6529   003A3E  A4D8               	btfss	status,2,c
  6530   003A40  EF24  F01D         	goto	u5321
  6531   003A44  EF26  F01D         	goto	u5320
  6532   003A48                     u5321:
  6533   003A48  EF28  F01D         	goto	l4323
  6534   003A4C                     u5320:
  6535   003A4C  EF7E  F01C         	goto	l4295
  6536   003A50                     l4323:
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;ff.c: 1022:   if (ncl == scl) return 0;
  6540   003A50  5161               	movf	create_chain@scl& (0+255),w,b
  6541   003A52  1965               	xorwf	create_chain@ncl& (0+255),w,b
  6542   003A54  E10D               	bnz	u5331
  6543   003A56  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  6544   003A58  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  6545   003A5A  E10A               	bnz	u5331
  6546   003A5C  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  6547   003A5E  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  6548   003A60  E107               	bnz	u5331
  6549   003A62  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  6550   003A64  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  6551   003A66  A4D8               	btfss	status,2,c
  6552   003A68  EF38  F01D         	goto	u5331
  6553   003A6C  EF3A  F01D         	goto	u5330
  6554   003A70                     u5331:
  6555   003A70  EFAF  F01C         	goto	l4301
  6556   003A74                     u5330:
  6557   003A74  EFDF  F01C         	goto	l4309
  6558   003A78                     l4329:
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  6562   003A78  C056  F03B         	movff	create_chain@fs,put_fat@fs
  6563   003A7C  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  6564   003A80  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  6565   003A84  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  6566   003A88  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  6567   003A8C  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  6568   003A90  0EFF               	movlw	255
  6569   003A92  6E41               	movwf	put_fat@val^0,c
  6570   003A94  0EFF               	movlw	255
  6571   003A96  6E42               	movwf	(put_fat@val+1)^0,c
  6572   003A98  0EFF               	movlw	255
  6573   003A9A  6E43               	movwf	(put_fat@val+2)^0,c
  6574   003A9C  0E0F               	movlw	15
  6575   003A9E  6E44               	movwf	(put_fat@val+3)^0,c
  6576   003AA0  EC98  F013         	call	_put_fat	;wreg free
  6577   003AA4  0100               	movlb	0	; () banked
  6578   003AA6  6F60               	movwf	create_chain@res& (0+255),b
  6579   003AA8                     
  6580                           ; BSR set to: 0
  6581                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  6582   003AA8  5160               	movf	create_chain@res& (0+255),w,b
  6583   003AAA  A4D8               	btfss	status,2,c
  6584   003AAC  EF5A  F01D         	goto	u5341
  6585   003AB0  EF5C  F01D         	goto	u5340
  6586   003AB4                     u5341:
  6587   003AB4  EF7F  F01D         	goto	l4337
  6588   003AB8                     u5340:
  6589   003AB8                     
  6590                           ; BSR set to: 0
  6591   003AB8  5058               	movf	create_chain@clst^0,w,c
  6592   003ABA  1059               	iorwf	(create_chain@clst+1)^0,w,c
  6593   003ABC  105A               	iorwf	(create_chain@clst+2)^0,w,c
  6594   003ABE  105B               	iorwf	(create_chain@clst+3)^0,w,c
  6595   003AC0  B4D8               	btfsc	status,2,c
  6596   003AC2  EF65  F01D         	goto	u5351
  6597   003AC6  EF67  F01D         	goto	u5350
  6598   003ACA                     u5351:
  6599   003ACA  EF7F  F01D         	goto	l4337
  6600   003ACE                     u5350:
  6601   003ACE                     
  6602                           ; BSR set to: 0
  6603                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  6604   003ACE  C056  F03B         	movff	create_chain@fs,put_fat@fs
  6605   003AD2  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  6606   003AD6  C058  F03D         	movff	create_chain@clst,put_fat@clst
  6607   003ADA  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  6608   003ADE  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  6609   003AE2  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  6610   003AE6  C065  F041         	movff	create_chain@ncl,put_fat@val
  6611   003AEA  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  6612   003AEE  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  6613   003AF2  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  6614   003AF6  EC98  F013         	call	_put_fat	;wreg free
  6615   003AFA  0100               	movlb	0	; () banked
  6616   003AFC  6F60               	movwf	create_chain@res& (0+255),b
  6617   003AFE                     l4337:
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;ff.c: 1029:  if (res == FR_OK) {
  6621   003AFE  5160               	movf	create_chain@res& (0+255),w,b
  6622   003B00  A4D8               	btfss	status,2,c
  6623   003B02  EF85  F01D         	goto	u5361
  6624   003B06  EF87  F01D         	goto	u5360
  6625   003B0A                     u5361:
  6626   003B0A  EFBE  F01D         	goto	l4343
  6627   003B0E                     u5360:
  6628   003B0E                     
  6629                           ; BSR set to: 0
  6630                           ;ff.c: 1030:   fs->last_clust = ncl;
  6631   003B0E  EE20 F00A          	lfsr	2,10
  6632   003B12  5056               	movf	create_chain@fs^0,w,c
  6633   003B14  26D9               	addwf	fsr2l,f,c
  6634   003B16  5057               	movf	(create_chain@fs+1)^0,w,c
  6635   003B18  22DA               	addwfc	fsr2h,f,c
  6636   003B1A  C065  FFDE         	movff	create_chain@ncl,postinc2
  6637   003B1E  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  6638   003B22  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  6639   003B26  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  6640                           
  6641                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  6642   003B2A  EE20 F00E          	lfsr	2,14
  6643   003B2E  5056               	movf	create_chain@fs^0,w,c
  6644   003B30  26D9               	addwf	fsr2l,f,c
  6645   003B32  5057               	movf	(create_chain@fs+1)^0,w,c
  6646   003B34  22DA               	addwfc	fsr2h,f,c
  6647   003B36  28DE               	incf	postinc2,w,c
  6648   003B38  E10C               	bnz	u5370
  6649   003B3A  28DE               	incf	postinc2,w,c
  6650   003B3C  E10A               	bnz	u5370
  6651   003B3E  28DE               	incf	postinc2,w,c
  6652   003B40  E108               	bnz	u5370
  6653   003B42  28DE               	incf	postinc2,w,c
  6654   003B44  B4D8               	btfsc	status,2,c
  6655   003B46  EFA7  F01D         	goto	u5371
  6656   003B4A  EFA9  F01D         	goto	u5370
  6657   003B4E                     u5371:
  6658   003B4E  EFD4  F01D         	goto	l395
  6659   003B52                     u5370:
  6660   003B52                     
  6661                           ; BSR set to: 0
  6662                           ;ff.c: 1032:    fs->free_clust--;
  6663   003B52  EE20 F00E          	lfsr	2,14
  6664   003B56  5056               	movf	create_chain@fs^0,w,c
  6665   003B58  26D9               	addwf	fsr2l,f,c
  6666   003B5A  5057               	movf	(create_chain@fs+1)^0,w,c
  6667   003B5C  22DA               	addwfc	fsr2h,f,c
  6668   003B5E  06DE               	decf	postinc2,f,c
  6669   003B60  0E00               	movlw	0
  6670   003B62  5ADE               	subwfb	postinc2,f,c
  6671   003B64  5ADE               	subwfb	postinc2,f,c
  6672   003B66  5ADE               	subwfb	postinc2,f,c
  6673                           
  6674                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  6675   003B68  EE20 F005          	lfsr	2,5
  6676   003B6C  5056               	movf	create_chain@fs^0,w,c
  6677   003B6E  26D9               	addwf	fsr2l,f,c
  6678   003B70  5057               	movf	(create_chain@fs+1)^0,w,c
  6679   003B72  22DA               	addwfc	fsr2h,f,c
  6680   003B74  0E00               	movlw	0
  6681   003B76  80DB               	bsf	plusw2,0,c
  6682   003B78  EFD4  F01D         	goto	l395
  6683   003B7C                     l4343:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  6687   003B7C  0560               	decf	create_chain@res& (0+255),w,b
  6688   003B7E  B4D8               	btfsc	status,2,c
  6689   003B80  EFC4  F01D         	goto	u5381
  6690   003B84  EFC6  F01D         	goto	u5380
  6691   003B88                     u5381:
  6692   003B88  EFD0  F01D         	goto	l397
  6693   003B8C                     u5380:
  6694   003B8C                     
  6695                           ; BSR set to: 0
  6696   003B8C  0E01               	movlw	1
  6697   003B8E  6F65               	movwf	create_chain@ncl& (0+255),b
  6698   003B90  0E00               	movlw	0
  6699   003B92  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  6700   003B94  0E00               	movlw	0
  6701   003B96  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  6702   003B98  0E00               	movlw	0
  6703   003B9A  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  6704   003B9C  EFD4  F01D         	goto	l395
  6705   003BA0                     l397:
  6706                           
  6707                           ; BSR set to: 0
  6708   003BA0  6965               	setf	create_chain@ncl& (0+255),b
  6709   003BA2  6966               	setf	(create_chain@ncl+1)& (0+255),b
  6710   003BA4  6967               	setf	(create_chain@ncl+2)& (0+255),b
  6711   003BA6  6968               	setf	(create_chain@ncl+3)& (0+255),b
  6712   003BA8                     l395:
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;ff.c: 1039:  return ncl;
  6716   003BA8  C065  F056         	movff	create_chain@ncl,?_create_chain
  6717   003BAC  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  6718   003BB0  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  6719   003BB4  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  6720   003BB8                     l380:
  6721                           
  6722                           ; BSR set to: 0
  6723   003BB8  0012               	return		;funcret
  6724   003BBA                     __end_of_create_chain:
  6725                           	callstack 0
  6726                           
  6727 ;; *************** function _put_fat *****************
  6728 ;; Defined at:
  6729 ;;		line 873 in file "ff.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  fs              2   58[COMRAM] PTR struct .
  6732 ;;		 -> NULL(0), FatFs(558), 
  6733 ;;  clst            4   60[COMRAM] unsigned long 
  6734 ;;  val             4   64[COMRAM] unsigned long 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  p               2   83[COMRAM] PTR unsigned char 
  6737 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6738 ;;  bc              2   80[COMRAM] unsigned short 
  6739 ;;  res             1   82[COMRAM] enum E95
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      enum E95
  6742 ;; Registers used:
  6743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6749 ;;      Params:        10       0       0       0       0       0       0       0       0
  6750 ;;      Locals:         9       0       0       0       0       0       0       0       0
  6751 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6752 ;;      Totals:        27       0       0       0       0       0       0       0       0
  6753 ;;Total ram usage:       27 bytes
  6754 ;; Hardware stack levels used: 1
  6755 ;; Hardware stack levels required when called: 8
  6756 ;; This function calls:
  6757 ;;		_move_window
  6758 ;; This function is called by:
  6759 ;;		_remove_chain
  6760 ;;		_create_chain
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text16
  6765   002730                     __ptext16:
  6766                           	callstack 0
  6767   002730                     _put_fat:
  6768                           	callstack 20
  6769   002730                     
  6770                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  6771   002730  5040               	movf	(put_fat@clst+3)^0,w,c
  6772   002732  103F               	iorwf	(put_fat@clst+2)^0,w,c
  6773   002734  103E               	iorwf	(put_fat@clst+1)^0,w,c
  6774   002736  E109               	bnz	u5060
  6775   002738  0E02               	movlw	2
  6776   00273A  5C3D               	subwf	put_fat@clst^0,w,c
  6777   00273C  A0D8               	btfss	status,0,c
  6778   00273E  EFA3  F013         	goto	u5061
  6779   002742  EFA5  F013         	goto	u5060
  6780   002746                     u5061:
  6781   002746  EFBA  F013         	goto	l4171
  6782   00274A                     u5060:
  6783   00274A  EE20 F012          	lfsr	2,18
  6784   00274E  503B               	movf	put_fat@fs^0,w,c
  6785   002750  26D9               	addwf	fsr2l,f,c
  6786   002752  503C               	movf	(put_fat@fs+1)^0,w,c
  6787   002754  22DA               	addwfc	fsr2h,f,c
  6788   002756  50DE               	movf	postinc2,w,c
  6789   002758  5C3D               	subwf	put_fat@clst^0,w,c
  6790   00275A  50DE               	movf	postinc2,w,c
  6791   00275C  583E               	subwfb	(put_fat@clst+1)^0,w,c
  6792   00275E  50DE               	movf	postinc2,w,c
  6793   002760  583F               	subwfb	(put_fat@clst+2)^0,w,c
  6794   002762  50DE               	movf	postinc2,w,c
  6795   002764  5840               	subwfb	(put_fat@clst+3)^0,w,c
  6796   002766  A0D8               	btfss	status,0,c
  6797   002768  EFB8  F013         	goto	u5071
  6798   00276C  EFBA  F013         	goto	u5070
  6799   002770                     u5071:
  6800   002770  EFCB  F015         	goto	l4235
  6801   002774                     u5070:
  6802   002774                     l4171:
  6803                           
  6804                           ;ff.c: 885:   res = FR_INT_ERR;
  6805   002774  0E02               	movlw	2
  6806   002776  6E53               	movwf	put_fat@res^0,c
  6807                           
  6808                           ;ff.c: 887:  } else {
  6809   002778  EFE8  F015         	goto	l4237
  6810   00277C                     l339:
  6811                           
  6812                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  6813   00277C  C03D  F051         	movff	put_fat@clst,put_fat@bc
  6814   002780  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  6815   002784  90D8               	bcf	status,0,c
  6816   002786  3052               	rrcf	(put_fat@bc+1)^0,w,c
  6817   002788  6E46               	movwf	(??_put_fat+1)^0,c
  6818   00278A  3051               	rrcf	put_fat@bc^0,w,c
  6819   00278C  6E45               	movwf	??_put_fat^0,c
  6820   00278E  5045               	movf	??_put_fat^0,w,c
  6821   002790  2651               	addwf	put_fat@bc^0,f,c
  6822   002792  5046               	movf	(??_put_fat+1)^0,w,c
  6823   002794  2252               	addwfc	(put_fat@bc+1)^0,f,c
  6824   002796                     
  6825                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  6826   002796  C03B  F030         	movff	put_fat@fs,move_window@fs
  6827   00279A  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  6828   00279E  EE20 F01E          	lfsr	2,30
  6829   0027A2  503B               	movf	put_fat@fs^0,w,c
  6830   0027A4  26D9               	addwf	fsr2l,f,c
  6831   0027A6  503C               	movf	(put_fat@fs+1)^0,w,c
  6832   0027A8  22DA               	addwfc	fsr2h,f,c
  6833   0027AA  CFDE F045          	movff	postinc2,??_put_fat
  6834   0027AE  CFDE F046          	movff	postinc2,??_put_fat+1
  6835   0027B2  CFDE F047          	movff	postinc2,??_put_fat+2
  6836   0027B6  CFDE F048          	movff	postinc2,??_put_fat+3
  6837   0027BA  C051  F049         	movff	put_fat@bc,??_put_fat+4
  6838   0027BE  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  6839   0027C2  0E09               	movlw	9
  6840   0027C4  6E4B               	movwf	(??_put_fat+6)^0,c
  6841   0027C6                     u5085:
  6842   0027C6  90D8               	bcf	status,0,c
  6843   0027C8  324A               	rrcf	(??_put_fat+5)^0,f,c
  6844   0027CA  3249               	rrcf	(??_put_fat+4)^0,f,c
  6845   0027CC  2E4B               	decfsz	(??_put_fat+6)^0,f,c
  6846   0027CE  EFE3  F013         	goto	u5085
  6847   0027D2  5049               	movf	(??_put_fat+4)^0,w,c
  6848   0027D4  2445               	addwf	??_put_fat^0,w,c
  6849   0027D6  6E32               	movwf	move_window@sector^0,c
  6850   0027D8  504A               	movf	(??_put_fat+5)^0,w,c
  6851   0027DA  2046               	addwfc	(??_put_fat+1)^0,w,c
  6852   0027DC  6E33               	movwf	(move_window@sector+1)^0,c
  6853   0027DE  0E00               	movlw	0
  6854   0027E0  2047               	addwfc	(??_put_fat+2)^0,w,c
  6855   0027E2  6E34               	movwf	(move_window@sector+2)^0,c
  6856   0027E4  0E00               	movlw	0
  6857   0027E6  2048               	addwfc	(??_put_fat+3)^0,w,c
  6858   0027E8  6E35               	movwf	(move_window@sector+3)^0,c
  6859   0027EA  ECE8  F02A         	call	_move_window	;wreg free
  6860   0027EE  6E53               	movwf	put_fat@res^0,c
  6861   0027F0                     
  6862                           ;ff.c: 892:    if (res != FR_OK) break;
  6863   0027F0  5053               	movf	put_fat@res^0,w,c
  6864   0027F2  B4D8               	btfsc	status,2,c
  6865   0027F4  EFFE  F013         	goto	u5091
  6866   0027F8  EF00  F014         	goto	u5090
  6867   0027FC                     u5091:
  6868   0027FC  EF02  F014         	goto	l4181
  6869   002800                     u5090:
  6870   002800  EFE8  F015         	goto	l4237
  6871   002804                     l4181:
  6872                           
  6873                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  6874   002804  0EFF               	movlw	255
  6875   002806  1451               	andwf	put_fat@bc^0,w,c
  6876   002808  6E45               	movwf	??_put_fat^0,c
  6877   00280A  0E01               	movlw	1
  6878   00280C  1452               	andwf	(put_fat@bc+1)^0,w,c
  6879   00280E  6E46               	movwf	(??_put_fat+1)^0,c
  6880   002810  5045               	movf	??_put_fat^0,w,c
  6881   002812  243B               	addwf	put_fat@fs^0,w,c
  6882   002814  6E47               	movwf	(??_put_fat+2)^0,c
  6883   002816  5046               	movf	(??_put_fat+1)^0,w,c
  6884   002818  203C               	addwfc	(put_fat@fs+1)^0,w,c
  6885   00281A  6E48               	movwf	(??_put_fat+3)^0,c
  6886   00281C  0E2E               	movlw	46
  6887   00281E  2447               	addwf	(??_put_fat+2)^0,w,c
  6888   002820  6E54               	movwf	put_fat@p^0,c
  6889   002822  0E00               	movlw	0
  6890   002824  2048               	addwfc	(??_put_fat+3)^0,w,c
  6891   002826  6E55               	movwf	(put_fat@p+1)^0,c
  6892   002828  4A51               	infsnz	put_fat@bc^0,f,c
  6893   00282A  2A52               	incf	(put_fat@bc+1)^0,f,c
  6894   00282C                     
  6895                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  6896   00282C  B03D               	btfsc	put_fat@clst^0,0,c
  6897   00282E  EF1B  F014         	goto	u5101
  6898   002832  EF1D  F014         	goto	u5100
  6899   002836                     u5101:
  6900   002836  EF22  F014         	goto	l4189
  6901   00283A                     u5100:
  6902   00283A  C041  F04D         	movff	put_fat@val,_put_fat$907
  6903   00283E  6A4E               	clrf	(_put_fat$907+1)^0,c
  6904   002840  EF3C  F014         	goto	l4191
  6905   002844                     l4189:
  6906   002844  5041               	movf	put_fat@val^0,w,c
  6907   002846  6E45               	movwf	??_put_fat^0,c
  6908   002848  6A46               	clrf	(??_put_fat+1)^0,c
  6909   00284A  3A45               	swapf	??_put_fat^0,f,c
  6910   00284C  3A46               	swapf	(??_put_fat+1)^0,f,c
  6911   00284E  0EF0               	movlw	240
  6912   002850  1646               	andwf	(??_put_fat+1)^0,f,c
  6913   002852  5045               	movf	??_put_fat^0,w,c
  6914   002854  0B0F               	andlw	15
  6915   002856  1246               	iorwf	(??_put_fat+1)^0,f,c
  6916   002858  0EF0               	movlw	240
  6917   00285A  1645               	andwf	??_put_fat^0,f,c
  6918   00285C  C054  FFD9         	movff	put_fat@p,fsr2l
  6919   002860  C055  FFDA         	movff	put_fat@p+1,fsr2h
  6920   002864  50DF               	movf	indf2,w,c
  6921   002866  0B0F               	andlw	15
  6922   002868  6E47               	movwf	(??_put_fat+2)^0,c
  6923   00286A  6A48               	clrf	(??_put_fat+3)^0,c
  6924   00286C  5045               	movf	??_put_fat^0,w,c
  6925   00286E  1047               	iorwf	(??_put_fat+2)^0,w,c
  6926   002870  6E4D               	movwf	_put_fat$907^0,c
  6927   002872  5046               	movf	(??_put_fat+1)^0,w,c
  6928   002874  1048               	iorwf	(??_put_fat+3)^0,w,c
  6929   002876  6E4E               	movwf	(_put_fat$907+1)^0,c
  6930   002878                     l4191:
  6931   002878  C054  FFD9         	movff	put_fat@p,fsr2l
  6932   00287C  C055  FFDA         	movff	put_fat@p+1,fsr2h
  6933   002880  C04D  FFDF         	movff	_put_fat$907,indf2
  6934   002884                     
  6935                           ;ff.c: 895:    fs->wflag = 1;
  6936   002884  EE20 F004          	lfsr	2,4
  6937   002888  503B               	movf	put_fat@fs^0,w,c
  6938   00288A  26D9               	addwf	fsr2l,f,c
  6939   00288C  503C               	movf	(put_fat@fs+1)^0,w,c
  6940   00288E  22DA               	addwfc	fsr2h,f,c
  6941   002890  0E01               	movlw	1
  6942   002892  6EDF               	movwf	indf2,c
  6943   002894                     
  6944                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  6945   002894  C03B  F030         	movff	put_fat@fs,move_window@fs
  6946   002898  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  6947   00289C  EE20 F01E          	lfsr	2,30
  6948   0028A0  503B               	movf	put_fat@fs^0,w,c
  6949   0028A2  26D9               	addwf	fsr2l,f,c
  6950   0028A4  503C               	movf	(put_fat@fs+1)^0,w,c
  6951   0028A6  22DA               	addwfc	fsr2h,f,c
  6952   0028A8  CFDE F045          	movff	postinc2,??_put_fat
  6953   0028AC  CFDE F046          	movff	postinc2,??_put_fat+1
  6954   0028B0  CFDE F047          	movff	postinc2,??_put_fat+2
  6955   0028B4  CFDE F048          	movff	postinc2,??_put_fat+3
  6956   0028B8  C051  F049         	movff	put_fat@bc,??_put_fat+4
  6957   0028BC  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  6958   0028C0  0E09               	movlw	9
  6959   0028C2  6E4B               	movwf	(??_put_fat+6)^0,c
  6960   0028C4                     u5115:
  6961   0028C4  90D8               	bcf	status,0,c
  6962   0028C6  324A               	rrcf	(??_put_fat+5)^0,f,c
  6963   0028C8  3249               	rrcf	(??_put_fat+4)^0,f,c
  6964   0028CA  2E4B               	decfsz	(??_put_fat+6)^0,f,c
  6965   0028CC  EF62  F014         	goto	u5115
  6966   0028D0  5049               	movf	(??_put_fat+4)^0,w,c
  6967   0028D2  2445               	addwf	??_put_fat^0,w,c
  6968   0028D4  6E32               	movwf	move_window@sector^0,c
  6969   0028D6  504A               	movf	(??_put_fat+5)^0,w,c
  6970   0028D8  2046               	addwfc	(??_put_fat+1)^0,w,c
  6971   0028DA  6E33               	movwf	(move_window@sector+1)^0,c
  6972   0028DC  0E00               	movlw	0
  6973   0028DE  2047               	addwfc	(??_put_fat+2)^0,w,c
  6974   0028E0  6E34               	movwf	(move_window@sector+2)^0,c
  6975   0028E2  0E00               	movlw	0
  6976   0028E4  2048               	addwfc	(??_put_fat+3)^0,w,c
  6977   0028E6  6E35               	movwf	(move_window@sector+3)^0,c
  6978   0028E8  ECE8  F02A         	call	_move_window	;wreg free
  6979   0028EC  6E53               	movwf	put_fat@res^0,c
  6980   0028EE                     
  6981                           ;ff.c: 897:    if (res != FR_OK) break;
  6982   0028EE  5053               	movf	put_fat@res^0,w,c
  6983   0028F0  B4D8               	btfsc	status,2,c
  6984   0028F2  EF7D  F014         	goto	u5121
  6985   0028F6  EF7F  F014         	goto	u5120
  6986   0028FA                     u5121:
  6987   0028FA  EF81  F014         	goto	l4201
  6988   0028FE                     u5120:
  6989   0028FE  EFE8  F015         	goto	l4237
  6990   002902                     l4201:
  6991                           
  6992                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  6993   002902  0EFF               	movlw	255
  6994   002904  1451               	andwf	put_fat@bc^0,w,c
  6995   002906  6E45               	movwf	??_put_fat^0,c
  6996   002908  0E01               	movlw	1
  6997   00290A  1452               	andwf	(put_fat@bc+1)^0,w,c
  6998   00290C  6E46               	movwf	(??_put_fat+1)^0,c
  6999   00290E  5045               	movf	??_put_fat^0,w,c
  7000   002910  243B               	addwf	put_fat@fs^0,w,c
  7001   002912  6E47               	movwf	(??_put_fat+2)^0,c
  7002   002914  5046               	movf	(??_put_fat+1)^0,w,c
  7003   002916  203C               	addwfc	(put_fat@fs+1)^0,w,c
  7004   002918  6E48               	movwf	(??_put_fat+3)^0,c
  7005   00291A  0E2E               	movlw	46
  7006   00291C  2447               	addwf	(??_put_fat+2)^0,w,c
  7007   00291E  6E54               	movwf	put_fat@p^0,c
  7008   002920  0E00               	movlw	0
  7009   002922  2048               	addwfc	(??_put_fat+3)^0,w,c
  7010   002924  6E55               	movwf	(put_fat@p+1)^0,c
  7011   002926                     
  7012                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  7013   002926  B03D               	btfsc	put_fat@clst^0,0,c
  7014   002928  EF98  F014         	goto	u5131
  7015   00292C  EF9A  F014         	goto	u5130
  7016   002930                     u5131:
  7017   002930  EFB8  F014         	goto	l4207
  7018   002934                     u5130:
  7019   002934  C041  F045         	movff	put_fat@val,??_put_fat
  7020   002938  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  7021   00293C  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  7022   002940  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  7023   002944  C046  F045         	movff	??_put_fat+1,??_put_fat
  7024   002948  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  7025   00294C  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  7026   002950  6A48               	clrf	(??_put_fat+3)^0,c
  7027   002952  0E0F               	movlw	15
  7028   002954  1645               	andwf	??_put_fat^0,f,c
  7029   002956  C054  FFD9         	movff	put_fat@p,fsr2l
  7030   00295A  C055  FFDA         	movff	put_fat@p+1,fsr2h
  7031   00295E  50DF               	movf	indf2,w,c
  7032   002960  0BF0               	andlw	240
  7033   002962  1045               	iorwf	??_put_fat^0,w,c
  7034   002964  6E49               	movwf	(??_put_fat+4)^0,c
  7035   002966  5049               	movf	(??_put_fat+4)^0,w,c
  7036   002968  6E4F               	movwf	_put_fat$908^0,c
  7037   00296A  6A50               	clrf	(_put_fat$908+1)^0,c
  7038   00296C  EFCE  F014         	goto	l4209
  7039   002970                     l4207:
  7040   002970  C041  F045         	movff	put_fat@val,??_put_fat
  7041   002974  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  7042   002978  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  7043   00297C  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  7044   002980  0E05               	movlw	5
  7045   002982  EFC8  F014         	goto	u5140
  7046   002986                     u5145:
  7047   002986  90D8               	bcf	status,0,c
  7048   002988  3248               	rrcf	(??_put_fat+3)^0,f,c
  7049   00298A  3247               	rrcf	(??_put_fat+2)^0,f,c
  7050   00298C  3246               	rrcf	(??_put_fat+1)^0,f,c
  7051   00298E  3245               	rrcf	??_put_fat^0,f,c
  7052   002990                     u5140:
  7053   002990  2EE8               	decfsz	wreg,f,c
  7054   002992  EFC3  F014         	goto	u5145
  7055   002996  5045               	movf	??_put_fat^0,w,c
  7056   002998  6E4F               	movwf	_put_fat$908^0,c
  7057   00299A  6A50               	clrf	(_put_fat$908+1)^0,c
  7058   00299C                     l4209:
  7059   00299C  C054  FFD9         	movff	put_fat@p,fsr2l
  7060   0029A0  C055  FFDA         	movff	put_fat@p+1,fsr2h
  7061   0029A4  C04F  FFDF         	movff	_put_fat$908,indf2
  7062                           
  7063                           ;ff.c: 900:    fs->wflag = 1;
  7064   0029A8  EE20 F004          	lfsr	2,4
  7065   0029AC  503B               	movf	put_fat@fs^0,w,c
  7066   0029AE  26D9               	addwf	fsr2l,f,c
  7067   0029B0  503C               	movf	(put_fat@fs+1)^0,w,c
  7068   0029B2  22DA               	addwfc	fsr2h,f,c
  7069   0029B4  0E01               	movlw	1
  7070   0029B6  6EDF               	movwf	indf2,c
  7071                           
  7072                           ;ff.c: 901:    break;
  7073   0029B8  EFE8  F015         	goto	l4237
  7074   0029BC                     l4211:
  7075                           
  7076                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  7077   0029BC  C03B  F030         	movff	put_fat@fs,move_window@fs
  7078   0029C0  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  7079   0029C4  EE20 F01E          	lfsr	2,30
  7080   0029C8  503B               	movf	put_fat@fs^0,w,c
  7081   0029CA  26D9               	addwf	fsr2l,f,c
  7082   0029CC  503C               	movf	(put_fat@fs+1)^0,w,c
  7083   0029CE  22DA               	addwfc	fsr2h,f,c
  7084   0029D0  CFDE F045          	movff	postinc2,??_put_fat
  7085   0029D4  CFDE F046          	movff	postinc2,??_put_fat+1
  7086   0029D8  CFDE F047          	movff	postinc2,??_put_fat+2
  7087   0029DC  CFDE F048          	movff	postinc2,??_put_fat+3
  7088   0029E0  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  7089   0029E4  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  7090   0029E8  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  7091   0029EC  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  7092   0029F0  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  7093   0029F4  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  7094   0029F8  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  7095   0029FC  6A4C               	clrf	(??_put_fat+7)^0,c
  7096   0029FE  5045               	movf	??_put_fat^0,w,c
  7097   002A00  2449               	addwf	(??_put_fat+4)^0,w,c
  7098   002A02  6E32               	movwf	move_window@sector^0,c
  7099   002A04  5046               	movf	(??_put_fat+1)^0,w,c
  7100   002A06  204A               	addwfc	(??_put_fat+5)^0,w,c
  7101   002A08  6E33               	movwf	(move_window@sector+1)^0,c
  7102   002A0A  5047               	movf	(??_put_fat+2)^0,w,c
  7103   002A0C  204B               	addwfc	(??_put_fat+6)^0,w,c
  7104   002A0E  6E34               	movwf	(move_window@sector+2)^0,c
  7105   002A10  5048               	movf	(??_put_fat+3)^0,w,c
  7106   002A12  204C               	addwfc	(??_put_fat+7)^0,w,c
  7107   002A14  6E35               	movwf	(move_window@sector+3)^0,c
  7108   002A16  ECE8  F02A         	call	_move_window	;wreg free
  7109   002A1A  6E53               	movwf	put_fat@res^0,c
  7110   002A1C                     
  7111                           ;ff.c: 905:    if (res != FR_OK) break;
  7112   002A1C  5053               	movf	put_fat@res^0,w,c
  7113   002A1E  B4D8               	btfsc	status,2,c
  7114   002A20  EF14  F015         	goto	u5151
  7115   002A24  EF16  F015         	goto	u5150
  7116   002A28                     u5151:
  7117   002A28  EF18  F015         	goto	l4217
  7118   002A2C                     u5150:
  7119   002A2C  EFE8  F015         	goto	l4237
  7120   002A30                     l4217:
  7121                           
  7122                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  7123   002A30  C03D  F045         	movff	put_fat@clst,??_put_fat
  7124   002A34  C03E  F046         	movff	put_fat@clst+1,??_put_fat+1
  7125   002A38  90D8               	bcf	status,0,c
  7126   002A3A  3645               	rlcf	??_put_fat^0,f,c
  7127   002A3C  3646               	rlcf	(??_put_fat+1)^0,f,c
  7128   002A3E  0EFF               	movlw	255
  7129   002A40  1445               	andwf	??_put_fat^0,w,c
  7130   002A42  6E47               	movwf	(??_put_fat+2)^0,c
  7131   002A44  0E01               	movlw	1
  7132   002A46  1446               	andwf	(??_put_fat+1)^0,w,c
  7133   002A48  6E48               	movwf	(??_put_fat+3)^0,c
  7134   002A4A  5047               	movf	(??_put_fat+2)^0,w,c
  7135   002A4C  243B               	addwf	put_fat@fs^0,w,c
  7136   002A4E  6E49               	movwf	(??_put_fat+4)^0,c
  7137   002A50  5048               	movf	(??_put_fat+3)^0,w,c
  7138   002A52  203C               	addwfc	(put_fat@fs+1)^0,w,c
  7139   002A54  6E4A               	movwf	(??_put_fat+5)^0,c
  7140   002A56  0E2E               	movlw	46
  7141   002A58  2449               	addwf	(??_put_fat+4)^0,w,c
  7142   002A5A  6E54               	movwf	put_fat@p^0,c
  7143   002A5C  0E00               	movlw	0
  7144   002A5E  204A               	addwfc	(??_put_fat+5)^0,w,c
  7145   002A60  6E55               	movwf	(put_fat@p+1)^0,c
  7146   002A62                     
  7147                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  7148   002A62  C054  FFD9         	movff	put_fat@p,fsr2l
  7149   002A66  C055  FFDA         	movff	put_fat@p+1,fsr2h
  7150   002A6A  C041  FFDE         	movff	put_fat@val,postinc2
  7151   002A6E  C042  FFDD         	movff	put_fat@val+1,postdec2
  7152                           
  7153                           ;ff.c: 908:    fs->wflag = 1;
  7154   002A72  EE20 F004          	lfsr	2,4
  7155   002A76  503B               	movf	put_fat@fs^0,w,c
  7156   002A78  26D9               	addwf	fsr2l,f,c
  7157   002A7A  503C               	movf	(put_fat@fs+1)^0,w,c
  7158   002A7C  22DA               	addwfc	fsr2h,f,c
  7159   002A7E  0E01               	movlw	1
  7160   002A80  6EDF               	movwf	indf2,c
  7161                           
  7162                           ;ff.c: 909:    break;
  7163   002A82  EFE8  F015         	goto	l4237
  7164   002A86                     l4221:
  7165                           
  7166                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  7167   002A86  C03B  F030         	movff	put_fat@fs,move_window@fs
  7168   002A8A  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  7169   002A8E  EE20 F01E          	lfsr	2,30
  7170   002A92  503B               	movf	put_fat@fs^0,w,c
  7171   002A94  26D9               	addwf	fsr2l,f,c
  7172   002A96  503C               	movf	(put_fat@fs+1)^0,w,c
  7173   002A98  22DA               	addwfc	fsr2h,f,c
  7174   002A9A  CFDE F045          	movff	postinc2,??_put_fat
  7175   002A9E  CFDE F046          	movff	postinc2,??_put_fat+1
  7176   002AA2  CFDE F047          	movff	postinc2,??_put_fat+2
  7177   002AA6  CFDE F048          	movff	postinc2,??_put_fat+3
  7178   002AAA  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  7179   002AAE  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  7180   002AB2  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  7181   002AB6  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  7182   002ABA  0E08               	movlw	8
  7183   002ABC  EF65  F015         	goto	u5160
  7184   002AC0                     u5165:
  7185   002AC0  90D8               	bcf	status,0,c
  7186   002AC2  324C               	rrcf	(??_put_fat+7)^0,f,c
  7187   002AC4  324B               	rrcf	(??_put_fat+6)^0,f,c
  7188   002AC6  324A               	rrcf	(??_put_fat+5)^0,f,c
  7189   002AC8  3249               	rrcf	(??_put_fat+4)^0,f,c
  7190   002ACA                     u5160:
  7191   002ACA  2EE8               	decfsz	wreg,f,c
  7192   002ACC  EF60  F015         	goto	u5165
  7193   002AD0  5045               	movf	??_put_fat^0,w,c
  7194   002AD2  2449               	addwf	(??_put_fat+4)^0,w,c
  7195   002AD4  6E32               	movwf	move_window@sector^0,c
  7196   002AD6  5046               	movf	(??_put_fat+1)^0,w,c
  7197   002AD8  204A               	addwfc	(??_put_fat+5)^0,w,c
  7198   002ADA  6E33               	movwf	(move_window@sector+1)^0,c
  7199   002ADC  5047               	movf	(??_put_fat+2)^0,w,c
  7200   002ADE  204B               	addwfc	(??_put_fat+6)^0,w,c
  7201   002AE0  6E34               	movwf	(move_window@sector+2)^0,c
  7202   002AE2  5048               	movf	(??_put_fat+3)^0,w,c
  7203   002AE4  204C               	addwfc	(??_put_fat+7)^0,w,c
  7204   002AE6  6E35               	movwf	(move_window@sector+3)^0,c
  7205   002AE8  ECE8  F02A         	call	_move_window	;wreg free
  7206   002AEC  6E53               	movwf	put_fat@res^0,c
  7207   002AEE                     
  7208                           ;ff.c: 913:    if (res != FR_OK) break;
  7209   002AEE  5053               	movf	put_fat@res^0,w,c
  7210   002AF0  B4D8               	btfsc	status,2,c
  7211   002AF2  EF7D  F015         	goto	u5171
  7212   002AF6  EF7F  F015         	goto	u5170
  7213   002AFA                     u5171:
  7214   002AFA  EF81  F015         	goto	l4227
  7215   002AFE                     u5170:
  7216   002AFE  EFE8  F015         	goto	l4237
  7217   002B02                     l4227:
  7218                           
  7219                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  7220   002B02  C03D  F045         	movff	put_fat@clst,??_put_fat
  7221   002B06  C03E  F046         	movff	put_fat@clst+1,??_put_fat+1
  7222   002B0A  90D8               	bcf	status,0,c
  7223   002B0C  3645               	rlcf	??_put_fat^0,f,c
  7224   002B0E  3646               	rlcf	(??_put_fat+1)^0,f,c
  7225   002B10  90D8               	bcf	status,0,c
  7226   002B12  3645               	rlcf	??_put_fat^0,f,c
  7227   002B14  3646               	rlcf	(??_put_fat+1)^0,f,c
  7228   002B16  0EFF               	movlw	255
  7229   002B18  1445               	andwf	??_put_fat^0,w,c
  7230   002B1A  6E47               	movwf	(??_put_fat+2)^0,c
  7231   002B1C  0E01               	movlw	1
  7232   002B1E  1446               	andwf	(??_put_fat+1)^0,w,c
  7233   002B20  6E48               	movwf	(??_put_fat+3)^0,c
  7234   002B22  5047               	movf	(??_put_fat+2)^0,w,c
  7235   002B24  243B               	addwf	put_fat@fs^0,w,c
  7236   002B26  6E49               	movwf	(??_put_fat+4)^0,c
  7237   002B28  5048               	movf	(??_put_fat+3)^0,w,c
  7238   002B2A  203C               	addwfc	(put_fat@fs+1)^0,w,c
  7239   002B2C  6E4A               	movwf	(??_put_fat+5)^0,c
  7240   002B2E  0E2E               	movlw	46
  7241   002B30  2449               	addwf	(??_put_fat+4)^0,w,c
  7242   002B32  6E54               	movwf	put_fat@p^0,c
  7243   002B34  0E00               	movlw	0
  7244   002B36  204A               	addwfc	(??_put_fat+5)^0,w,c
  7245   002B38  6E55               	movwf	(put_fat@p+1)^0,c
  7246   002B3A                     
  7247                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  7248   002B3A  C054  FFD9         	movff	put_fat@p,fsr2l
  7249   002B3E  C055  FFDA         	movff	put_fat@p+1,fsr2h
  7250   002B42  0E00               	movlw	0
  7251   002B44  14DE               	andwf	postinc2,w,c
  7252   002B46  6E45               	movwf	??_put_fat^0,c
  7253   002B48  0E00               	movlw	0
  7254   002B4A  14DE               	andwf	postinc2,w,c
  7255   002B4C  6E46               	movwf	(??_put_fat+1)^0,c
  7256   002B4E  0E00               	movlw	0
  7257   002B50  14DE               	andwf	postinc2,w,c
  7258   002B52  6E47               	movwf	(??_put_fat+2)^0,c
  7259   002B54  0EF0               	movlw	240
  7260   002B56  14DE               	andwf	postinc2,w,c
  7261   002B58  6E48               	movwf	(??_put_fat+3)^0,c
  7262   002B5A  5045               	movf	??_put_fat^0,w,c
  7263   002B5C  1241               	iorwf	put_fat@val^0,f,c
  7264   002B5E  5046               	movf	(??_put_fat+1)^0,w,c
  7265   002B60  1242               	iorwf	(put_fat@val+1)^0,f,c
  7266   002B62  5047               	movf	(??_put_fat+2)^0,w,c
  7267   002B64  1243               	iorwf	(put_fat@val+2)^0,f,c
  7268   002B66  5048               	movf	(??_put_fat+3)^0,w,c
  7269   002B68  1244               	iorwf	(put_fat@val+3)^0,f,c
  7270                           
  7271                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  7272   002B6A  C054  FFD9         	movff	put_fat@p,fsr2l
  7273   002B6E  C055  FFDA         	movff	put_fat@p+1,fsr2h
  7274   002B72  C041  FFDE         	movff	put_fat@val,postinc2
  7275   002B76  C042  FFDE         	movff	put_fat@val+1,postinc2
  7276   002B7A  C043  FFDE         	movff	put_fat@val+2,postinc2
  7277   002B7E  C044  FFDE         	movff	put_fat@val+3,postinc2
  7278   002B82                     
  7279                           ;ff.c: 917:    fs->wflag = 1;
  7280   002B82  EE20 F004          	lfsr	2,4
  7281   002B86  503B               	movf	put_fat@fs^0,w,c
  7282   002B88  26D9               	addwf	fsr2l,f,c
  7283   002B8A  503C               	movf	(put_fat@fs+1)^0,w,c
  7284   002B8C  22DA               	addwfc	fsr2h,f,c
  7285   002B8E  0E01               	movlw	1
  7286   002B90  6EDF               	movwf	indf2,c
  7287                           
  7288                           ;ff.c: 918:    break;
  7289   002B92  EFE8  F015         	goto	l4237
  7290   002B96                     l4235:
  7291   002B96  C03B  FFD9         	movff	put_fat@fs,fsr2l
  7292   002B9A  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
  7293   002B9E  50DF               	movf	indf2,w,c
  7294   002BA0  6E45               	movwf	??_put_fat^0,c
  7295   002BA2  6A46               	clrf	(??_put_fat+1)^0,c
  7296                           
  7297                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7298                           ; Switch size 1, requested type "simple"
  7299                           ; Number of cases is 1, Range of values is 0 to 0
  7300                           ; switch strategies available:
  7301                           ; Name         Instructions Cycles
  7302                           ; simple_byte            4     3 (average)
  7303                           ;	Chosen strategy is simple_byte
  7304   002BA4  5046               	movf	(??_put_fat+1)^0,w,c
  7305   002BA6  0A00               	xorlw	0	; case 0
  7306   002BA8  B4D8               	btfsc	status,2,c
  7307   002BAA  EFD9  F015         	goto	l6181
  7308   002BAE  EFBA  F013         	goto	l4171
  7309   002BB2                     l6181:
  7310                           
  7311                           ; Switch size 1, requested type "simple"
  7312                           ; Number of cases is 3, Range of values is 1 to 3
  7313                           ; switch strategies available:
  7314                           ; Name         Instructions Cycles
  7315                           ; simple_byte           10     6 (average)
  7316                           ;	Chosen strategy is simple_byte
  7317   002BB2  5045               	movf	??_put_fat^0,w,c
  7318   002BB4  0A01               	xorlw	1	; case 1
  7319   002BB6  B4D8               	btfsc	status,2,c
  7320   002BB8  EFBE  F013         	goto	l339
  7321   002BBC  0A03               	xorlw	3	; case 2
  7322   002BBE  B4D8               	btfsc	status,2,c
  7323   002BC0  EFDE  F014         	goto	l4211
  7324   002BC4  0A01               	xorlw	1	; case 3
  7325   002BC6  B4D8               	btfsc	status,2,c
  7326   002BC8  EF43  F015         	goto	l4221
  7327   002BCC  EFBA  F013         	goto	l4171
  7328   002BD0                     l4237:
  7329                           
  7330                           ;ff.c: 925:  return res;
  7331   002BD0  5053               	movf	put_fat@res^0,w,c
  7332   002BD2  0012               	return		;funcret
  7333   002BD4                     __end_of_put_fat:
  7334                           	callstack 0
  7335                           
  7336 ;; *************** function _get_fat *****************
  7337 ;; Defined at:
  7338 ;;		line 818 in file "ff.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  fs              2   58[COMRAM] PTR struct .
  7341 ;;		 -> NULL(0), FatFs(558), 
  7342 ;;  clst            4   60[COMRAM] unsigned long 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  val             4   74[COMRAM] unsigned long 
  7345 ;;  bc              2   82[COMRAM] unsigned short 
  7346 ;;  p               2   80[COMRAM] PTR unsigned char 
  7347 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  7348 ;;  wc              2   78[COMRAM] unsigned short 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  4   58[COMRAM] unsigned long 
  7351 ;; Registers used:
  7352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7358 ;;      Params:         6       0       0       0       0       0       0       0       0
  7359 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7360 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7361 ;;      Totals:        26       0       0       0       0       0       0       0       0
  7362 ;;Total ram usage:       26 bytes
  7363 ;; Hardware stack levels used: 1
  7364 ;; Hardware stack levels required when called: 8
  7365 ;; This function calls:
  7366 ;;		_move_window
  7367 ;; This function is called by:
  7368 ;;		_remove_chain
  7369 ;;		_create_chain
  7370 ;;		_dir_sdi
  7371 ;;		_dir_next
  7372 ;;		_f_read
  7373 ;;		_f_lseek
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text17
  7378   00303E                     __ptext17:
  7379                           	callstack 0
  7380   00303E                     _get_fat:
  7381                           	callstack 20
  7382   00303E                     
  7383                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
  7384   00303E  5040               	movf	(get_fat@clst+3)^0,w,c
  7385   003040  103F               	iorwf	(get_fat@clst+2)^0,w,c
  7386   003042  103E               	iorwf	(get_fat@clst+1)^0,w,c
  7387   003044  E109               	bnz	u4950
  7388   003046  0E02               	movlw	2
  7389   003048  5C3D               	subwf	get_fat@clst^0,w,c
  7390   00304A  A0D8               	btfss	status,0,c
  7391   00304C  EF2A  F018         	goto	u4951
  7392   003050  EF2C  F018         	goto	u4950
  7393   003054                     u4951:
  7394   003054  EF41  F018         	goto	l4117
  7395   003058                     u4950:
  7396   003058  EE20 F012          	lfsr	2,18
  7397   00305C  503B               	movf	get_fat@fs^0,w,c
  7398   00305E  26D9               	addwf	fsr2l,f,c
  7399   003060  503C               	movf	(get_fat@fs+1)^0,w,c
  7400   003062  22DA               	addwfc	fsr2h,f,c
  7401   003064  50DE               	movf	postinc2,w,c
  7402   003066  5C3D               	subwf	get_fat@clst^0,w,c
  7403   003068  50DE               	movf	postinc2,w,c
  7404   00306A  583E               	subwfb	(get_fat@clst+1)^0,w,c
  7405   00306C  50DE               	movf	postinc2,w,c
  7406   00306E  583F               	subwfb	(get_fat@clst+2)^0,w,c
  7407   003070  50DE               	movf	postinc2,w,c
  7408   003072  5840               	subwfb	(get_fat@clst+3)^0,w,c
  7409   003074  A0D8               	btfss	status,0,c
  7410   003076  EF3F  F018         	goto	u4961
  7411   00307A  EF41  F018         	goto	u4960
  7412   00307E                     u4961:
  7413   00307E  EF4B  F018         	goto	l313
  7414   003082                     u4960:
  7415   003082                     l4117:
  7416                           
  7417                           ;ff.c: 829:   val = 1;
  7418   003082  0E01               	movlw	1
  7419   003084  6E4B               	movwf	get_fat@val^0,c
  7420   003086  0E00               	movlw	0
  7421   003088  6E4C               	movwf	(get_fat@val+1)^0,c
  7422   00308A  0E00               	movlw	0
  7423   00308C  6E4D               	movwf	(get_fat@val+2)^0,c
  7424   00308E  0E00               	movlw	0
  7425   003090  6E4E               	movwf	(get_fat@val+3)^0,c
  7426                           
  7427                           ;ff.c: 831:  } else {
  7428   003092  EF0F  F01A         	goto	l316
  7429   003096                     l313:
  7430                           
  7431                           ;ff.c: 832:   val = 0xFFFFFFFF;
  7432   003096  684B               	setf	get_fat@val^0,c
  7433   003098  684C               	setf	(get_fat@val+1)^0,c
  7434   00309A  684D               	setf	(get_fat@val+2)^0,c
  7435   00309C  684E               	setf	(get_fat@val+3)^0,c
  7436                           
  7437                           ;ff.c: 834:   switch (fs->fs_type) {
  7438   00309E  EFF2  F019         	goto	l4161
  7439   0030A2                     l318:
  7440                           
  7441                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
  7442   0030A2  C03D  F053         	movff	get_fat@clst,get_fat@bc
  7443   0030A6  C03E  F054         	movff	get_fat@clst+1,get_fat@bc+1
  7444   0030AA  90D8               	bcf	status,0,c
  7445   0030AC  3054               	rrcf	(get_fat@bc+1)^0,w,c
  7446   0030AE  6E42               	movwf	(??_get_fat+1)^0,c
  7447   0030B0  3053               	rrcf	get_fat@bc^0,w,c
  7448   0030B2  6E41               	movwf	??_get_fat^0,c
  7449   0030B4  5041               	movf	??_get_fat^0,w,c
  7450   0030B6  2653               	addwf	get_fat@bc^0,f,c
  7451   0030B8  5042               	movf	(??_get_fat+1)^0,w,c
  7452   0030BA  2254               	addwfc	(get_fat@bc+1)^0,f,c
  7453   0030BC                     
  7454                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
  7455   0030BC  C03B  F030         	movff	get_fat@fs,move_window@fs
  7456   0030C0  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
  7457   0030C4  EE20 F01E          	lfsr	2,30
  7458   0030C8  503B               	movf	get_fat@fs^0,w,c
  7459   0030CA  26D9               	addwf	fsr2l,f,c
  7460   0030CC  503C               	movf	(get_fat@fs+1)^0,w,c
  7461   0030CE  22DA               	addwfc	fsr2h,f,c
  7462   0030D0  CFDE F041          	movff	postinc2,??_get_fat
  7463   0030D4  CFDE F042          	movff	postinc2,??_get_fat+1
  7464   0030D8  CFDE F043          	movff	postinc2,??_get_fat+2
  7465   0030DC  CFDE F044          	movff	postinc2,??_get_fat+3
  7466   0030E0  C053  F045         	movff	get_fat@bc,??_get_fat+4
  7467   0030E4  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
  7468   0030E8  0E09               	movlw	9
  7469   0030EA  6E47               	movwf	(??_get_fat+6)^0,c
  7470   0030EC                     u4975:
  7471   0030EC  90D8               	bcf	status,0,c
  7472   0030EE  3246               	rrcf	(??_get_fat+5)^0,f,c
  7473   0030F0  3245               	rrcf	(??_get_fat+4)^0,f,c
  7474   0030F2  2E47               	decfsz	(??_get_fat+6)^0,f,c
  7475   0030F4  EF76  F018         	goto	u4975
  7476   0030F8  5045               	movf	(??_get_fat+4)^0,w,c
  7477   0030FA  2441               	addwf	??_get_fat^0,w,c
  7478   0030FC  6E32               	movwf	move_window@sector^0,c
  7479   0030FE  5046               	movf	(??_get_fat+5)^0,w,c
  7480   003100  2042               	addwfc	(??_get_fat+1)^0,w,c
  7481   003102  6E33               	movwf	(move_window@sector+1)^0,c
  7482   003104  0E00               	movlw	0
  7483   003106  2043               	addwfc	(??_get_fat+2)^0,w,c
  7484   003108  6E34               	movwf	(move_window@sector+2)^0,c
  7485   00310A  0E00               	movlw	0
  7486   00310C  2044               	addwfc	(??_get_fat+3)^0,w,c
  7487   00310E  6E35               	movwf	(move_window@sector+3)^0,c
  7488   003110  ECE8  F02A         	call	_move_window	;wreg free
  7489   003114  0900               	iorlw	0
  7490   003116  B4D8               	btfsc	status,2,c
  7491   003118  EF90  F018         	goto	u4981
  7492   00311C  EF92  F018         	goto	u4980
  7493   003120                     u4981:
  7494   003120  EF94  F018         	goto	l4125
  7495   003124                     u4980:
  7496   003124  EF0F  F01A         	goto	l316
  7497   003128                     l4125:
  7498                           
  7499                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
  7500   003128  0EFF               	movlw	255
  7501   00312A  1453               	andwf	get_fat@bc^0,w,c
  7502   00312C  6E41               	movwf	??_get_fat^0,c
  7503   00312E  0E01               	movlw	1
  7504   003130  1454               	andwf	(get_fat@bc+1)^0,w,c
  7505   003132  6E42               	movwf	(??_get_fat+1)^0,c
  7506   003134  5041               	movf	??_get_fat^0,w,c
  7507   003136  243B               	addwf	get_fat@fs^0,w,c
  7508   003138  6E43               	movwf	(??_get_fat+2)^0,c
  7509   00313A  5042               	movf	(??_get_fat+1)^0,w,c
  7510   00313C  203C               	addwfc	(get_fat@fs+1)^0,w,c
  7511   00313E  6E44               	movwf	(??_get_fat+3)^0,c
  7512   003140  0E2E               	movlw	46
  7513   003142  2443               	addwf	(??_get_fat+2)^0,w,c
  7514   003144  6ED9               	movwf	fsr2l,c
  7515   003146  0E00               	movlw	0
  7516   003148  2044               	addwfc	(??_get_fat+3)^0,w,c
  7517   00314A  6EDA               	movwf	fsr2h,c
  7518   00314C  50DF               	movf	indf2,w,c
  7519   00314E  6E45               	movwf	(??_get_fat+4)^0,c
  7520   003150  5045               	movf	(??_get_fat+4)^0,w,c
  7521   003152  6E4F               	movwf	get_fat@wc^0,c
  7522   003154  6A50               	clrf	(get_fat@wc+1)^0,c
  7523   003156  4A53               	infsnz	get_fat@bc^0,f,c
  7524   003158  2A54               	incf	(get_fat@bc+1)^0,f,c
  7525   00315A                     
  7526                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
  7527   00315A  C03B  F030         	movff	get_fat@fs,move_window@fs
  7528   00315E  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
  7529   003162  EE20 F01E          	lfsr	2,30
  7530   003166  503B               	movf	get_fat@fs^0,w,c
  7531   003168  26D9               	addwf	fsr2l,f,c
  7532   00316A  503C               	movf	(get_fat@fs+1)^0,w,c
  7533   00316C  22DA               	addwfc	fsr2h,f,c
  7534   00316E  CFDE F041          	movff	postinc2,??_get_fat
  7535   003172  CFDE F042          	movff	postinc2,??_get_fat+1
  7536   003176  CFDE F043          	movff	postinc2,??_get_fat+2
  7537   00317A  CFDE F044          	movff	postinc2,??_get_fat+3
  7538   00317E  C053  F045         	movff	get_fat@bc,??_get_fat+4
  7539   003182  C054  F046         	movff	get_fat@bc+1,??_get_fat+5
  7540   003186  0E09               	movlw	9
  7541   003188  6E47               	movwf	(??_get_fat+6)^0,c
  7542   00318A                     u4995:
  7543   00318A  90D8               	bcf	status,0,c
  7544   00318C  3246               	rrcf	(??_get_fat+5)^0,f,c
  7545   00318E  3245               	rrcf	(??_get_fat+4)^0,f,c
  7546   003190  2E47               	decfsz	(??_get_fat+6)^0,f,c
  7547   003192  EFC5  F018         	goto	u4995
  7548   003196  5045               	movf	(??_get_fat+4)^0,w,c
  7549   003198  2441               	addwf	??_get_fat^0,w,c
  7550   00319A  6E32               	movwf	move_window@sector^0,c
  7551   00319C  5046               	movf	(??_get_fat+5)^0,w,c
  7552   00319E  2042               	addwfc	(??_get_fat+1)^0,w,c
  7553   0031A0  6E33               	movwf	(move_window@sector+1)^0,c
  7554   0031A2  0E00               	movlw	0
  7555   0031A4  2043               	addwfc	(??_get_fat+2)^0,w,c
  7556   0031A6  6E34               	movwf	(move_window@sector+2)^0,c
  7557   0031A8  0E00               	movlw	0
  7558   0031AA  2044               	addwfc	(??_get_fat+3)^0,w,c
  7559   0031AC  6E35               	movwf	(move_window@sector+3)^0,c
  7560   0031AE  ECE8  F02A         	call	_move_window	;wreg free
  7561   0031B2  0900               	iorlw	0
  7562   0031B4  B4D8               	btfsc	status,2,c
  7563   0031B6  EFDF  F018         	goto	u5001
  7564   0031BA  EFE1  F018         	goto	u5000
  7565   0031BE                     u5001:
  7566   0031BE  EFE3  F018         	goto	l4133
  7567   0031C2                     u5000:
  7568   0031C2  EF0F  F01A         	goto	l316
  7569   0031C6                     l4133:
  7570                           
  7571                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
  7572   0031C6  0EFF               	movlw	255
  7573   0031C8  1453               	andwf	get_fat@bc^0,w,c
  7574   0031CA  6E41               	movwf	??_get_fat^0,c
  7575   0031CC  0E01               	movlw	1
  7576   0031CE  1454               	andwf	(get_fat@bc+1)^0,w,c
  7577   0031D0  6E42               	movwf	(??_get_fat+1)^0,c
  7578   0031D2  5041               	movf	??_get_fat^0,w,c
  7579   0031D4  243B               	addwf	get_fat@fs^0,w,c
  7580   0031D6  6E43               	movwf	(??_get_fat+2)^0,c
  7581   0031D8  5042               	movf	(??_get_fat+1)^0,w,c
  7582   0031DA  203C               	addwfc	(get_fat@fs+1)^0,w,c
  7583   0031DC  6E44               	movwf	(??_get_fat+3)^0,c
  7584   0031DE  0E2E               	movlw	46
  7585   0031E0  2443               	addwf	(??_get_fat+2)^0,w,c
  7586   0031E2  6ED9               	movwf	fsr2l,c
  7587   0031E4  0E00               	movlw	0
  7588   0031E6  2044               	addwfc	(??_get_fat+3)^0,w,c
  7589   0031E8  6EDA               	movwf	fsr2h,c
  7590   0031EA  50DF               	movf	indf2,w,c
  7591   0031EC  6E45               	movwf	(??_get_fat+4)^0,c
  7592   0031EE  5045               	movf	(??_get_fat+4)^0,w,c
  7593   0031F0  6E47               	movwf	(??_get_fat+6)^0,c
  7594   0031F2  6A46               	clrf	(??_get_fat+5)^0,c
  7595   0031F4  5046               	movf	(??_get_fat+5)^0,w,c
  7596   0031F6  124F               	iorwf	get_fat@wc^0,f,c
  7597   0031F8  5047               	movf	(??_get_fat+6)^0,w,c
  7598   0031FA  1250               	iorwf	(get_fat@wc+1)^0,f,c
  7599   0031FC                     
  7600                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
  7601   0031FC  B03D               	btfsc	get_fat@clst^0,0,c
  7602   0031FE  EF03  F019         	goto	u5011
  7603   003202  EF05  F019         	goto	u5010
  7604   003206                     u5011:
  7605   003206  EF0D  F019         	goto	l4139
  7606   00320A                     u5010:
  7607   00320A  0EFF               	movlw	255
  7608   00320C  144F               	andwf	get_fat@wc^0,w,c
  7609   00320E  6E49               	movwf	_get_fat$881^0,c
  7610   003210  0E0F               	movlw	15
  7611   003212  1450               	andwf	(get_fat@wc+1)^0,w,c
  7612   003214  6E4A               	movwf	(_get_fat$881+1)^0,c
  7613   003216  EF1D  F019         	goto	l4141
  7614   00321A                     l4139:
  7615   00321A  C04F  F041         	movff	get_fat@wc,??_get_fat
  7616   00321E  C050  F042         	movff	get_fat@wc+1,??_get_fat+1
  7617   003222  0E04               	movlw	4
  7618   003224  6E43               	movwf	(??_get_fat+2)^0,c
  7619   003226                     u5025:
  7620   003226  90D8               	bcf	status,0,c
  7621   003228  3242               	rrcf	(??_get_fat+1)^0,f,c
  7622   00322A  3241               	rrcf	??_get_fat^0,f,c
  7623   00322C  2E43               	decfsz	(??_get_fat+2)^0,f,c
  7624   00322E  EF13  F019         	goto	u5025
  7625   003232  C041  F049         	movff	??_get_fat,_get_fat$881
  7626   003236  C042  F04A         	movff	??_get_fat+1,_get_fat$881+1
  7627   00323A                     l4141:
  7628   00323A  C049  F04B         	movff	_get_fat$881,get_fat@val
  7629   00323E  C04A  F04C         	movff	_get_fat$881+1,get_fat@val+1
  7630   003242  6A4D               	clrf	(get_fat@val+2)^0,c
  7631   003244  6A4E               	clrf	(get_fat@val+3)^0,c
  7632                           
  7633                           ;ff.c: 842:    break;
  7634   003246  EF0F  F01A         	goto	l316
  7635   00324A                     l4143:
  7636                           
  7637                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
  7638   00324A  C03B  F030         	movff	get_fat@fs,move_window@fs
  7639   00324E  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
  7640   003252  EE20 F01E          	lfsr	2,30
  7641   003256  503B               	movf	get_fat@fs^0,w,c
  7642   003258  26D9               	addwf	fsr2l,f,c
  7643   00325A  503C               	movf	(get_fat@fs+1)^0,w,c
  7644   00325C  22DA               	addwfc	fsr2h,f,c
  7645   00325E  CFDE F041          	movff	postinc2,??_get_fat
  7646   003262  CFDE F042          	movff	postinc2,??_get_fat+1
  7647   003266  CFDE F043          	movff	postinc2,??_get_fat+2
  7648   00326A  CFDE F044          	movff	postinc2,??_get_fat+3
  7649   00326E  C03D  F045         	movff	get_fat@clst,??_get_fat+4
  7650   003272  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
  7651   003276  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
  7652   00327A  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
  7653   00327E  C046  F045         	movff	??_get_fat+5,??_get_fat+4
  7654   003282  C047  F046         	movff	??_get_fat+6,??_get_fat+5
  7655   003286  C048  F047         	movff	??_get_fat+7,??_get_fat+6
  7656   00328A  6A48               	clrf	(??_get_fat+7)^0,c
  7657   00328C  5041               	movf	??_get_fat^0,w,c
  7658   00328E  2445               	addwf	(??_get_fat+4)^0,w,c
  7659   003290  6E32               	movwf	move_window@sector^0,c
  7660   003292  5042               	movf	(??_get_fat+1)^0,w,c
  7661   003294  2046               	addwfc	(??_get_fat+5)^0,w,c
  7662   003296  6E33               	movwf	(move_window@sector+1)^0,c
  7663   003298  5043               	movf	(??_get_fat+2)^0,w,c
  7664   00329A  2047               	addwfc	(??_get_fat+6)^0,w,c
  7665   00329C  6E34               	movwf	(move_window@sector+2)^0,c
  7666   00329E  5044               	movf	(??_get_fat+3)^0,w,c
  7667   0032A0  2048               	addwfc	(??_get_fat+7)^0,w,c
  7668   0032A2  6E35               	movwf	(move_window@sector+3)^0,c
  7669   0032A4  ECE8  F02A         	call	_move_window	;wreg free
  7670   0032A8  0900               	iorlw	0
  7671   0032AA  B4D8               	btfsc	status,2,c
  7672   0032AC  EF5A  F019         	goto	u5031
  7673   0032B0  EF5C  F019         	goto	u5030
  7674   0032B4                     u5031:
  7675   0032B4  EF5E  F019         	goto	l4147
  7676   0032B8                     u5030:
  7677   0032B8  EF0F  F01A         	goto	l316
  7678   0032BC                     l4147:
  7679                           
  7680                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
  7681   0032BC  C03D  F041         	movff	get_fat@clst,??_get_fat
  7682   0032C0  C03E  F042         	movff	get_fat@clst+1,??_get_fat+1
  7683   0032C4  90D8               	bcf	status,0,c
  7684   0032C6  3641               	rlcf	??_get_fat^0,f,c
  7685   0032C8  3642               	rlcf	(??_get_fat+1)^0,f,c
  7686   0032CA  0EFF               	movlw	255
  7687   0032CC  1441               	andwf	??_get_fat^0,w,c
  7688   0032CE  6E43               	movwf	(??_get_fat+2)^0,c
  7689   0032D0  0E01               	movlw	1
  7690   0032D2  1442               	andwf	(??_get_fat+1)^0,w,c
  7691   0032D4  6E44               	movwf	(??_get_fat+3)^0,c
  7692   0032D6  5043               	movf	(??_get_fat+2)^0,w,c
  7693   0032D8  243B               	addwf	get_fat@fs^0,w,c
  7694   0032DA  6E45               	movwf	(??_get_fat+4)^0,c
  7695   0032DC  5044               	movf	(??_get_fat+3)^0,w,c
  7696   0032DE  203C               	addwfc	(get_fat@fs+1)^0,w,c
  7697   0032E0  6E46               	movwf	(??_get_fat+5)^0,c
  7698   0032E2  0E2E               	movlw	46
  7699   0032E4  2445               	addwf	(??_get_fat+4)^0,w,c
  7700   0032E6  6E51               	movwf	get_fat@p^0,c
  7701   0032E8  0E00               	movlw	0
  7702   0032EA  2046               	addwfc	(??_get_fat+5)^0,w,c
  7703   0032EC  6E52               	movwf	(get_fat@p+1)^0,c
  7704   0032EE                     
  7705                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
  7706   0032EE  C051  FFD9         	movff	get_fat@p,fsr2l
  7707   0032F2  C052  FFDA         	movff	get_fat@p+1,fsr2h
  7708   0032F6  CFDE F041          	movff	postinc2,??_get_fat
  7709   0032FA  CFDD F042          	movff	postdec2,??_get_fat+1
  7710   0032FE  C041  F04B         	movff	??_get_fat,get_fat@val
  7711   003302  C042  F04C         	movff	??_get_fat+1,get_fat@val+1
  7712   003306  6A4D               	clrf	(get_fat@val+2)^0,c
  7713   003308  6A4E               	clrf	(get_fat@val+3)^0,c
  7714                           
  7715                           ;ff.c: 848:    break;
  7716   00330A  EF0F  F01A         	goto	l316
  7717   00330E                     l4151:
  7718                           
  7719                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
  7720   00330E  C03B  F030         	movff	get_fat@fs,move_window@fs
  7721   003312  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
  7722   003316  EE20 F01E          	lfsr	2,30
  7723   00331A  503B               	movf	get_fat@fs^0,w,c
  7724   00331C  26D9               	addwf	fsr2l,f,c
  7725   00331E  503C               	movf	(get_fat@fs+1)^0,w,c
  7726   003320  22DA               	addwfc	fsr2h,f,c
  7727   003322  CFDE F041          	movff	postinc2,??_get_fat
  7728   003326  CFDE F042          	movff	postinc2,??_get_fat+1
  7729   00332A  CFDE F043          	movff	postinc2,??_get_fat+2
  7730   00332E  CFDE F044          	movff	postinc2,??_get_fat+3
  7731   003332  C03D  F045         	movff	get_fat@clst,??_get_fat+4
  7732   003336  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
  7733   00333A  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
  7734   00333E  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
  7735   003342  0E08               	movlw	8
  7736   003344  EFA9  F019         	goto	u5040
  7737   003348                     u5045:
  7738   003348  90D8               	bcf	status,0,c
  7739   00334A  3248               	rrcf	(??_get_fat+7)^0,f,c
  7740   00334C  3247               	rrcf	(??_get_fat+6)^0,f,c
  7741   00334E  3246               	rrcf	(??_get_fat+5)^0,f,c
  7742   003350  3245               	rrcf	(??_get_fat+4)^0,f,c
  7743   003352                     u5040:
  7744   003352  2EE8               	decfsz	wreg,f,c
  7745   003354  EFA4  F019         	goto	u5045
  7746   003358  5041               	movf	??_get_fat^0,w,c
  7747   00335A  2445               	addwf	(??_get_fat+4)^0,w,c
  7748   00335C  6E32               	movwf	move_window@sector^0,c
  7749   00335E  5042               	movf	(??_get_fat+1)^0,w,c
  7750   003360  2046               	addwfc	(??_get_fat+5)^0,w,c
  7751   003362  6E33               	movwf	(move_window@sector+1)^0,c
  7752   003364  5043               	movf	(??_get_fat+2)^0,w,c
  7753   003366  2047               	addwfc	(??_get_fat+6)^0,w,c
  7754   003368  6E34               	movwf	(move_window@sector+2)^0,c
  7755   00336A  5044               	movf	(??_get_fat+3)^0,w,c
  7756   00336C  2048               	addwfc	(??_get_fat+7)^0,w,c
  7757   00336E  6E35               	movwf	(move_window@sector+3)^0,c
  7758   003370  ECE8  F02A         	call	_move_window	;wreg free
  7759   003374  0900               	iorlw	0
  7760   003376  B4D8               	btfsc	status,2,c
  7761   003378  EFC0  F019         	goto	u5051
  7762   00337C  EFC2  F019         	goto	u5050
  7763   003380                     u5051:
  7764   003380  EFC4  F019         	goto	l4155
  7765   003384                     u5050:
  7766   003384  EF0F  F01A         	goto	l316
  7767   003388                     l4155:
  7768                           
  7769                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
  7770   003388  C03D  F041         	movff	get_fat@clst,??_get_fat
  7771   00338C  C03E  F042         	movff	get_fat@clst+1,??_get_fat+1
  7772   003390  90D8               	bcf	status,0,c
  7773   003392  3641               	rlcf	??_get_fat^0,f,c
  7774   003394  3642               	rlcf	(??_get_fat+1)^0,f,c
  7775   003396  90D8               	bcf	status,0,c
  7776   003398  3641               	rlcf	??_get_fat^0,f,c
  7777   00339A  3642               	rlcf	(??_get_fat+1)^0,f,c
  7778   00339C  0EFF               	movlw	255
  7779   00339E  1441               	andwf	??_get_fat^0,w,c
  7780   0033A0  6E43               	movwf	(??_get_fat+2)^0,c
  7781   0033A2  0E01               	movlw	1
  7782   0033A4  1442               	andwf	(??_get_fat+1)^0,w,c
  7783   0033A6  6E44               	movwf	(??_get_fat+3)^0,c
  7784   0033A8  5043               	movf	(??_get_fat+2)^0,w,c
  7785   0033AA  243B               	addwf	get_fat@fs^0,w,c
  7786   0033AC  6E45               	movwf	(??_get_fat+4)^0,c
  7787   0033AE  5044               	movf	(??_get_fat+3)^0,w,c
  7788   0033B0  203C               	addwfc	(get_fat@fs+1)^0,w,c
  7789   0033B2  6E46               	movwf	(??_get_fat+5)^0,c
  7790   0033B4  0E2E               	movlw	46
  7791   0033B6  2445               	addwf	(??_get_fat+4)^0,w,c
  7792   0033B8  6E51               	movwf	get_fat@p^0,c
  7793   0033BA  0E00               	movlw	0
  7794   0033BC  2046               	addwfc	(??_get_fat+5)^0,w,c
  7795   0033BE  6E52               	movwf	(get_fat@p+1)^0,c
  7796   0033C0                     
  7797                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
  7798   0033C0  C051  FFD9         	movff	get_fat@p,fsr2l
  7799   0033C4  C052  FFDA         	movff	get_fat@p+1,fsr2h
  7800   0033C8  0EFF               	movlw	255
  7801   0033CA  14DE               	andwf	postinc2,w,c
  7802   0033CC  6E4B               	movwf	get_fat@val^0,c
  7803   0033CE  0EFF               	movlw	255
  7804   0033D0  14DE               	andwf	postinc2,w,c
  7805   0033D2  6E4C               	movwf	(get_fat@val+1)^0,c
  7806   0033D4  0EFF               	movlw	255
  7807   0033D6  14DE               	andwf	postinc2,w,c
  7808   0033D8  6E4D               	movwf	(get_fat@val+2)^0,c
  7809   0033DA  0E0F               	movlw	15
  7810   0033DC  14DE               	andwf	postinc2,w,c
  7811   0033DE  6E4E               	movwf	(get_fat@val+3)^0,c
  7812                           
  7813                           ;ff.c: 854:    break;
  7814   0033E0  EF0F  F01A         	goto	l316
  7815   0033E4                     l4161:
  7816   0033E4  C03B  FFD9         	movff	get_fat@fs,fsr2l
  7817   0033E8  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
  7818   0033EC  50DF               	movf	indf2,w,c
  7819   0033EE  6E41               	movwf	??_get_fat^0,c
  7820   0033F0  6A42               	clrf	(??_get_fat+1)^0,c
  7821                           
  7822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7823                           ; Switch size 1, requested type "simple"
  7824                           ; Number of cases is 1, Range of values is 0 to 0
  7825                           ; switch strategies available:
  7826                           ; Name         Instructions Cycles
  7827                           ; simple_byte            4     3 (average)
  7828                           ;	Chosen strategy is simple_byte
  7829   0033F2  5042               	movf	(??_get_fat+1)^0,w,c
  7830   0033F4  0A00               	xorlw	0	; case 0
  7831   0033F6  B4D8               	btfsc	status,2,c
  7832   0033F8  EF00  F01A         	goto	l6183
  7833   0033FC  EF41  F018         	goto	l4117
  7834   003400                     l6183:
  7835                           
  7836                           ; Switch size 1, requested type "simple"
  7837                           ; Number of cases is 3, Range of values is 1 to 3
  7838                           ; switch strategies available:
  7839                           ; Name         Instructions Cycles
  7840                           ; simple_byte           10     6 (average)
  7841                           ;	Chosen strategy is simple_byte
  7842   003400  5041               	movf	??_get_fat^0,w,c
  7843   003402  0A01               	xorlw	1	; case 1
  7844   003404  B4D8               	btfsc	status,2,c
  7845   003406  EF51  F018         	goto	l318
  7846   00340A  0A03               	xorlw	3	; case 2
  7847   00340C  B4D8               	btfsc	status,2,c
  7848   00340E  EF25  F019         	goto	l4143
  7849   003412  0A01               	xorlw	1	; case 3
  7850   003414  B4D8               	btfsc	status,2,c
  7851   003416  EF87  F019         	goto	l4151
  7852   00341A  EF41  F018         	goto	l4117
  7853   00341E                     l316:
  7854                           
  7855                           ;ff.c: 861:  return val;
  7856   00341E  C04B  F03B         	movff	get_fat@val,?_get_fat
  7857   003422  C04C  F03C         	movff	get_fat@val+1,?_get_fat+1
  7858   003426  C04D  F03D         	movff	get_fat@val+2,?_get_fat+2
  7859   00342A  C04E  F03E         	movff	get_fat@val+3,?_get_fat+3
  7860   00342E  0012               	return		;funcret
  7861   003430                     __end_of_get_fat:
  7862                           	callstack 0
  7863                           
  7864 ;; *************** function _clust2sect *****************
  7865 ;; Defined at:
  7866 ;;		line 800 in file "ff.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  fs              2   12[COMRAM] PTR struct .
  7869 ;;		 -> NULL(0), FatFs(558), 
  7870 ;;  clst            4   14[COMRAM] unsigned long 
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;		None
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  4   12[COMRAM] unsigned long 
  7875 ;; Registers used:
  7876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7882 ;;      Params:         6       0       0       0       0       0       0       0       0
  7883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7884 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7885 ;;      Totals:        11       0       0       0       0       0       0       0       0
  7886 ;;Total ram usage:       11 bytes
  7887 ;; Hardware stack levels used: 1
  7888 ;; Hardware stack levels required when called: 1
  7889 ;; This function calls:
  7890 ;;		___lmul
  7891 ;; This function is called by:
  7892 ;;		_dir_sdi
  7893 ;;		_dir_next
  7894 ;;		_f_write
  7895 ;;		_f_read
  7896 ;;		_f_lseek
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text18
  7901   00550A                     __ptext18:
  7902                           	callstack 0
  7903   00550A                     _clust2sect:
  7904                           	callstack 28
  7905   00550A                     
  7906                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
  7907   00550A  0E02               	movlw	2
  7908   00550C  5E0F               	subwf	clust2sect@clst^0,f,c
  7909   00550E  0E00               	movlw	0
  7910   005510  5A10               	subwfb	(clust2sect@clst+1)^0,f,c
  7911   005512  5A11               	subwfb	(clust2sect@clst+2)^0,f,c
  7912   005514  5A12               	subwfb	(clust2sect@clst+3)^0,f,c
  7913   005516                     
  7914                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
  7915   005516  EE20 F012          	lfsr	2,18
  7916   00551A  500D               	movf	clust2sect@fs^0,w,c
  7917   00551C  26D9               	addwf	fsr2l,f,c
  7918   00551E  500E               	movf	(clust2sect@fs+1)^0,w,c
  7919   005520  22DA               	addwfc	fsr2h,f,c
  7920   005522  0EFE               	movlw	254
  7921   005524  24DE               	addwf	postinc2,w,c
  7922   005526  6E13               	movwf	??_clust2sect^0,c
  7923   005528  0EFF               	movlw	255
  7924   00552A  20DE               	addwfc	postinc2,w,c
  7925   00552C  6E14               	movwf	(??_clust2sect+1)^0,c
  7926   00552E  0EFF               	movlw	255
  7927   005530  20DE               	addwfc	postinc2,w,c
  7928   005532  6E15               	movwf	(??_clust2sect+2)^0,c
  7929   005534  0EFF               	movlw	255
  7930   005536  20DE               	addwfc	postinc2,w,c
  7931   005538  6E16               	movwf	(??_clust2sect+3)^0,c
  7932   00553A  5013               	movf	??_clust2sect^0,w,c
  7933   00553C  5C0F               	subwf	clust2sect@clst^0,w,c
  7934   00553E  5014               	movf	(??_clust2sect+1)^0,w,c
  7935   005540  5810               	subwfb	(clust2sect@clst+1)^0,w,c
  7936   005542  5015               	movf	(??_clust2sect+2)^0,w,c
  7937   005544  5811               	subwfb	(clust2sect@clst+2)^0,w,c
  7938   005546  5016               	movf	(??_clust2sect+3)^0,w,c
  7939   005548  5812               	subwfb	(clust2sect@clst+3)^0,w,c
  7940   00554A  A0D8               	btfss	status,0,c
  7941   00554C  EFAA  F02A         	goto	u5211
  7942   005550  EFAC  F02A         	goto	u5210
  7943   005554                     u5211:
  7944   005554  EFB6  F02A         	goto	l4271
  7945   005558                     u5210:
  7946   005558  0E00               	movlw	0
  7947   00555A  6E0D               	movwf	?_clust2sect^0,c
  7948   00555C  0E00               	movlw	0
  7949   00555E  6E0E               	movwf	(?_clust2sect+1)^0,c
  7950   005560  0E00               	movlw	0
  7951   005562  6E0F               	movwf	(?_clust2sect+2)^0,c
  7952   005564  0E00               	movlw	0
  7953   005566  6E10               	movwf	(?_clust2sect+3)^0,c
  7954   005568  EFE7  F02A         	goto	l310
  7955   00556C                     l4271:
  7956                           
  7957                           ;ff.c: 807:  return clst * fs->csize + fs->database;
  7958   00556C  EE20 F026          	lfsr	2,38
  7959   005570  500D               	movf	clust2sect@fs^0,w,c
  7960   005572  26D9               	addwf	fsr2l,f,c
  7961   005574  500E               	movf	(clust2sect@fs+1)^0,w,c
  7962   005576  22DA               	addwfc	fsr2h,f,c
  7963   005578  CFDE F013          	movff	postinc2,??_clust2sect
  7964   00557C  CFDE F014          	movff	postinc2,??_clust2sect+1
  7965   005580  CFDE F015          	movff	postinc2,??_clust2sect+2
  7966   005584  CFDE F016          	movff	postinc2,??_clust2sect+3
  7967   005588  EE20 F002          	lfsr	2,2
  7968   00558C  500D               	movf	clust2sect@fs^0,w,c
  7969   00558E  26D9               	addwf	fsr2l,f,c
  7970   005590  500E               	movf	(clust2sect@fs+1)^0,w,c
  7971   005592  22DA               	addwfc	fsr2h,f,c
  7972   005594  50DF               	movf	indf2,w,c
  7973   005596  6E17               	movwf	(??_clust2sect+4)^0,c
  7974   005598  5017               	movf	(??_clust2sect+4)^0,w,c
  7975   00559A  6E01               	movwf	___lmul@multiplier^0,c
  7976   00559C  6A02               	clrf	(___lmul@multiplier+1)^0,c
  7977   00559E  6A03               	clrf	(___lmul@multiplier+2)^0,c
  7978   0055A0  6A04               	clrf	(___lmul@multiplier+3)^0,c
  7979   0055A2  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
  7980   0055A6  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  7981   0055AA  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  7982   0055AE  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  7983   0055B2  EC6B  F02D         	call	___lmul	;wreg free
  7984   0055B6  5013               	movf	??_clust2sect^0,w,c
  7985   0055B8  2401               	addwf	?___lmul^0,w,c
  7986   0055BA  6E0D               	movwf	?_clust2sect^0,c
  7987   0055BC  5014               	movf	(??_clust2sect+1)^0,w,c
  7988   0055BE  2002               	addwfc	(?___lmul+1)^0,w,c
  7989   0055C0  6E0E               	movwf	(?_clust2sect+1)^0,c
  7990   0055C2  5015               	movf	(??_clust2sect+2)^0,w,c
  7991   0055C4  2003               	addwfc	(?___lmul+2)^0,w,c
  7992   0055C6  6E0F               	movwf	(?_clust2sect+2)^0,c
  7993   0055C8  5016               	movf	(??_clust2sect+3)^0,w,c
  7994   0055CA  2004               	addwfc	(?___lmul+3)^0,w,c
  7995   0055CC  6E10               	movwf	(?_clust2sect+3)^0,c
  7996   0055CE                     l310:
  7997   0055CE  0012               	return		;funcret
  7998   0055D0                     __end_of_clust2sect:
  7999                           	callstack 0
  8000                           
  8001 ;; *************** function _f_mount *****************
  8002 ;; Defined at:
  8003 ;;		line 2402 in file "ff.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  fs              2   81[COMRAM] PTR struct .
  8006 ;;		 -> NULL(0), FatFs(558), 
  8007 ;;  path            2   83[COMRAM] PTR const unsigned char 
  8008 ;;		 -> STR_2(9), STR_1(1), 
  8009 ;;  opt             1   85[COMRAM] unsigned char 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  vol             2   91[COMRAM] int 
  8012 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  8013 ;;		 -> STR_2(9), STR_1(1), 
  8014 ;;  cfs             2   87[COMRAM] PTR struct .
  8015 ;;		 -> NULL(0), FatFs(558), 
  8016 ;;  res             1   86[COMRAM] enum E95
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  1    wreg      enum E3587
  8019 ;; Registers used:
  8020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8026 ;;      Params:         5       0       0       0       0       0       0       0       0
  8027 ;;      Locals:         7       0       0       0       0       0       0       0       0
  8028 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8029 ;;      Totals:        12       0       0       0       0       0       0       0       0
  8030 ;;Total ram usage:       12 bytes
  8031 ;; Hardware stack levels used: 1
  8032 ;; Hardware stack levels required when called: 10
  8033 ;; This function calls:
  8034 ;;		_find_volume
  8035 ;;		_get_ldnumber
  8036 ;; This function is called by:
  8037 ;;		_main
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text19
  8042   00528E                     __ptext19:
  8043                           	callstack 0
  8044   00528E                     _f_mount:
  8045                           	callstack 20
  8046   00528E                     
  8047                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  8048   00528E  C054  F05A         	movff	f_mount@path,f_mount@rp
  8049   005292  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  8050   005296                     
  8051                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  8052   005296  0E5A               	movlw	low f_mount@rp
  8053   005298  6E01               	movwf	get_ldnumber@path^0,c
  8054   00529A  0E00               	movlw	high f_mount@rp
  8055   00529C  6E02               	movwf	(get_ldnumber@path+1)^0,c
  8056   00529E  ECAE  F027         	call	_get_ldnumber	;wreg free
  8057   0052A2  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  8058   0052A6  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  8059   0052AA                     
  8060                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  8061   0052AA  BE5D               	btfsc	(f_mount@vol+1)^0,7,c
  8062   0052AC  EF5C  F029         	goto	u7640
  8063   0052B0  EF5A  F029         	goto	u7641
  8064   0052B4                     u7641:
  8065   0052B4  EF5F  F029         	goto	l5599
  8066   0052B8                     u7640:
  8067   0052B8  0E0B               	movlw	11
  8068   0052BA  EFB7  F029         	goto	l626
  8069   0052BE                     l5599:
  8070                           
  8071                           ;ff.c: 2416:  cfs = FatFs[vol];
  8072   0052BE  90D8               	bcf	status,0,c
  8073   0052C0  345C               	rlcf	f_mount@vol^0,w,c
  8074   0052C2  6ED9               	movwf	fsr2l,c
  8075   0052C4  345D               	rlcf	(f_mount@vol+1)^0,w,c
  8076   0052C6  6EDA               	movwf	fsr2h,c
  8077   0052C8  0ED4               	movlw	low _FatFs@ff$F740
  8078   0052CA  26D9               	addwf	fsr2l,f,c
  8079   0052CC  0E00               	movlw	high _FatFs@ff$F740
  8080   0052CE  22DA               	addwfc	fsr2h,f,c
  8081   0052D0  CFDE F058          	movff	postinc2,f_mount@cfs
  8082   0052D4  CFDD F059          	movff	postdec2,f_mount@cfs+1
  8083   0052D8                     
  8084                           ;ff.c: 2418:  if (cfs) {
  8085   0052D8  5058               	movf	f_mount@cfs^0,w,c
  8086   0052DA  1059               	iorwf	(f_mount@cfs+1)^0,w,c
  8087   0052DC  B4D8               	btfsc	status,2,c
  8088   0052DE  EF73  F029         	goto	u7651
  8089   0052E2  EF75  F029         	goto	u7650
  8090   0052E6                     u7651:
  8091   0052E6  EF7A  F029         	goto	l5605
  8092   0052EA                     u7650:
  8093   0052EA                     
  8094                           ;ff.c: 2425:   cfs->fs_type = 0;
  8095   0052EA  C058  FFD9         	movff	f_mount@cfs,fsr2l
  8096   0052EE  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  8097   0052F2  6ADF               	clrf	indf2,c
  8098   0052F4                     l5605:
  8099                           
  8100                           ;ff.c: 2428:  if (fs) {
  8101   0052F4  5052               	movf	f_mount@fs^0,w,c
  8102   0052F6  1053               	iorwf	(f_mount@fs+1)^0,w,c
  8103   0052F8  B4D8               	btfsc	status,2,c
  8104   0052FA  EF81  F029         	goto	u7661
  8105   0052FE  EF83  F029         	goto	u7660
  8106   005302                     u7661:
  8107   005302  EF88  F029         	goto	l5609
  8108   005306                     u7660:
  8109   005306                     
  8110                           ;ff.c: 2429:   fs->fs_type = 0;
  8111   005306  C052  FFD9         	movff	f_mount@fs,fsr2l
  8112   00530A  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  8113   00530E  6ADF               	clrf	indf2,c
  8114   005310                     l5609:
  8115                           
  8116                           ;ff.c: 2434:  FatFs[vol] = fs;
  8117   005310  90D8               	bcf	status,0,c
  8118   005312  345C               	rlcf	f_mount@vol^0,w,c
  8119   005314  6ED9               	movwf	fsr2l,c
  8120   005316  345D               	rlcf	(f_mount@vol+1)^0,w,c
  8121   005318  6EDA               	movwf	fsr2h,c
  8122   00531A  0ED4               	movlw	low _FatFs@ff$F740
  8123   00531C  26D9               	addwf	fsr2l,f,c
  8124   00531E  0E00               	movlw	high _FatFs@ff$F740
  8125   005320  22DA               	addwfc	fsr2h,f,c
  8126   005322  C052  FFDE         	movff	f_mount@fs,postinc2
  8127   005326  C053  FFDD         	movff	f_mount@fs+1,postdec2
  8128                           
  8129                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  8130   00532A  5052               	movf	f_mount@fs^0,w,c
  8131   00532C  1053               	iorwf	(f_mount@fs+1)^0,w,c
  8132   00532E  B4D8               	btfsc	status,2,c
  8133   005330  EF9C  F029         	goto	u7671
  8134   005334  EF9E  F029         	goto	u7670
  8135   005338                     u7671:
  8136   005338  EFA6  F029         	goto	l5613
  8137   00533C                     u7670:
  8138   00533C  0456               	decf	f_mount@opt^0,w,c
  8139   00533E  B4D8               	btfsc	status,2,c
  8140   005340  EFA4  F029         	goto	u7681
  8141   005344  EFA6  F029         	goto	u7680
  8142   005348                     u7681:
  8143   005348  EFA9  F029         	goto	l5617
  8144   00534C                     u7680:
  8145   00534C                     l5613:
  8146   00534C  0E00               	movlw	0
  8147   00534E  EFB7  F029         	goto	l626
  8148   005352                     l5617:
  8149                           
  8150                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  8151   005352  0E52               	movlw	low f_mount@fs
  8152   005354  6E45               	movwf	find_volume@rfs^0,c
  8153   005356  0E00               	movlw	high f_mount@fs
  8154   005358  6E46               	movwf	(find_volume@rfs+1)^0,c
  8155   00535A  0E54               	movlw	low f_mount@path
  8156   00535C  6E47               	movwf	find_volume@path^0,c
  8157   00535E  0E00               	movlw	high f_mount@path
  8158   005360  6E48               	movwf	(find_volume@path+1)^0,c
  8159   005362  0E00               	movlw	0
  8160   005364  6E49               	movwf	find_volume@wmode^0,c
  8161   005366  EC1A  F004         	call	_find_volume	;wreg free
  8162   00536A  6E57               	movwf	f_mount@res^0,c
  8163   00536C                     
  8164                           ;ff.c: 2439:  return res;
  8165   00536C  5057               	movf	f_mount@res^0,w,c
  8166   00536E                     l626:
  8167   00536E  0012               	return		;funcret
  8168   005370                     __end_of_f_mount:
  8169                           	callstack 0
  8170                           
  8171 ;; *************** function _find_volume *****************
  8172 ;; Defined at:
  8173 ;;		line 2203 in file "ff.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  8176 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  8177 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  8178 ;;		 -> f_open@path(2), f_mount@path(2), 
  8179 ;;  wmode           1   72[COMRAM] unsigned char 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  br             16    0[BANK0 ] unsigned long [4]
  8182 ;;  bsect           4   49[BANK0 ] unsigned long 
  8183 ;;  fasize          4   45[BANK0 ] unsigned long 
  8184 ;;  nclst           4   40[BANK0 ] unsigned long 
  8185 ;;  tsect           4   36[BANK0 ] unsigned long 
  8186 ;;  sysect          4   28[BANK0 ] unsigned long 
  8187 ;;  szbfat          4   22[BANK0 ] unsigned long 
  8188 ;;  fs              2   56[BANK0 ] PTR struct .
  8189 ;;		 -> NULL(0), FatFs(558), 
  8190 ;;  i               2   53[BANK0 ] unsigned short 
  8191 ;;  nrsv            2   34[BANK0 ] unsigned short 
  8192 ;;  vol             2   32[BANK0 ] int 
  8193 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  8194 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  8195 ;;  fmt             1   55[BANK0 ] unsigned char 
  8196 ;;  stat            1   44[BANK0 ] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      enum E95
  8199 ;; Registers used:
  8200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8206 ;;      Params:         5       0       0       0       0       0       0       0       0
  8207 ;;      Locals:         0      58       0       0       0       0       0       0       0
  8208 ;;      Temps:          8       0       0       0       0       0       0       0       0
  8209 ;;      Totals:        13      58       0       0       0       0       0       0       0
  8210 ;;Total ram usage:       71 bytes
  8211 ;; Hardware stack levels used: 1
  8212 ;; Hardware stack levels required when called: 9
  8213 ;; This function calls:
  8214 ;;		___lldiv
  8215 ;;		___lmul
  8216 ;;		_check_fs
  8217 ;;		_disk_initialize
  8218 ;;		_disk_status
  8219 ;;		_get_ldnumber
  8220 ;;		_move_window
  8221 ;; This function is called by:
  8222 ;;		_f_mount
  8223 ;;		_f_open
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text20
  8228   000834                     __ptext20:
  8229                           	callstack 0
  8230   000834                     _find_volume:
  8231                           	callstack 20
  8232   000834                     
  8233                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  8234   000834  C045  FFD9         	movff	find_volume@rfs,fsr2l
  8235   000838  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  8236   00083C  6ADE               	clrf	postinc2,c
  8237   00083E  6ADD               	clrf	postdec2,c
  8238   000840                     
  8239                           ;ff.c: 2220:  vol = get_ldnumber(path);
  8240   000840  C047  F001         	movff	find_volume@path,get_ldnumber@path
  8241   000844  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  8242   000848  ECAE  F027         	call	_get_ldnumber	;wreg free
  8243   00084C  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  8244   000850  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  8245   000854                     
  8246                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  8247   000854  0100               	movlb	0	; () banked
  8248   000856  BF81               	btfsc	(find_volume@vol+1)& (0+255),7,b
  8249   000858  EF32  F004         	goto	u7160
  8250   00085C  EF30  F004         	goto	u7161
  8251   000860                     u7161:
  8252   000860  EF35  F004         	goto	l5305
  8253   000864                     u7160:
  8254   000864                     
  8255                           ; BSR set to: 0
  8256   000864  0E0B               	movlw	11
  8257   000866  EFE6  F009         	goto	l566
  8258   00086A                     l5305:
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;ff.c: 2224:  fs = FatFs[vol];
  8262   00086A  90D8               	bcf	status,0,c
  8263   00086C  3580               	rlcf	find_volume@vol& (0+255),w,b
  8264   00086E  6ED9               	movwf	fsr2l,c
  8265   000870  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  8266   000872  6EDA               	movwf	fsr2h,c
  8267   000874  0ED4               	movlw	low _FatFs@ff$F740
  8268   000876  26D9               	addwf	fsr2l,f,c
  8269   000878  0E00               	movlw	high _FatFs@ff$F740
  8270   00087A  22DA               	addwfc	fsr2h,f,c
  8271   00087C  CFDE F098          	movff	postinc2,find_volume@fs
  8272   000880  CFDD F099          	movff	postdec2,find_volume@fs+1
  8273   000884                     
  8274                           ; BSR set to: 0
  8275                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  8276   000884  5198               	movf	find_volume@fs& (0+255),w,b
  8277   000886  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  8278   000888  A4D8               	btfss	status,2,c
  8279   00088A  EF49  F004         	goto	u7171
  8280   00088E  EF4B  F004         	goto	u7170
  8281   000892                     u7171:
  8282   000892  EF4E  F004         	goto	l5313
  8283   000896                     u7170:
  8284   000896                     
  8285                           ; BSR set to: 0
  8286   000896  0E0C               	movlw	12
  8287   000898  EFE6  F009         	goto	l566
  8288   00089C                     l5313:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;ff.c: 2228:  *rfs = fs;
  8292   00089C  C045  FFD9         	movff	find_volume@rfs,fsr2l
  8293   0008A0  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  8294   0008A4  C098  FFDE         	movff	find_volume@fs,postinc2
  8295   0008A8  C099  FFDD         	movff	find_volume@fs+1,postdec2
  8296   0008AC                     
  8297                           ; BSR set to: 0
  8298                           ;ff.c: 2230:  if (fs->fs_type) {
  8299   0008AC  C098  FFD9         	movff	find_volume@fs,fsr2l
  8300   0008B0  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8301   0008B4  50DF               	movf	indf2,w,c
  8302   0008B6  B4D8               	btfsc	status,2,c
  8303   0008B8  EF60  F004         	goto	u7181
  8304   0008BC  EF62  F004         	goto	u7180
  8305   0008C0                     u7181:
  8306   0008C0  EF89  F004         	goto	l5333
  8307   0008C4                     u7180:
  8308   0008C4                     
  8309                           ; BSR set to: 0
  8310                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  8311   0008C4  EE20 F001          	lfsr	2,1
  8312   0008C8  5198               	movf	find_volume@fs& (0+255),w,b
  8313   0008CA  26D9               	addwf	fsr2l,f,c
  8314   0008CC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8315   0008CE  22DA               	addwfc	fsr2h,f,c
  8316   0008D0  50DF               	movf	indf2,w,c
  8317   0008D2  ECDA  F02E         	call	_disk_status
  8318   0008D6  0100               	movlb	0	; () banked
  8319   0008D8  6F8C               	movwf	find_volume@stat& (0+255),b
  8320   0008DA                     
  8321                           ; BSR set to: 0
  8322                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  8323   0008DA  B18C               	btfsc	find_volume@stat& (0+255),0,b
  8324   0008DC  EF72  F004         	goto	u7191
  8325   0008E0  EF74  F004         	goto	u7190
  8326   0008E4                     u7191:
  8327   0008E4  EF89  F004         	goto	l5333
  8328   0008E8                     u7190:
  8329   0008E8                     
  8330                           ; BSR set to: 0
  8331   0008E8  5049               	movf	find_volume@wmode^0,w,c
  8332   0008EA  B4D8               	btfsc	status,2,c
  8333   0008EC  EF7A  F004         	goto	u7201
  8334   0008F0  EF7C  F004         	goto	u7200
  8335   0008F4                     u7201:
  8336   0008F4  EF86  F004         	goto	l5329
  8337   0008F8                     u7200:
  8338   0008F8                     
  8339                           ; BSR set to: 0
  8340   0008F8  A58C               	btfss	find_volume@stat& (0+255),2,b
  8341   0008FA  EF81  F004         	goto	u7211
  8342   0008FE  EF83  F004         	goto	u7210
  8343   000902                     u7211:
  8344   000902  EF86  F004         	goto	l5329
  8345   000906                     u7210:
  8346   000906                     l5325:
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  8350   000906  0E0A               	movlw	10
  8351   000908  EFE6  F009         	goto	l566
  8352   00090C                     l5329:
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;ff.c: 2235:    return FR_OK;
  8356   00090C  0E00               	movlw	0
  8357   00090E  EFE6  F009         	goto	l566
  8358   000912                     l5333:
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;ff.c: 2242:  fs->fs_type = 0;
  8362   000912  C098  FFD9         	movff	find_volume@fs,fsr2l
  8363   000916  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8364   00091A  6ADF               	clrf	indf2,c
  8365   00091C                     
  8366                           ; BSR set to: 0
  8367                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  8368   00091C  EE20 F001          	lfsr	2,1
  8369   000920  5198               	movf	find_volume@fs& (0+255),w,b
  8370   000922  26D9               	addwf	fsr2l,f,c
  8371   000924  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8372   000926  22DA               	addwfc	fsr2h,f,c
  8373   000928  C080  FFDF         	movff	find_volume@vol,indf2
  8374   00092C                     
  8375                           ; BSR set to: 0
  8376                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  8377   00092C  EE20 F001          	lfsr	2,1
  8378   000930  5198               	movf	find_volume@fs& (0+255),w,b
  8379   000932  26D9               	addwf	fsr2l,f,c
  8380   000934  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8381   000936  22DA               	addwfc	fsr2h,f,c
  8382   000938  50DF               	movf	indf2,w,c
  8383   00093A  EC83  F01F         	call	_disk_initialize
  8384   00093E  0100               	movlb	0	; () banked
  8385   000940  6F8C               	movwf	find_volume@stat& (0+255),b
  8386   000942                     
  8387                           ; BSR set to: 0
  8388                           ;ff.c: 2245:  if (stat & 0x01)
  8389   000942  A18C               	btfss	find_volume@stat& (0+255),0,b
  8390   000944  EFA6  F004         	goto	u7221
  8391   000948  EFA8  F004         	goto	u7220
  8392   00094C                     u7221:
  8393   00094C  EFAB  F004         	goto	l5345
  8394   000950                     u7220:
  8395   000950                     
  8396                           ; BSR set to: 0
  8397                           ;ff.c: 2246:   return FR_NOT_READY;
  8398   000950  0E03               	movlw	3
  8399   000952  EFE6  F009         	goto	l566
  8400   000956                     l5345:
  8401                           
  8402                           ; BSR set to: 0
  8403   000956  5049               	movf	find_volume@wmode^0,w,c
  8404   000958  B4D8               	btfsc	status,2,c
  8405   00095A  EFB1  F004         	goto	u7231
  8406   00095E  EFB3  F004         	goto	u7230
  8407   000962                     u7231:
  8408   000962  EFBC  F004         	goto	l5353
  8409   000966                     u7230:
  8410   000966                     
  8411                           ; BSR set to: 0
  8412   000966  A58C               	btfss	find_volume@stat& (0+255),2,b
  8413   000968  EFB8  F004         	goto	u7241
  8414   00096C  EFBA  F004         	goto	u7240
  8415   000970                     u7241:
  8416   000970  EFBC  F004         	goto	l5353
  8417   000974                     u7240:
  8418   000974  EF83  F004         	goto	l5325
  8419   000978                     l5353:
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;ff.c: 2254:  bsect = 0;
  8423   000978  0E00               	movlw	0
  8424   00097A  6F91               	movwf	find_volume@bsect& (0+255),b
  8425   00097C  0E00               	movlw	0
  8426   00097E  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  8427   000980  0E00               	movlw	0
  8428   000982  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  8429   000984  0E00               	movlw	0
  8430   000986  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  8431   000988                     
  8432                           ; BSR set to: 0
  8433                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  8434   000988  C098  F03B         	movff	find_volume@fs,check_fs@fs
  8435   00098C  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  8436   000990  0E00               	movlw	0
  8437   000992  6E3D               	movwf	check_fs@sect^0,c
  8438   000994  0E00               	movlw	0
  8439   000996  6E3E               	movwf	(check_fs@sect+1)^0,c
  8440   000998  0E00               	movlw	0
  8441   00099A  6E3F               	movwf	(check_fs@sect+2)^0,c
  8442   00099C  0E00               	movlw	0
  8443   00099E  6E40               	movwf	(check_fs@sect+3)^0,c
  8444   0009A0  EC44  F028         	call	_check_fs	;wreg free
  8445   0009A4  0100               	movlb	0	; () banked
  8446   0009A6  6F97               	movwf	find_volume@fmt& (0+255),b
  8447   0009A8                     
  8448                           ; BSR set to: 0
  8449                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  8450   0009A8  0597               	decf	find_volume@fmt& (0+255),w,b
  8451   0009AA  B4D8               	btfsc	status,2,c
  8452   0009AC  EFDA  F004         	goto	u7251
  8453   0009B0  EFDC  F004         	goto	u7250
  8454   0009B4                     u7251:
  8455   0009B4  EFDE  F004         	goto	l5363
  8456   0009B8                     u7250:
  8457   0009B8  EFAD  F005         	goto	l5401
  8458   0009BC                     l5363:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  8462   0009BC  0E00               	movlw	0
  8463   0009BE  6F96               	movwf	(find_volume@i+1)& (0+255),b
  8464   0009C0  0E00               	movlw	0
  8465   0009C2  6F95               	movwf	find_volume@i& (0+255),b
  8466   0009C4                     l5365:
  8467                           
  8468                           ; BSR set to: 0
  8469   0009C4  5196               	movf	(find_volume@i+1)& (0+255),w,b
  8470   0009C6  E109               	bnz	u7260
  8471   0009C8  0E04               	movlw	4
  8472   0009CA  5D95               	subwf	find_volume@i& (0+255),w,b
  8473   0009CC  A0D8               	btfss	status,0,c
  8474   0009CE  EFEB  F004         	goto	u7261
  8475   0009D2  EFED  F004         	goto	u7260
  8476   0009D6                     u7261:
  8477   0009D6  EFEF  F004         	goto	l5369
  8478   0009DA                     u7260:
  8479   0009DA  EF4A  F005         	goto	l5381
  8480   0009DE                     l5369:
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  8484   0009DE  C095  F04A         	movff	find_volume@i,??_find_volume
  8485   0009E2  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  8486   0009E6  3A4A               	swapf	??_find_volume^0,f,c
  8487   0009E8  3A4B               	swapf	(??_find_volume+1)^0,f,c
  8488   0009EA  0EF0               	movlw	240
  8489   0009EC  164B               	andwf	(??_find_volume+1)^0,f,c
  8490   0009EE  504A               	movf	??_find_volume^0,w,c
  8491   0009F0  0B0F               	andlw	15
  8492   0009F2  124B               	iorwf	(??_find_volume+1)^0,f,c
  8493   0009F4  0EF0               	movlw	240
  8494   0009F6  164A               	andwf	??_find_volume^0,f,c
  8495   0009F8  504A               	movf	??_find_volume^0,w,c
  8496   0009FA  2598               	addwf	find_volume@fs& (0+255),w,b
  8497   0009FC  6E4C               	movwf	(??_find_volume+2)^0,c
  8498   0009FE  504B               	movf	(??_find_volume+1)^0,w,c
  8499   000A00  2199               	addwfc	(find_volume@fs+1)& (0+255),w,b
  8500   000A02  6E4D               	movwf	(??_find_volume+3)^0,c
  8501   000A04  0EEC               	movlw	236
  8502   000A06  244C               	addwf	(??_find_volume+2)^0,w,c
  8503   000A08  6F7A               	movwf	find_volume@pt& (0+255),b
  8504   000A0A  0E01               	movlw	1
  8505   000A0C  204D               	addwfc	(??_find_volume+3)^0,w,c
  8506   000A0E  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  8507   000A10                     
  8508                           ; BSR set to: 0
  8509                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  8510   000A10  EE20 F004          	lfsr	2,4
  8511   000A14  517A               	movf	find_volume@pt& (0+255),w,b
  8512   000A16  26D9               	addwf	fsr2l,f,c
  8513   000A18  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  8514   000A1A  22DA               	addwfc	fsr2h,f,c
  8515   000A1C  50DF               	movf	indf2,w,c
  8516   000A1E  A4D8               	btfss	status,2,c
  8517   000A20  EF14  F005         	goto	u7271
  8518   000A24  EF16  F005         	goto	u7270
  8519   000A28                     u7271:
  8520   000A28  EF20  F005         	goto	l5375
  8521   000A2C                     u7270:
  8522   000A2C                     
  8523                           ; BSR set to: 0
  8524   000A2C  0E00               	movlw	0
  8525   000A2E  6F70               	movwf	_find_volume$1235& (0+255),b
  8526   000A30  0E00               	movlw	0
  8527   000A32  6F71               	movwf	(_find_volume$1235+1)& (0+255),b
  8528   000A34  0E00               	movlw	0
  8529   000A36  6F72               	movwf	(_find_volume$1235+2)& (0+255),b
  8530   000A38  0E00               	movlw	0
  8531   000A3A  6F73               	movwf	(_find_volume$1235+3)& (0+255),b
  8532   000A3C  EF2E  F005         	goto	l581
  8533   000A40                     l5375:
  8534                           
  8535                           ; BSR set to: 0
  8536   000A40  EE20 F008          	lfsr	2,8
  8537   000A44  517A               	movf	find_volume@pt& (0+255),w,b
  8538   000A46  26D9               	addwf	fsr2l,f,c
  8539   000A48  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  8540   000A4A  22DA               	addwfc	fsr2h,f,c
  8541   000A4C  CFDE F070          	movff	postinc2,_find_volume$1235
  8542   000A50  CFDE F071          	movff	postinc2,_find_volume$1235+1
  8543   000A54  CFDE F072          	movff	postinc2,_find_volume$1235+2
  8544   000A58  CFDE F073          	movff	postinc2,_find_volume$1235+3
  8545   000A5C                     l581:
  8546                           
  8547                           ; BSR set to: 0
  8548   000A5C  0E60               	movlw	low find_volume@br
  8549   000A5E  6E4A               	movwf	??_find_volume^0,c
  8550   000A60  0E00               	movlw	high find_volume@br
  8551   000A62  6E4B               	movwf	(??_find_volume+1)^0,c
  8552   000A64  90D8               	bcf	status,0,c
  8553   000A66  3595               	rlcf	find_volume@i& (0+255),w,b
  8554   000A68  6ED9               	movwf	fsr2l,c
  8555   000A6A  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  8556   000A6C  6EDA               	movwf	fsr2h,c
  8557   000A6E  90D8               	bcf	status,0,c
  8558   000A70  36D9               	rlcf	fsr2l,f,c
  8559   000A72  36DA               	rlcf	fsr2h,f,c
  8560   000A74  504A               	movf	??_find_volume^0,w,c
  8561   000A76  26D9               	addwf	fsr2l,f,c
  8562   000A78  504B               	movf	(??_find_volume+1)^0,w,c
  8563   000A7A  22DA               	addwfc	fsr2h,f,c
  8564   000A7C  C070  FFDE         	movff	_find_volume$1235,postinc2
  8565   000A80  C071  FFDE         	movff	_find_volume$1235+1,postinc2
  8566   000A84  C072  FFDE         	movff	_find_volume$1235+2,postinc2
  8567   000A88  C073  FFDE         	movff	_find_volume$1235+3,postinc2
  8568   000A8C                     
  8569                           ; BSR set to: 0
  8570                           ;ff.c: 2260:   }
  8571   000A8C  4B95               	infsnz	find_volume@i& (0+255),f,b
  8572   000A8E  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  8573   000A90  EFE2  F004         	goto	l5365
  8574   000A94                     l5381:
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;ff.c: 2261:   i = 0;
  8578   000A94  0E00               	movlw	0
  8579   000A96  6F96               	movwf	(find_volume@i+1)& (0+255),b
  8580   000A98  0E00               	movlw	0
  8581   000A9A  6F95               	movwf	find_volume@i& (0+255),b
  8582   000A9C                     
  8583                           ; BSR set to: 0
  8584                           ;ff.c: 2262:   if (i) i--;
  8585   000A9C  5195               	movf	find_volume@i& (0+255),w,b
  8586   000A9E  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  8587   000AA0  B4D8               	btfsc	status,2,c
  8588   000AA2  EF55  F005         	goto	u7281
  8589   000AA6  EF57  F005         	goto	u7280
  8590   000AAA                     u7281:
  8591   000AAA  EF5A  F005         	goto	l5387
  8592   000AAE                     u7280:
  8593   000AAE                     
  8594                           ; BSR set to: 0
  8595   000AAE  0795               	decf	find_volume@i& (0+255),f,b
  8596   000AB0  A0D8               	btfss	status,0,c
  8597   000AB2  0796               	decf	(find_volume@i+1)& (0+255),f,b
  8598   000AB4                     l5387:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;ff.c: 2264:    bsect = br[i];
  8602   000AB4  0E60               	movlw	low find_volume@br
  8603   000AB6  6E4A               	movwf	??_find_volume^0,c
  8604   000AB8  0E00               	movlw	high find_volume@br
  8605   000ABA  6E4B               	movwf	(??_find_volume+1)^0,c
  8606   000ABC  90D8               	bcf	status,0,c
  8607   000ABE  3595               	rlcf	find_volume@i& (0+255),w,b
  8608   000AC0  6ED9               	movwf	fsr2l,c
  8609   000AC2  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  8610   000AC4  6EDA               	movwf	fsr2h,c
  8611   000AC6  90D8               	bcf	status,0,c
  8612   000AC8  36D9               	rlcf	fsr2l,f,c
  8613   000ACA  36DA               	rlcf	fsr2h,f,c
  8614   000ACC  504A               	movf	??_find_volume^0,w,c
  8615   000ACE  26D9               	addwf	fsr2l,f,c
  8616   000AD0  504B               	movf	(??_find_volume+1)^0,w,c
  8617   000AD2  22DA               	addwfc	fsr2h,f,c
  8618   000AD4  CFDE F091          	movff	postinc2,find_volume@bsect
  8619   000AD8  CFDE F092          	movff	postinc2,find_volume@bsect+1
  8620   000ADC  CFDE F093          	movff	postinc2,find_volume@bsect+2
  8621   000AE0  CFDE F094          	movff	postinc2,find_volume@bsect+3
  8622   000AE4                     
  8623                           ; BSR set to: 0
  8624                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  8625   000AE4  5191               	movf	find_volume@bsect& (0+255),w,b
  8626   000AE6  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  8627   000AE8  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  8628   000AEA  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  8629   000AEC  A4D8               	btfss	status,2,c
  8630   000AEE  EF7B  F005         	goto	u7291
  8631   000AF2  EF7D  F005         	goto	u7290
  8632   000AF6                     u7291:
  8633   000AF6  EF83  F005         	goto	l5393
  8634   000AFA                     u7290:
  8635   000AFA                     
  8636                           ; BSR set to: 0
  8637   000AFA  0E00               	movlw	0
  8638   000AFC  6F75               	movwf	(_find_volume$1236+1)& (0+255),b
  8639   000AFE  0E02               	movlw	2
  8640   000B00  6F74               	movwf	_find_volume$1236& (0+255),b
  8641   000B02  EF96  F005         	goto	l5395
  8642   000B06                     l5393:
  8643                           
  8644                           ; BSR set to: 0
  8645   000B06  C098  F03B         	movff	find_volume@fs,check_fs@fs
  8646   000B0A  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  8647   000B0E  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  8648   000B12  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  8649   000B16  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  8650   000B1A  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  8651   000B1E  EC44  F028         	call	_check_fs	;wreg free
  8652   000B22  6E4A               	movwf	??_find_volume^0,c
  8653   000B24  504A               	movf	??_find_volume^0,w,c
  8654   000B26  0100               	movlb	0	; () banked
  8655   000B28  6F74               	movwf	_find_volume$1236& (0+255),b
  8656   000B2A  6B75               	clrf	(_find_volume$1236+1)& (0+255),b
  8657   000B2C                     l5395:
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  8661   000B2C  C074  F097         	movff	_find_volume$1236,find_volume@fmt
  8662   000B30                     
  8663                           ; BSR set to: 0
  8664   000B30  5197               	movf	find_volume@fmt& (0+255),w,b
  8665   000B32  B4D8               	btfsc	status,2,c
  8666   000B34  EF9E  F005         	goto	u7301
  8667   000B38  EFA0  F005         	goto	u7300
  8668   000B3C                     u7301:
  8669   000B3C  EFAD  F005         	goto	l5401
  8670   000B40                     u7300:
  8671   000B40                     
  8672                           ; BSR set to: 0
  8673   000B40  4B95               	infsnz	find_volume@i& (0+255),f,b
  8674   000B42  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  8675   000B44  5196               	movf	(find_volume@i+1)& (0+255),w,b
  8676   000B46  E109               	bnz	u7310
  8677   000B48  0E04               	movlw	4
  8678   000B4A  5D95               	subwf	find_volume@i& (0+255),w,b
  8679   000B4C  A0D8               	btfss	status,0,c
  8680   000B4E  EFAB  F005         	goto	u7311
  8681   000B52  EFAD  F005         	goto	u7310
  8682   000B56                     u7311:
  8683   000B56  EF5A  F005         	goto	l5387
  8684   000B5A                     u7310:
  8685   000B5A                     l5401:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  8689   000B5A  0E03               	movlw	3
  8690   000B5C  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8691   000B5E  A4D8               	btfss	status,2,c
  8692   000B60  EFB4  F005         	goto	u7321
  8693   000B64  EFB6  F005         	goto	u7320
  8694   000B68                     u7321:
  8695   000B68  EFB9  F005         	goto	l5407
  8696   000B6C                     u7320:
  8697   000B6C                     
  8698                           ; BSR set to: 0
  8699   000B6C  0E01               	movlw	1
  8700   000B6E  EFE6  F009         	goto	l566
  8701   000B72                     l5407:
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  8705   000B72  5197               	movf	find_volume@fmt& (0+255),w,b
  8706   000B74  B4D8               	btfsc	status,2,c
  8707   000B76  EFBF  F005         	goto	u7331
  8708   000B7A  EFC1  F005         	goto	u7330
  8709   000B7E                     u7331:
  8710   000B7E  EFC4  F005         	goto	l5413
  8711   000B82                     u7330:
  8712   000B82                     l5409:
  8713                           
  8714                           ; BSR set to: 0
  8715   000B82  0E0D               	movlw	13
  8716   000B84  EFE6  F009         	goto	l566
  8717   000B88                     l5413:
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  8721   000B88  EE20 F039          	lfsr	2,57
  8722   000B8C  5198               	movf	find_volume@fs& (0+255),w,b
  8723   000B8E  26D9               	addwf	fsr2l,f,c
  8724   000B90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8725   000B92  22DA               	addwfc	fsr2h,f,c
  8726   000B94  50DE               	movf	postinc2,w,c
  8727   000B96  E109               	bnz	u7340
  8728   000B98  0E02               	movlw	2
  8729   000B9A  18DE               	xorwf	postinc2,w,c
  8730   000B9C  B4D8               	btfsc	status,2,c
  8731   000B9E  EFD3  F005         	goto	u7341
  8732   000BA2  EFD5  F005         	goto	u7340
  8733   000BA6                     u7341:
  8734   000BA6  EFD7  F005         	goto	l5419
  8735   000BAA                     u7340:
  8736   000BAA  EFC1  F005         	goto	l5409
  8737   000BAE                     l5419:
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  8741   000BAE  EE20 F044          	lfsr	2,68
  8742   000BB2  5198               	movf	find_volume@fs& (0+255),w,b
  8743   000BB4  26D9               	addwf	fsr2l,f,c
  8744   000BB6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8745   000BB8  22DA               	addwfc	fsr2h,f,c
  8746   000BBA  CFDE F04A          	movff	postinc2,??_find_volume
  8747   000BBE  CFDD F04B          	movff	postdec2,??_find_volume+1
  8748   000BC2  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  8749   000BC6  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  8750   000BCA  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  8751   000BCC  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  8752   000BCE                     
  8753                           ; BSR set to: 0
  8754                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  8755   000BCE  518D               	movf	find_volume@fasize& (0+255),w,b
  8756   000BD0  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  8757   000BD2  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  8758   000BD4  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  8759   000BD6  A4D8               	btfss	status,2,c
  8760   000BD8  EFF0  F005         	goto	u7351
  8761   000BDC  EFF2  F005         	goto	u7350
  8762   000BE0                     u7351:
  8763   000BE0  EF00  F006         	goto	l594
  8764   000BE4                     u7350:
  8765   000BE4                     
  8766                           ; BSR set to: 0
  8767   000BE4  EE20 F052          	lfsr	2,82
  8768   000BE8  5198               	movf	find_volume@fs& (0+255),w,b
  8769   000BEA  26D9               	addwf	fsr2l,f,c
  8770   000BEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8771   000BEE  22DA               	addwfc	fsr2h,f,c
  8772   000BF0  CFDE F08D          	movff	postinc2,find_volume@fasize
  8773   000BF4  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  8774   000BF8  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  8775   000BFC  CFDE F090          	movff	postinc2,find_volume@fasize+3
  8776   000C00                     l594:
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;ff.c: 2278:  fs->fsize = fasize;
  8780   000C00  EE20 F016          	lfsr	2,22
  8781   000C04  5198               	movf	find_volume@fs& (0+255),w,b
  8782   000C06  26D9               	addwf	fsr2l,f,c
  8783   000C08  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8784   000C0A  22DA               	addwfc	fsr2h,f,c
  8785   000C0C  C08D  FFDE         	movff	find_volume@fasize,postinc2
  8786   000C10  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  8787   000C14  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  8788   000C18  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  8789   000C1C                     
  8790                           ; BSR set to: 0
  8791                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  8792   000C1C  EE20 F03E          	lfsr	2,62
  8793   000C20  5198               	movf	find_volume@fs& (0+255),w,b
  8794   000C22  26D9               	addwf	fsr2l,f,c
  8795   000C24  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8796   000C26  22DA               	addwfc	fsr2h,f,c
  8797   000C28  EE10 F003          	lfsr	1,3
  8798   000C2C  5198               	movf	find_volume@fs& (0+255),w,b
  8799   000C2E  26E1               	addwf	fsr1l,f,c
  8800   000C30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8801   000C32  22E2               	addwfc	fsr1h,f,c
  8802   000C34  CFDF FFE7          	movff	indf2,indf1
  8803   000C38                     
  8804                           ; BSR set to: 0
  8805                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  8806   000C38  EE20 F003          	lfsr	2,3
  8807   000C3C  5198               	movf	find_volume@fs& (0+255),w,b
  8808   000C3E  26D9               	addwf	fsr2l,f,c
  8809   000C40  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8810   000C42  22DA               	addwfc	fsr2h,f,c
  8811   000C44  04DE               	decf	postinc2,w,c
  8812   000C46  B4D8               	btfsc	status,2,c
  8813   000C48  EF28  F006         	goto	u7361
  8814   000C4C  EF2A  F006         	goto	u7360
  8815   000C50                     u7361:
  8816   000C50  EF3B  F006         	goto	l5435
  8817   000C54                     u7360:
  8818   000C54                     
  8819                           ; BSR set to: 0
  8820   000C54  EE20 F003          	lfsr	2,3
  8821   000C58  5198               	movf	find_volume@fs& (0+255),w,b
  8822   000C5A  26D9               	addwf	fsr2l,f,c
  8823   000C5C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8824   000C5E  22DA               	addwfc	fsr2h,f,c
  8825   000C60  0E02               	movlw	2
  8826   000C62  18DE               	xorwf	postinc2,w,c
  8827   000C64  B4D8               	btfsc	status,2,c
  8828   000C66  EF37  F006         	goto	u7371
  8829   000C6A  EF39  F006         	goto	u7370
  8830   000C6E                     u7371:
  8831   000C6E  EF3B  F006         	goto	l5435
  8832   000C72                     u7370:
  8833   000C72  EFC1  F005         	goto	l5409
  8834   000C76                     l5435:
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;ff.c: 2283:  fasize *= fs->n_fats;
  8838   000C76  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  8839   000C7A  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  8840   000C7E  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  8841   000C82  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  8842   000C86  EE20 F003          	lfsr	2,3
  8843   000C8A  5198               	movf	find_volume@fs& (0+255),w,b
  8844   000C8C  26D9               	addwf	fsr2l,f,c
  8845   000C8E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8846   000C90  22DA               	addwfc	fsr2h,f,c
  8847   000C92  50DF               	movf	indf2,w,c
  8848   000C94  6E4A               	movwf	??_find_volume^0,c
  8849   000C96  504A               	movf	??_find_volume^0,w,c
  8850   000C98  6E05               	movwf	___lmul@multiplicand^0,c
  8851   000C9A  6A06               	clrf	(___lmul@multiplicand+1)^0,c
  8852   000C9C  6A07               	clrf	(___lmul@multiplicand+2)^0,c
  8853   000C9E  6A08               	clrf	(___lmul@multiplicand+3)^0,c
  8854   000CA0  EC6B  F02D         	call	___lmul	;wreg free
  8855   000CA4  C001  F08D         	movff	?___lmul,find_volume@fasize
  8856   000CA8  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  8857   000CAC  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  8858   000CB0  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  8859   000CB4                     
  8860                           ;ff.c: 2285:  fs->csize = fs->win[13];
  8861   000CB4  0100               	movlb	0	; () banked
  8862   000CB6  EE20 F03B          	lfsr	2,59
  8863   000CBA  5198               	movf	find_volume@fs& (0+255),w,b
  8864   000CBC  26D9               	addwf	fsr2l,f,c
  8865   000CBE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8866   000CC0  22DA               	addwfc	fsr2h,f,c
  8867   000CC2  EE10 F002          	lfsr	1,2
  8868   000CC6  5198               	movf	find_volume@fs& (0+255),w,b
  8869   000CC8  26E1               	addwf	fsr1l,f,c
  8870   000CCA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8871   000CCC  22E2               	addwfc	fsr1h,f,c
  8872   000CCE  CFDF FFE7          	movff	indf2,indf1
  8873   000CD2                     
  8874                           ; BSR set to: 0
  8875                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  8876   000CD2  EE20 F002          	lfsr	2,2
  8877   000CD6  5198               	movf	find_volume@fs& (0+255),w,b
  8878   000CD8  26D9               	addwf	fsr2l,f,c
  8879   000CDA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8880   000CDC  22DA               	addwfc	fsr2h,f,c
  8881   000CDE  50DF               	movf	indf2,w,c
  8882   000CE0  B4D8               	btfsc	status,2,c
  8883   000CE2  EF75  F006         	goto	u7381
  8884   000CE6  EF77  F006         	goto	u7380
  8885   000CEA                     u7381:
  8886   000CEA  EFC1  F005         	goto	l5409
  8887   000CEE                     u7380:
  8888   000CEE                     
  8889                           ; BSR set to: 0
  8890   000CEE  EE20 F002          	lfsr	2,2
  8891   000CF2  5198               	movf	find_volume@fs& (0+255),w,b
  8892   000CF4  26D9               	addwf	fsr2l,f,c
  8893   000CF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8894   000CF8  22DA               	addwfc	fsr2h,f,c
  8895   000CFA  50DF               	movf	indf2,w,c
  8896   000CFC  6E4A               	movwf	??_find_volume^0,c
  8897   000CFE  0EFF               	movlw	255
  8898   000D00  244A               	addwf	??_find_volume^0,w,c
  8899   000D02  6E4B               	movwf	(??_find_volume+1)^0,c
  8900   000D04  6A4C               	clrf	(??_find_volume+2)^0,c
  8901   000D06  0EFF               	movlw	255
  8902   000D08  224C               	addwfc	(??_find_volume+2)^0,f,c
  8903   000D0A  EE20 F002          	lfsr	2,2
  8904   000D0E  5198               	movf	find_volume@fs& (0+255),w,b
  8905   000D10  26D9               	addwf	fsr2l,f,c
  8906   000D12  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8907   000D14  22DA               	addwfc	fsr2h,f,c
  8908   000D16  50DF               	movf	indf2,w,c
  8909   000D18  6E4D               	movwf	(??_find_volume+3)^0,c
  8910   000D1A  504D               	movf	(??_find_volume+3)^0,w,c
  8911   000D1C  164B               	andwf	(??_find_volume+1)^0,f,c
  8912   000D1E  0E00               	movlw	0
  8913   000D20  164C               	andwf	(??_find_volume+2)^0,f,c
  8914   000D22  504B               	movf	(??_find_volume+1)^0,w,c
  8915   000D24  104C               	iorwf	(??_find_volume+2)^0,w,c
  8916   000D26  B4D8               	btfsc	status,2,c
  8917   000D28  EF98  F006         	goto	u7391
  8918   000D2C  EF9A  F006         	goto	u7390
  8919   000D30                     u7391:
  8920   000D30  EF9C  F006         	goto	l5447
  8921   000D34                     u7390:
  8922   000D34  EFC1  F005         	goto	l5409
  8923   000D38                     l5447:
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  8927   000D38  EE20 F03F          	lfsr	2,63
  8928   000D3C  5198               	movf	find_volume@fs& (0+255),w,b
  8929   000D3E  26D9               	addwf	fsr2l,f,c
  8930   000D40  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8931   000D42  22DA               	addwfc	fsr2h,f,c
  8932   000D44  EE10 F008          	lfsr	1,8
  8933   000D48  5198               	movf	find_volume@fs& (0+255),w,b
  8934   000D4A  26E1               	addwf	fsr1l,f,c
  8935   000D4C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8936   000D4E  22E2               	addwfc	fsr1h,f,c
  8937   000D50  CFDE FFE6          	movff	postinc2,postinc1
  8938   000D54  CFDD FFE5          	movff	postdec2,postdec1
  8939   000D58                     
  8940                           ; BSR set to: 0
  8941                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  8942   000D58  EE20 F008          	lfsr	2,8
  8943   000D5C  5198               	movf	find_volume@fs& (0+255),w,b
  8944   000D5E  26D9               	addwf	fsr2l,f,c
  8945   000D60  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8946   000D62  22DA               	addwfc	fsr2h,f,c
  8947   000D64  CFDE F04A          	movff	postinc2,??_find_volume
  8948   000D68  CFDD F04B          	movff	postdec2,??_find_volume+1
  8949   000D6C  0E0F               	movlw	15
  8950   000D6E  164A               	andwf	??_find_volume^0,f,c
  8951   000D70  0E00               	movlw	0
  8952   000D72  164B               	andwf	(??_find_volume+1)^0,f,c
  8953   000D74  504A               	movf	??_find_volume^0,w,c
  8954   000D76  104B               	iorwf	(??_find_volume+1)^0,w,c
  8955   000D78  B4D8               	btfsc	status,2,c
  8956   000D7A  EFC1  F006         	goto	u7401
  8957   000D7E  EFC3  F006         	goto	u7400
  8958   000D82                     u7401:
  8959   000D82  EFC5  F006         	goto	l5455
  8960   000D86                     u7400:
  8961   000D86  EFC1  F005         	goto	l5409
  8962   000D8A                     l5455:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  8966   000D8A  EE20 F041          	lfsr	2,65
  8967   000D8E  5198               	movf	find_volume@fs& (0+255),w,b
  8968   000D90  26D9               	addwf	fsr2l,f,c
  8969   000D92  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8970   000D94  22DA               	addwfc	fsr2h,f,c
  8971   000D96  CFDE F04A          	movff	postinc2,??_find_volume
  8972   000D9A  CFDD F04B          	movff	postdec2,??_find_volume+1
  8973   000D9E  C04A  F084         	movff	??_find_volume,find_volume@tsect
  8974   000DA2  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  8975   000DA6  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  8976   000DA8  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  8977   000DAA                     
  8978                           ; BSR set to: 0
  8979                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  8980   000DAA  5184               	movf	find_volume@tsect& (0+255),w,b
  8981   000DAC  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  8982   000DAE  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  8983   000DB0  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  8984   000DB2  A4D8               	btfss	status,2,c
  8985   000DB4  EFDE  F006         	goto	u7411
  8986   000DB8  EFE0  F006         	goto	u7410
  8987   000DBC                     u7411:
  8988   000DBC  EFEE  F006         	goto	l600
  8989   000DC0                     u7410:
  8990   000DC0                     
  8991                           ; BSR set to: 0
  8992   000DC0  EE20 F04E          	lfsr	2,78
  8993   000DC4  5198               	movf	find_volume@fs& (0+255),w,b
  8994   000DC6  26D9               	addwf	fsr2l,f,c
  8995   000DC8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8996   000DCA  22DA               	addwfc	fsr2h,f,c
  8997   000DCC  CFDE F084          	movff	postinc2,find_volume@tsect
  8998   000DD0  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8999   000DD4  CFDE F086          	movff	postinc2,find_volume@tsect+2
  9000   000DD8  CFDE F087          	movff	postinc2,find_volume@tsect+3
  9001   000DDC                     l600:
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  9005   000DDC  EE20 F03C          	lfsr	2,60
  9006   000DE0  5198               	movf	find_volume@fs& (0+255),w,b
  9007   000DE2  26D9               	addwf	fsr2l,f,c
  9008   000DE4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9009   000DE6  22DA               	addwfc	fsr2h,f,c
  9010   000DE8  CFDE F082          	movff	postinc2,find_volume@nrsv
  9011   000DEC  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  9012   000DF0                     
  9013                           ; BSR set to: 0
  9014                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  9015   000DF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  9016   000DF2  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  9017   000DF4  A4D8               	btfss	status,2,c
  9018   000DF6  EFFF  F006         	goto	u7421
  9019   000DFA  EF01  F007         	goto	u7420
  9020   000DFE                     u7421:
  9021   000DFE  EF03  F007         	goto	l5467
  9022   000E02                     u7420:
  9023   000E02  EFC1  F005         	goto	l5409
  9024   000E06                     l5467:
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  9028   000E06  EE20 F008          	lfsr	2,8
  9029   000E0A  5198               	movf	find_volume@fs& (0+255),w,b
  9030   000E0C  26D9               	addwf	fsr2l,f,c
  9031   000E0E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9032   000E10  22DA               	addwfc	fsr2h,f,c
  9033   000E12  CFDE F04A          	movff	postinc2,??_find_volume
  9034   000E16  CFDD F04B          	movff	postdec2,??_find_volume+1
  9035   000E1A  0E04               	movlw	4
  9036   000E1C  6E4C               	movwf	(??_find_volume+2)^0,c
  9037   000E1E                     u7435:
  9038   000E1E  90D8               	bcf	status,0,c
  9039   000E20  324B               	rrcf	(??_find_volume+1)^0,f,c
  9040   000E22  324A               	rrcf	??_find_volume^0,f,c
  9041   000E24  2E4C               	decfsz	(??_find_volume+2)^0,f,c
  9042   000E26  EF0F  F007         	goto	u7435
  9043   000E2A  5182               	movf	find_volume@nrsv& (0+255),w,b
  9044   000E2C  244A               	addwf	??_find_volume^0,w,c
  9045   000E2E  6E4D               	movwf	(??_find_volume+3)^0,c
  9046   000E30  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  9047   000E32  204B               	addwfc	(??_find_volume+1)^0,w,c
  9048   000E34  6E4E               	movwf	(??_find_volume+4)^0,c
  9049   000E36  6A4F               	clrf	(??_find_volume+5)^0,c
  9050   000E38  B0D8               	btfsc	status,0,c
  9051   000E3A  2A4F               	incf	(??_find_volume+5)^0,f,c
  9052   000E3C  6A50               	clrf	(??_find_volume+6)^0,c
  9053   000E3E  518D               	movf	find_volume@fasize& (0+255),w,b
  9054   000E40  244D               	addwf	(??_find_volume+3)^0,w,c
  9055   000E42  6F7C               	movwf	find_volume@sysect& (0+255),b
  9056   000E44  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  9057   000E46  204E               	addwfc	(??_find_volume+4)^0,w,c
  9058   000E48  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  9059   000E4A  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  9060   000E4C  204F               	addwfc	(??_find_volume+5)^0,w,c
  9061   000E4E  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  9062   000E50  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  9063   000E52  2050               	addwfc	(??_find_volume+6)^0,w,c
  9064   000E54  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  9065   000E56                     
  9066                           ; BSR set to: 0
  9067                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  9068   000E56  517C               	movf	find_volume@sysect& (0+255),w,b
  9069   000E58  5D84               	subwf	find_volume@tsect& (0+255),w,b
  9070   000E5A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  9071   000E5C  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  9072   000E5E  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  9073   000E60  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  9074   000E62  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  9075   000E64  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  9076   000E66  B0D8               	btfsc	status,0,c
  9077   000E68  EF38  F007         	goto	u7441
  9078   000E6C  EF3A  F007         	goto	u7440
  9079   000E70                     u7441:
  9080   000E70  EF3C  F007         	goto	l5475
  9081   000E74                     u7440:
  9082   000E74  EFC1  F005         	goto	l5409
  9083   000E78                     l5475:
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  9087   000E78  517C               	movf	find_volume@sysect& (0+255),w,b
  9088   000E7A  5D84               	subwf	find_volume@tsect& (0+255),w,b
  9089   000E7C  6E01               	movwf	___lldiv@dividend^0,c
  9090   000E7E  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  9091   000E80  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  9092   000E82  6E02               	movwf	(___lldiv@dividend+1)^0,c
  9093   000E84  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  9094   000E86  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  9095   000E88  6E03               	movwf	(___lldiv@dividend+2)^0,c
  9096   000E8A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  9097   000E8C  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  9098   000E8E  6E04               	movwf	(___lldiv@dividend+3)^0,c
  9099   000E90  EE20 F002          	lfsr	2,2
  9100   000E94  5198               	movf	find_volume@fs& (0+255),w,b
  9101   000E96  26D9               	addwf	fsr2l,f,c
  9102   000E98  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9103   000E9A  22DA               	addwfc	fsr2h,f,c
  9104   000E9C  50DF               	movf	indf2,w,c
  9105   000E9E  6E4A               	movwf	??_find_volume^0,c
  9106   000EA0  504A               	movf	??_find_volume^0,w,c
  9107   000EA2  6E05               	movwf	___lldiv@divisor^0,c
  9108   000EA4  6A06               	clrf	(___lldiv@divisor+1)^0,c
  9109   000EA6  6A07               	clrf	(___lldiv@divisor+2)^0,c
  9110   000EA8  6A08               	clrf	(___lldiv@divisor+3)^0,c
  9111   000EAA  EC00  F02C         	call	___lldiv	;wreg free
  9112   000EAE  C001  F088         	movff	?___lldiv,find_volume@nclst
  9113   000EB2  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  9114   000EB6  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  9115   000EBA  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  9116   000EBE                     
  9117                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  9118   000EBE  0100               	movlb	0	; () banked
  9119   000EC0  5188               	movf	find_volume@nclst& (0+255),w,b
  9120   000EC2  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  9121   000EC4  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  9122   000EC6  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  9123   000EC8  A4D8               	btfss	status,2,c
  9124   000ECA  EF69  F007         	goto	u7451
  9125   000ECE  EF6B  F007         	goto	u7450
  9126   000ED2                     u7451:
  9127   000ED2  EF6D  F007         	goto	l5483
  9128   000ED6                     u7450:
  9129   000ED6  EFC1  F005         	goto	l5409
  9130   000EDA                     l5483:
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;ff.c: 2304:  fmt = 1;
  9134   000EDA  0E01               	movlw	1
  9135   000EDC  6F97               	movwf	find_volume@fmt& (0+255),b
  9136   000EDE                     
  9137                           ; BSR set to: 0
  9138                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  9139   000EDE  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  9140   000EE0  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  9141   000EE2  E10B               	bnz	u7460
  9142   000EE4  0EF6               	movlw	246
  9143   000EE6  5D88               	subwf	find_volume@nclst& (0+255),w,b
  9144   000EE8  0E0F               	movlw	15
  9145   000EEA  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  9146   000EEC  A0D8               	btfss	status,0,c
  9147   000EEE  EF7B  F007         	goto	u7461
  9148   000EF2  EF7D  F007         	goto	u7460
  9149   000EF6                     u7461:
  9150   000EF6  EF7F  F007         	goto	l5489
  9151   000EFA                     u7460:
  9152   000EFA                     
  9153                           ; BSR set to: 0
  9154   000EFA  0E02               	movlw	2
  9155   000EFC  6F97               	movwf	find_volume@fmt& (0+255),b
  9156   000EFE                     l5489:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  9160   000EFE  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  9161   000F00  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  9162   000F02  E10B               	bnz	u7470
  9163   000F04  0EF6               	movlw	246
  9164   000F06  5D88               	subwf	find_volume@nclst& (0+255),w,b
  9165   000F08  0EFF               	movlw	255
  9166   000F0A  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  9167   000F0C  A0D8               	btfss	status,0,c
  9168   000F0E  EF8B  F007         	goto	u7471
  9169   000F12  EF8D  F007         	goto	u7470
  9170   000F16                     u7471:
  9171   000F16  EF8F  F007         	goto	l5493
  9172   000F1A                     u7470:
  9173   000F1A                     
  9174                           ; BSR set to: 0
  9175   000F1A  0E03               	movlw	3
  9176   000F1C  6F97               	movwf	find_volume@fmt& (0+255),b
  9177   000F1E                     l5493:
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  9181   000F1E  0E02               	movlw	2
  9182   000F20  2588               	addwf	find_volume@nclst& (0+255),w,b
  9183   000F22  6E4A               	movwf	??_find_volume^0,c
  9184   000F24  0E00               	movlw	0
  9185   000F26  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  9186   000F28  6E4B               	movwf	(??_find_volume+1)^0,c
  9187   000F2A  0E00               	movlw	0
  9188   000F2C  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  9189   000F2E  6E4C               	movwf	(??_find_volume+2)^0,c
  9190   000F30  0E00               	movlw	0
  9191   000F32  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  9192   000F34  6E4D               	movwf	(??_find_volume+3)^0,c
  9193   000F36  EE20 F012          	lfsr	2,18
  9194   000F3A  5198               	movf	find_volume@fs& (0+255),w,b
  9195   000F3C  26D9               	addwf	fsr2l,f,c
  9196   000F3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9197   000F40  22DA               	addwfc	fsr2h,f,c
  9198   000F42  C04A  FFDE         	movff	??_find_volume,postinc2
  9199   000F46  C04B  FFDE         	movff	??_find_volume+1,postinc2
  9200   000F4A  C04C  FFDE         	movff	??_find_volume+2,postinc2
  9201   000F4E  C04D  FFDE         	movff	??_find_volume+3,postinc2
  9202   000F52                     
  9203                           ; BSR set to: 0
  9204                           ;ff.c: 2310:  fs->volbase = bsect;
  9205   000F52  EE20 F01A          	lfsr	2,26
  9206   000F56  5198               	movf	find_volume@fs& (0+255),w,b
  9207   000F58  26D9               	addwf	fsr2l,f,c
  9208   000F5A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9209   000F5C  22DA               	addwfc	fsr2h,f,c
  9210   000F5E  C091  FFDE         	movff	find_volume@bsect,postinc2
  9211   000F62  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  9212   000F66  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  9213   000F6A  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  9214   000F6E                     
  9215                           ; BSR set to: 0
  9216                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  9217   000F6E  5182               	movf	find_volume@nrsv& (0+255),w,b
  9218   000F70  2591               	addwf	find_volume@bsect& (0+255),w,b
  9219   000F72  6E4A               	movwf	??_find_volume^0,c
  9220   000F74  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  9221   000F76  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  9222   000F78  6E4B               	movwf	(??_find_volume+1)^0,c
  9223   000F7A  0E00               	movlw	0
  9224   000F7C  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  9225   000F7E  6E4C               	movwf	(??_find_volume+2)^0,c
  9226   000F80  0E00               	movlw	0
  9227   000F82  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  9228   000F84  6E4D               	movwf	(??_find_volume+3)^0,c
  9229   000F86  EE20 F01E          	lfsr	2,30
  9230   000F8A  5198               	movf	find_volume@fs& (0+255),w,b
  9231   000F8C  26D9               	addwf	fsr2l,f,c
  9232   000F8E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9233   000F90  22DA               	addwfc	fsr2h,f,c
  9234   000F92  C04A  FFDE         	movff	??_find_volume,postinc2
  9235   000F96  C04B  FFDE         	movff	??_find_volume+1,postinc2
  9236   000F9A  C04C  FFDE         	movff	??_find_volume+2,postinc2
  9237   000F9E  C04D  FFDE         	movff	??_find_volume+3,postinc2
  9238   000FA2                     
  9239                           ; BSR set to: 0
  9240                           ;ff.c: 2312:  fs->database = bsect + sysect;
  9241   000FA2  517C               	movf	find_volume@sysect& (0+255),w,b
  9242   000FA4  2591               	addwf	find_volume@bsect& (0+255),w,b
  9243   000FA6  6E4A               	movwf	??_find_volume^0,c
  9244   000FA8  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  9245   000FAA  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  9246   000FAC  6E4B               	movwf	(??_find_volume+1)^0,c
  9247   000FAE  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  9248   000FB0  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  9249   000FB2  6E4C               	movwf	(??_find_volume+2)^0,c
  9250   000FB4  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  9251   000FB6  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  9252   000FB8  6E4D               	movwf	(??_find_volume+3)^0,c
  9253   000FBA  EE20 F026          	lfsr	2,38
  9254   000FBE  5198               	movf	find_volume@fs& (0+255),w,b
  9255   000FC0  26D9               	addwf	fsr2l,f,c
  9256   000FC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9257   000FC4  22DA               	addwfc	fsr2h,f,c
  9258   000FC6  C04A  FFDE         	movff	??_find_volume,postinc2
  9259   000FCA  C04B  FFDE         	movff	??_find_volume+1,postinc2
  9260   000FCE  C04C  FFDE         	movff	??_find_volume+2,postinc2
  9261   000FD2  C04D  FFDE         	movff	??_find_volume+3,postinc2
  9262   000FD6                     
  9263                           ; BSR set to: 0
  9264                           ;ff.c: 2313:  if (fmt == 3) {
  9265   000FD6  0E03               	movlw	3
  9266   000FD8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  9267   000FDA  A4D8               	btfss	status,2,c
  9268   000FDC  EFF2  F007         	goto	u7481
  9269   000FE0  EFF4  F007         	goto	u7480
  9270   000FE4                     u7481:
  9271   000FE4  EF3A  F008         	goto	l5513
  9272   000FE8                     u7480:
  9273   000FE8                     
  9274                           ; BSR set to: 0
  9275                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  9276   000FE8  EE20 F008          	lfsr	2,8
  9277   000FEC  5198               	movf	find_volume@fs& (0+255),w,b
  9278   000FEE  26D9               	addwf	fsr2l,f,c
  9279   000FF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9280   000FF2  22DA               	addwfc	fsr2h,f,c
  9281   000FF4  50DE               	movf	postinc2,w,c
  9282   000FF6  10DE               	iorwf	postinc2,w,c
  9283   000FF8  B4D8               	btfsc	status,2,c
  9284   000FFA  EF01  F008         	goto	u7491
  9285   000FFE  EF03  F008         	goto	u7490
  9286   001002                     u7491:
  9287   001002  EF05  F008         	goto	l5509
  9288   001006                     u7490:
  9289   001006  EFC1  F005         	goto	l5409
  9290   00100A                     l5509:
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  9294   00100A  EE20 F05A          	lfsr	2,90
  9295   00100E  5198               	movf	find_volume@fs& (0+255),w,b
  9296   001010  26D9               	addwf	fsr2l,f,c
  9297   001012  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9298   001014  22DA               	addwfc	fsr2h,f,c
  9299   001016  EE10 F022          	lfsr	1,34
  9300   00101A  5198               	movf	find_volume@fs& (0+255),w,b
  9301   00101C  26E1               	addwf	fsr1l,f,c
  9302   00101E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9303   001020  22E2               	addwfc	fsr1h,f,c
  9304   001022  CFDE FFE6          	movff	postinc2,postinc1
  9305   001026  CFDE FFE6          	movff	postinc2,postinc1
  9306   00102A  CFDE FFE6          	movff	postinc2,postinc1
  9307   00102E  CFDE FFE6          	movff	postinc2,postinc1
  9308   001032                     
  9309                           ; BSR set to: 0
  9310                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  9311   001032  EE20 F012          	lfsr	2,18
  9312   001036  5198               	movf	find_volume@fs& (0+255),w,b
  9313   001038  26D9               	addwf	fsr2l,f,c
  9314   00103A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9315   00103C  22DA               	addwfc	fsr2h,f,c
  9316   00103E  CFDE F04A          	movff	postinc2,??_find_volume
  9317   001042  CFDE F04B          	movff	postinc2,??_find_volume+1
  9318   001046  CFDE F04C          	movff	postinc2,??_find_volume+2
  9319   00104A  CFDE F04D          	movff	postinc2,??_find_volume+3
  9320   00104E  0E02               	movlw	2
  9321   001050                     u7505:
  9322   001050  90D8               	bcf	status,0,c
  9323   001052  364A               	rlcf	??_find_volume^0,f,c
  9324   001054  364B               	rlcf	(??_find_volume+1)^0,f,c
  9325   001056  364C               	rlcf	(??_find_volume+2)^0,f,c
  9326   001058  364D               	rlcf	(??_find_volume+3)^0,f,c
  9327   00105A  2EE8               	decfsz	wreg,f,c
  9328   00105C  EF28  F008         	goto	u7505
  9329   001060  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  9330   001064  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  9331   001068  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  9332   00106C  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  9333                           
  9334                           ;ff.c: 2317:  } else {
  9335   001070  EFD9  F008         	goto	l608
  9336   001074                     l5513:
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  9340   001074  EE20 F008          	lfsr	2,8
  9341   001078  5198               	movf	find_volume@fs& (0+255),w,b
  9342   00107A  26D9               	addwf	fsr2l,f,c
  9343   00107C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9344   00107E  22DA               	addwfc	fsr2h,f,c
  9345   001080  50DE               	movf	postinc2,w,c
  9346   001082  10DE               	iorwf	postinc2,w,c
  9347   001084  A4D8               	btfss	status,2,c
  9348   001086  EF47  F008         	goto	u7511
  9349   00108A  EF49  F008         	goto	u7510
  9350   00108E                     u7511:
  9351   00108E  EF4B  F008         	goto	l5519
  9352   001092                     u7510:
  9353   001092  EFC1  F005         	goto	l5409
  9354   001096                     l5519:
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  9358   001096  EE20 F01E          	lfsr	2,30
  9359   00109A  5198               	movf	find_volume@fs& (0+255),w,b
  9360   00109C  26D9               	addwf	fsr2l,f,c
  9361   00109E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9362   0010A0  22DA               	addwfc	fsr2h,f,c
  9363   0010A2  CFDE F04A          	movff	postinc2,??_find_volume
  9364   0010A6  CFDE F04B          	movff	postinc2,??_find_volume+1
  9365   0010AA  CFDE F04C          	movff	postinc2,??_find_volume+2
  9366   0010AE  CFDE F04D          	movff	postinc2,??_find_volume+3
  9367   0010B2  518D               	movf	find_volume@fasize& (0+255),w,b
  9368   0010B4  244A               	addwf	??_find_volume^0,w,c
  9369   0010B6  6E4E               	movwf	(??_find_volume+4)^0,c
  9370   0010B8  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  9371   0010BA  204B               	addwfc	(??_find_volume+1)^0,w,c
  9372   0010BC  6E4F               	movwf	(??_find_volume+5)^0,c
  9373   0010BE  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  9374   0010C0  204C               	addwfc	(??_find_volume+2)^0,w,c
  9375   0010C2  6E50               	movwf	(??_find_volume+6)^0,c
  9376   0010C4  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  9377   0010C6  204D               	addwfc	(??_find_volume+3)^0,w,c
  9378   0010C8  6E51               	movwf	(??_find_volume+7)^0,c
  9379   0010CA  EE20 F022          	lfsr	2,34
  9380   0010CE  5198               	movf	find_volume@fs& (0+255),w,b
  9381   0010D0  26D9               	addwf	fsr2l,f,c
  9382   0010D2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9383   0010D4  22DA               	addwfc	fsr2h,f,c
  9384   0010D6  C04E  FFDE         	movff	??_find_volume+4,postinc2
  9385   0010DA  C04F  FFDE         	movff	??_find_volume+5,postinc2
  9386   0010DE  C050  FFDE         	movff	??_find_volume+6,postinc2
  9387   0010E2  C051  FFDE         	movff	??_find_volume+7,postinc2
  9388   0010E6                     
  9389                           ; BSR set to: 0
  9390                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  9391   0010E6  0E02               	movlw	2
  9392   0010E8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  9393   0010EA  B4D8               	btfsc	status,2,c
  9394   0010EC  EF7A  F008         	goto	u7521
  9395   0010F0  EF7C  F008         	goto	u7520
  9396   0010F4                     u7521:
  9397   0010F4  EFC2  F008         	goto	l5525
  9398   0010F8                     u7520:
  9399   0010F8                     
  9400                           ; BSR set to: 0
  9401   0010F8  EE20 F012          	lfsr	2,18
  9402   0010FC  5198               	movf	find_volume@fs& (0+255),w,b
  9403   0010FE  26D9               	addwf	fsr2l,f,c
  9404   001100  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9405   001102  22DA               	addwfc	fsr2h,f,c
  9406   001104  CFDE F04A          	movff	postinc2,??_find_volume
  9407   001108  CFDE F04B          	movff	postinc2,??_find_volume+1
  9408   00110C  CFDE F04C          	movff	postinc2,??_find_volume+2
  9409   001110  CFDE F04D          	movff	postinc2,??_find_volume+3
  9410   001114  0E01               	movlw	1
  9411   001116  144A               	andwf	??_find_volume^0,w,c
  9412   001118  6E4E               	movwf	(??_find_volume+4)^0,c
  9413   00111A  0E00               	movlw	0
  9414   00111C  144B               	andwf	(??_find_volume+1)^0,w,c
  9415   00111E  6E4F               	movwf	(??_find_volume+5)^0,c
  9416   001120  0E00               	movlw	0
  9417   001122  144C               	andwf	(??_find_volume+2)^0,w,c
  9418   001124  6E50               	movwf	(??_find_volume+6)^0,c
  9419   001126  0E00               	movlw	0
  9420   001128  144D               	andwf	(??_find_volume+3)^0,w,c
  9421   00112A  6E51               	movwf	(??_find_volume+7)^0,c
  9422   00112C  EE20 F012          	lfsr	2,18
  9423   001130  5198               	movf	find_volume@fs& (0+255),w,b
  9424   001132  26D9               	addwf	fsr2l,f,c
  9425   001134  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9426   001136  22DA               	addwfc	fsr2h,f,c
  9427   001138  CFDE F001          	movff	postinc2,___lmul@multiplier
  9428   00113C  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  9429   001140  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  9430   001144  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  9431   001148  0E03               	movlw	3
  9432   00114A  6E05               	movwf	___lmul@multiplicand^0,c
  9433   00114C  0E00               	movlw	0
  9434   00114E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  9435   001150  0E00               	movlw	0
  9436   001152  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  9437   001154  0E00               	movlw	0
  9438   001156  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  9439   001158  EC6B  F02D         	call	___lmul	;wreg free
  9440   00115C  90D8               	bcf	status,0,c
  9441   00115E  3204               	rrcf	(?___lmul+3)^0,f,c
  9442   001160  3203               	rrcf	(?___lmul+2)^0,f,c
  9443   001162  3202               	rrcf	(?___lmul+1)^0,f,c
  9444   001164  3201               	rrcf	?___lmul^0,f,c
  9445   001166  504E               	movf	(??_find_volume+4)^0,w,c
  9446   001168  2401               	addwf	?___lmul^0,w,c
  9447   00116A  0100               	movlb	0	; () banked
  9448   00116C  6F76               	movwf	find_volume@szbfat& (0+255),b
  9449   00116E  504F               	movf	(??_find_volume+5)^0,w,c
  9450   001170  2002               	addwfc	(?___lmul+1)^0,w,c
  9451   001172  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  9452   001174  5050               	movf	(??_find_volume+6)^0,w,c
  9453   001176  2003               	addwfc	(?___lmul+2)^0,w,c
  9454   001178  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  9455   00117A  5051               	movf	(??_find_volume+7)^0,w,c
  9456   00117C  2004               	addwfc	(?___lmul+3)^0,w,c
  9457   00117E  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  9458   001180  EFD9  F008         	goto	l608
  9459   001184                     l5525:
  9460                           
  9461                           ; BSR set to: 0
  9462   001184  EE20 F012          	lfsr	2,18
  9463   001188  5198               	movf	find_volume@fs& (0+255),w,b
  9464   00118A  26D9               	addwf	fsr2l,f,c
  9465   00118C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9466   00118E  22DA               	addwfc	fsr2h,f,c
  9467   001190  CFDE F04A          	movff	postinc2,??_find_volume
  9468   001194  CFDE F04B          	movff	postinc2,??_find_volume+1
  9469   001198  CFDE F04C          	movff	postinc2,??_find_volume+2
  9470   00119C  CFDE F04D          	movff	postinc2,??_find_volume+3
  9471   0011A0  90D8               	bcf	status,0,c
  9472   0011A2  344A               	rlcf	??_find_volume^0,w,c
  9473   0011A4  6F76               	movwf	find_volume@szbfat& (0+255),b
  9474   0011A6  344B               	rlcf	(??_find_volume+1)^0,w,c
  9475   0011A8  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  9476   0011AA  344C               	rlcf	(??_find_volume+2)^0,w,c
  9477   0011AC  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  9478   0011AE  344D               	rlcf	(??_find_volume+3)^0,w,c
  9479   0011B0  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  9480   0011B2                     l608:
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  9484   0011B2  0EFF               	movlw	255
  9485   0011B4  2576               	addwf	find_volume@szbfat& (0+255),w,b
  9486   0011B6  6E4A               	movwf	??_find_volume^0,c
  9487   0011B8  0E01               	movlw	1
  9488   0011BA  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  9489   0011BC  6E4B               	movwf	(??_find_volume+1)^0,c
  9490   0011BE  0E00               	movlw	0
  9491   0011C0  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  9492   0011C2  6E4C               	movwf	(??_find_volume+2)^0,c
  9493   0011C4  0E00               	movlw	0
  9494   0011C6  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  9495   0011C8  6E4D               	movwf	(??_find_volume+3)^0,c
  9496   0011CA  0E0A               	movlw	10
  9497   0011CC  EFED  F008         	goto	u7530
  9498   0011D0                     u7535:
  9499   0011D0  90D8               	bcf	status,0,c
  9500   0011D2  324D               	rrcf	(??_find_volume+3)^0,f,c
  9501   0011D4  324C               	rrcf	(??_find_volume+2)^0,f,c
  9502   0011D6  324B               	rrcf	(??_find_volume+1)^0,f,c
  9503   0011D8  324A               	rrcf	??_find_volume^0,f,c
  9504   0011DA                     u7530:
  9505   0011DA  2EE8               	decfsz	wreg,f,c
  9506   0011DC  EFE8  F008         	goto	u7535
  9507   0011E0  EE20 F016          	lfsr	2,22
  9508   0011E4  5198               	movf	find_volume@fs& (0+255),w,b
  9509   0011E6  26D9               	addwf	fsr2l,f,c
  9510   0011E8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9511   0011EA  22DA               	addwfc	fsr2h,f,c
  9512   0011EC  504A               	movf	??_find_volume^0,w,c
  9513   0011EE  5CDE               	subwf	postinc2,w,c
  9514   0011F0  504B               	movf	(??_find_volume+1)^0,w,c
  9515   0011F2  58DE               	subwfb	postinc2,w,c
  9516   0011F4  504C               	movf	(??_find_volume+2)^0,w,c
  9517   0011F6  58DE               	subwfb	postinc2,w,c
  9518   0011F8  504D               	movf	(??_find_volume+3)^0,w,c
  9519   0011FA  58DE               	subwfb	postinc2,w,c
  9520   0011FC  B0D8               	btfsc	status,0,c
  9521   0011FE  EF03  F009         	goto	u7541
  9522   001202  EF05  F009         	goto	u7540
  9523   001206                     u7541:
  9524   001206  EF07  F009         	goto	l5531
  9525   00120A                     u7540:
  9526   00120A  EFC1  F005         	goto	l5409
  9527   00120E                     l5531:
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  9531   00120E  EE20 F00E          	lfsr	2,14
  9532   001212  5198               	movf	find_volume@fs& (0+255),w,b
  9533   001214  26D9               	addwf	fsr2l,f,c
  9534   001216  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9535   001218  22DA               	addwfc	fsr2h,f,c
  9536   00121A  0EFF               	movlw	255
  9537   00121C  6EDE               	movwf	postinc2,c
  9538   00121E  0EFF               	movlw	255
  9539   001220  6EDE               	movwf	postinc2,c
  9540   001222  0EFF               	movlw	255
  9541   001224  6EDE               	movwf	postinc2,c
  9542   001226  0EFF               	movlw	255
  9543   001228  6EDD               	movwf	postdec2,c
  9544   00122A  52DD               	movf	postdec2,f,c
  9545   00122C  52DD               	movf	postdec2,f,c
  9546   00122E  EE10 F00A          	lfsr	1,10
  9547   001232  5198               	movf	find_volume@fs& (0+255),w,b
  9548   001234  26E1               	addwf	fsr1l,f,c
  9549   001236  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9550   001238  22E2               	addwfc	fsr1h,f,c
  9551   00123A  CFDE FFE6          	movff	postinc2,postinc1
  9552   00123E  CFDE FFE6          	movff	postinc2,postinc1
  9553   001242  CFDE FFE6          	movff	postinc2,postinc1
  9554   001246  CFDE FFE6          	movff	postinc2,postinc1
  9555   00124A                     
  9556                           ; BSR set to: 0
  9557                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  9558   00124A  EE20 F005          	lfsr	2,5
  9559   00124E  5198               	movf	find_volume@fs& (0+255),w,b
  9560   001250  26D9               	addwf	fsr2l,f,c
  9561   001252  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9562   001254  22DA               	addwfc	fsr2h,f,c
  9563   001256  0E80               	movlw	128
  9564   001258  6EDF               	movwf	indf2,c
  9565   00125A                     
  9566                           ; BSR set to: 0
  9567                           ;ff.c: 2333:  if (fmt == 3
  9568   00125A  0E03               	movlw	3
  9569   00125C  1997               	xorwf	find_volume@fmt& (0+255),w,b
  9570   00125E  A4D8               	btfss	status,2,c
  9571   001260  EF34  F009         	goto	u7551
  9572   001264  EF36  F009         	goto	u7550
  9573   001268                     u7551:
  9574   001268  EFD1  F009         	goto	l5549
  9575   00126C                     u7550:
  9576   00126C                     
  9577                           ; BSR set to: 0
  9578   00126C  EE20 F05E          	lfsr	2,94
  9579   001270  5198               	movf	find_volume@fs& (0+255),w,b
  9580   001272  26D9               	addwf	fsr2l,f,c
  9581   001274  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9582   001276  22DA               	addwfc	fsr2h,f,c
  9583   001278  04DE               	decf	postinc2,w,c
  9584   00127A  10DE               	iorwf	postinc2,w,c
  9585   00127C  A4D8               	btfss	status,2,c
  9586   00127E  EF43  F009         	goto	u7561
  9587   001282  EF45  F009         	goto	u7560
  9588   001286                     u7561:
  9589   001286  EFD1  F009         	goto	l5549
  9590   00128A                     u7560:
  9591   00128A                     
  9592                           ; BSR set to: 0
  9593   00128A  C098  F030         	movff	find_volume@fs,move_window@fs
  9594   00128E  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  9595   001292  0E01               	movlw	1
  9596   001294  2591               	addwf	find_volume@bsect& (0+255),w,b
  9597   001296  6E32               	movwf	move_window@sector^0,c
  9598   001298  0E00               	movlw	0
  9599   00129A  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  9600   00129C  6E33               	movwf	(move_window@sector+1)^0,c
  9601   00129E  0E00               	movlw	0
  9602   0012A0  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  9603   0012A2  6E34               	movwf	(move_window@sector+2)^0,c
  9604   0012A4  0E00               	movlw	0
  9605   0012A6  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  9606   0012A8  6E35               	movwf	(move_window@sector+3)^0,c
  9607   0012AA  ECE8  F02A         	call	_move_window	;wreg free
  9608   0012AE  0900               	iorlw	0
  9609   0012B0  A4D8               	btfss	status,2,c
  9610   0012B2  EF5D  F009         	goto	u7571
  9611   0012B6  EF5F  F009         	goto	u7570
  9612   0012BA                     u7571:
  9613   0012BA  EFD1  F009         	goto	l5549
  9614   0012BE                     u7570:
  9615   0012BE                     
  9616                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  9617   0012BE  0100               	movlb	0	; () banked
  9618   0012C0  EE20 F005          	lfsr	2,5
  9619   0012C4  5198               	movf	find_volume@fs& (0+255),w,b
  9620   0012C6  26D9               	addwf	fsr2l,f,c
  9621   0012C8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9622   0012CA  22DA               	addwfc	fsr2h,f,c
  9623   0012CC  6ADF               	clrf	indf2,c
  9624                           
  9625                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  9626   0012CE  EE22 F02C          	lfsr	2,556
  9627   0012D2  5198               	movf	find_volume@fs& (0+255),w,b
  9628   0012D4  26D9               	addwf	fsr2l,f,c
  9629   0012D6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9630   0012D8  22DA               	addwfc	fsr2h,f,c
  9631   0012DA  0E55               	movlw	85
  9632   0012DC  18DE               	xorwf	postinc2,w,c
  9633   0012DE  E107               	bnz	u7581
  9634   0012E0  0EAA               	movlw	170
  9635   0012E2  18DE               	xorwf	postinc2,w,c
  9636   0012E4  A4D8               	btfss	status,2,c
  9637   0012E6  EF77  F009         	goto	u7581
  9638   0012EA  EF79  F009         	goto	u7580
  9639   0012EE                     u7581:
  9640   0012EE  EFD1  F009         	goto	l5549
  9641   0012F2                     u7580:
  9642   0012F2                     
  9643                           ; BSR set to: 0
  9644   0012F2  EE20 F02E          	lfsr	2,46
  9645   0012F6  5198               	movf	find_volume@fs& (0+255),w,b
  9646   0012F8  26D9               	addwf	fsr2l,f,c
  9647   0012FA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9648   0012FC  22DA               	addwfc	fsr2h,f,c
  9649   0012FE  0E52               	movlw	82
  9650   001300  18DE               	xorwf	postinc2,w,c
  9651   001302  E10D               	bnz	u7591
  9652   001304  0E52               	movlw	82
  9653   001306  18DE               	xorwf	postinc2,w,c
  9654   001308  E10A               	bnz	u7591
  9655   00130A  0E61               	movlw	97
  9656   00130C  18DE               	xorwf	postinc2,w,c
  9657   00130E  E107               	bnz	u7591
  9658   001310  0E41               	movlw	65
  9659   001312  18DE               	xorwf	postinc2,w,c
  9660   001314  A4D8               	btfss	status,2,c
  9661   001316  EF8F  F009         	goto	u7591
  9662   00131A  EF91  F009         	goto	u7590
  9663   00131E                     u7591:
  9664   00131E  EFD1  F009         	goto	l5549
  9665   001322                     u7590:
  9666   001322                     
  9667                           ; BSR set to: 0
  9668   001322  EE22 F012          	lfsr	2,530
  9669   001326  5198               	movf	find_volume@fs& (0+255),w,b
  9670   001328  26D9               	addwf	fsr2l,f,c
  9671   00132A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9672   00132C  22DA               	addwfc	fsr2h,f,c
  9673   00132E  0E72               	movlw	114
  9674   001330  18DE               	xorwf	postinc2,w,c
  9675   001332  E10D               	bnz	u7601
  9676   001334  0E72               	movlw	114
  9677   001336  18DE               	xorwf	postinc2,w,c
  9678   001338  E10A               	bnz	u7601
  9679   00133A  0E41               	movlw	65
  9680   00133C  18DE               	xorwf	postinc2,w,c
  9681   00133E  E107               	bnz	u7601
  9682   001340  0E61               	movlw	97
  9683   001342  18DE               	xorwf	postinc2,w,c
  9684   001344  A4D8               	btfss	status,2,c
  9685   001346  EFA7  F009         	goto	u7601
  9686   00134A  EFA9  F009         	goto	u7600
  9687   00134E                     u7601:
  9688   00134E  EFD1  F009         	goto	l5549
  9689   001352                     u7600:
  9690   001352                     
  9691                           ; BSR set to: 0
  9692                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  9693   001352  EE22 F016          	lfsr	2,534
  9694   001356  5198               	movf	find_volume@fs& (0+255),w,b
  9695   001358  26D9               	addwf	fsr2l,f,c
  9696   00135A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9697   00135C  22DA               	addwfc	fsr2h,f,c
  9698   00135E  EE10 F00E          	lfsr	1,14
  9699   001362  5198               	movf	find_volume@fs& (0+255),w,b
  9700   001364  26E1               	addwf	fsr1l,f,c
  9701   001366  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9702   001368  22E2               	addwfc	fsr1h,f,c
  9703   00136A  CFDE FFE6          	movff	postinc2,postinc1
  9704   00136E  CFDE FFE6          	movff	postinc2,postinc1
  9705   001372  CFDE FFE6          	movff	postinc2,postinc1
  9706   001376  CFDE FFE6          	movff	postinc2,postinc1
  9707                           
  9708                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  9709   00137A  EE22 F01A          	lfsr	2,538
  9710   00137E  5198               	movf	find_volume@fs& (0+255),w,b
  9711   001380  26D9               	addwf	fsr2l,f,c
  9712   001382  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9713   001384  22DA               	addwfc	fsr2h,f,c
  9714   001386  EE10 F00A          	lfsr	1,10
  9715   00138A  5198               	movf	find_volume@fs& (0+255),w,b
  9716   00138C  26E1               	addwf	fsr1l,f,c
  9717   00138E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9718   001390  22E2               	addwfc	fsr1h,f,c
  9719   001392  CFDE FFE6          	movff	postinc2,postinc1
  9720   001396  CFDE FFE6          	movff	postinc2,postinc1
  9721   00139A  CFDE FFE6          	movff	postinc2,postinc1
  9722   00139E  CFDE FFE6          	movff	postinc2,postinc1
  9723   0013A2                     l5549:
  9724                           
  9725                           ;ff.c: 2352:  fs->fs_type = fmt;
  9726   0013A2  C098  FFD9         	movff	find_volume@fs,fsr2l
  9727   0013A6  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  9728   0013AA  C097  FFDF         	movff	find_volume@fmt,indf2
  9729   0013AE                     
  9730                           ;ff.c: 2353:  fs->id = ++Fsid;
  9731   0013AE  0100               	movlb	0	; () banked
  9732   0013B0  4BD2               	infsnz	_Fsid& (0+255),f,b
  9733   0013B2  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  9734   0013B4  EE20 F006          	lfsr	2,6
  9735   0013B8  5198               	movf	find_volume@fs& (0+255),w,b
  9736   0013BA  26D9               	addwf	fsr2l,f,c
  9737   0013BC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9738   0013BE  22DA               	addwfc	fsr2h,f,c
  9739   0013C0  C0D2  FFDE         	movff	_Fsid,postinc2
  9740   0013C4  C0D3  FFDD         	movff	_Fsid+1,postdec2
  9741   0013C8  EF86  F004         	goto	l5329
  9742   0013CC                     l566:
  9743                           
  9744                           ; BSR set to: 0
  9745   0013CC  0012               	return		;funcret
  9746   0013CE                     __end_of_find_volume:
  9747                           	callstack 0
  9748                           
  9749 ;; *************** function _get_ldnumber *****************
  9750 ;; Defined at:
  9751 ;;		line 2114 in file "ff.c"
  9752 ;; Parameters:    Size  Location     Type
  9753 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  9754 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  tt              2   10[COMRAM] PTR const unsigned char 
  9757 ;;		 -> STR_2(9), STR_1(1), 
  9758 ;;  i               2    8[COMRAM] unsigned short 
  9759 ;;  vol             2    6[COMRAM] int 
  9760 ;;  tp              2    4[COMRAM] PTR const unsigned char 
  9761 ;;		 -> STR_2(9), STR_1(1), 
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  2    0[COMRAM] int 
  9764 ;; Registers used:
  9765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9771 ;;      Params:         2       0       0       0       0       0       0       0       0
  9772 ;;      Locals:         8       0       0       0       0       0       0       0       0
  9773 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9774 ;;      Totals:        12       0       0       0       0       0       0       0       0
  9775 ;;Total ram usage:       12 bytes
  9776 ;; Hardware stack levels used: 1
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_find_volume
  9781 ;;		_f_mount
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           	psect	text21
  9786   004F5C                     __ptext21:
  9787                           	callstack 0
  9788   004F5C                     _get_ldnumber:
  9789                           	callstack 28
  9790   004F5C                     
  9791                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  9792   004F5C  6807               	setf	get_ldnumber@vol^0,c
  9793   004F5E  6808               	setf	(get_ldnumber@vol+1)^0,c
  9794   004F60                     
  9795                           ;ff.c: 2129:  if (*path) {
  9796   004F60  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9797   004F64  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9798   004F68  50DE               	movf	postinc2,w,c
  9799   004F6A  10DE               	iorwf	postinc2,w,c
  9800   004F6C  B4D8               	btfsc	status,2,c
  9801   004F6E  EFBB  F027         	goto	u6781
  9802   004F72  EFBD  F027         	goto	u6780
  9803   004F76                     u6781:
  9804   004F76  EF37  F028         	goto	l5105
  9805   004F7A                     u6780:
  9806   004F7A                     
  9807                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  9808   004F7A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9809   004F7E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9810   004F82  CFDE F00B          	movff	postinc2,get_ldnumber@tt
  9811   004F86  CFDD F00C          	movff	postdec2,get_ldnumber@tt+1
  9812   004F8A  EFC9  F027         	goto	l5079
  9813   004F8E                     l5077:
  9814   004F8E  4A0B               	infsnz	get_ldnumber@tt^0,f,c
  9815   004F90  2A0C               	incf	(get_ldnumber@tt+1)^0,f,c
  9816   004F92                     l5079:
  9817   004F92  C00B  FFF6         	movff	get_ldnumber@tt,tblptrl
  9818   004F96  C00C  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9819   004F9A                     	if	0	;tblptru may be non-zero
  9820   004F9A                     	endif
  9821   004F9A                     	if	0	;tblptru may be non-zero
  9822   004F9A                     	endif
  9823   004F9A  0E20               	movlw	32
  9824   004F9C  0008               	tblrd		*
  9825   004F9E  64F5               	cpfsgt	tablat,c
  9826   004FA0  EFD4  F027         	goto	u6791
  9827   004FA4  EFD6  F027         	goto	u6790
  9828   004FA8                     u6791:
  9829   004FA8  EFE4  F027         	goto	l5087
  9830   004FAC                     u6790:
  9831   004FAC  C00B  FFF6         	movff	get_ldnumber@tt,tblptrl
  9832   004FB0  C00C  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9833   004FB4                     	if	0	;tblptru may be non-zero
  9834   004FB4                     	endif
  9835   004FB4                     	if	0	;tblptru may be non-zero
  9836   004FB4                     	endif
  9837   004FB4  0008               	tblrd		*
  9838   004FB6  50F5               	movf	tablat,w,c
  9839   004FB8  0A3A               	xorlw	58
  9840   004FBA  A4D8               	btfss	status,2,c
  9841   004FBC  EFE2  F027         	goto	u6801
  9842   004FC0  EFE4  F027         	goto	u6800
  9843   004FC4                     u6801:
  9844   004FC4  EFC7  F027         	goto	l5077
  9845   004FC8                     u6800:
  9846   004FC8                     l5087:
  9847                           
  9848                           ;ff.c: 2131:   if (*tt == ':') {
  9849   004FC8  C00B  FFF6         	movff	get_ldnumber@tt,tblptrl
  9850   004FCC  C00C  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9851   004FD0                     	if	0	;tblptru may be non-zero
  9852   004FD0                     	endif
  9853   004FD0                     	if	0	;tblptru may be non-zero
  9854   004FD0                     	endif
  9855   004FD0  0008               	tblrd		*
  9856   004FD2  50F5               	movf	tablat,w,c
  9857   004FD4  0A3A               	xorlw	58
  9858   004FD6  A4D8               	btfss	status,2,c
  9859   004FD8  EFF0  F027         	goto	u6811
  9860   004FDC  EFF2  F027         	goto	u6810
  9861   004FE0                     u6811:
  9862   004FE0  EF3D  F028         	goto	l5109
  9863   004FE4                     u6810:
  9864   004FE4                     
  9865                           ;ff.c: 2132:    tp = *path;
  9866   004FE4  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9867   004FE8  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9868   004FEC  CFDE F005          	movff	postinc2,get_ldnumber@tp
  9869   004FF0  CFDD F006          	movff	postdec2,get_ldnumber@tp+1
  9870   004FF4                     
  9871                           ;ff.c: 2133:    i = *tp++ - '0';
  9872   004FF4  C005  FFF6         	movff	get_ldnumber@tp,tblptrl
  9873   004FF8  C006  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  9874   004FFC                     	if	0	;tblptru may be non-zero
  9875   004FFC                     	endif
  9876   004FFC                     	if	0	;tblptru may be non-zero
  9877   004FFC                     	endif
  9878   004FFC  0008               	tblrd		*
  9879   004FFE  CFF5 F003          	movff	tablat,??_get_ldnumber
  9880   005002  0ED0               	movlw	208
  9881   005004  2403               	addwf	??_get_ldnumber^0,w,c
  9882   005006  6E09               	movwf	get_ldnumber@i^0,c
  9883   005008  6A0A               	clrf	(get_ldnumber@i+1)^0,c
  9884   00500A  0EFF               	movlw	255
  9885   00500C  220A               	addwfc	(get_ldnumber@i+1)^0,f,c
  9886   00500E  4A05               	infsnz	get_ldnumber@tp^0,f,c
  9887   005010  2A06               	incf	(get_ldnumber@tp+1)^0,f,c
  9888   005012                     
  9889                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  9890   005012  500A               	movf	(get_ldnumber@i+1)^0,w,c
  9891   005014  E107               	bnz	u6821
  9892   005016  0E0A               	movlw	10
  9893   005018  5C09               	subwf	get_ldnumber@i^0,w,c
  9894   00501A  B0D8               	btfsc	status,0,c
  9895   00501C  EF12  F028         	goto	u6821
  9896   005020  EF14  F028         	goto	u6820
  9897   005024                     u6821:
  9898   005024  EF37  F028         	goto	l5105
  9899   005028                     u6820:
  9900   005028  500B               	movf	get_ldnumber@tt^0,w,c
  9901   00502A  1805               	xorwf	get_ldnumber@tp^0,w,c
  9902   00502C  E107               	bnz	u6831
  9903   00502E  500C               	movf	(get_ldnumber@tt+1)^0,w,c
  9904   005030  1806               	xorwf	(get_ldnumber@tp+1)^0,w,c
  9905   005032  A4D8               	btfss	status,2,c
  9906   005034  EF1E  F028         	goto	u6831
  9907   005038  EF20  F028         	goto	u6830
  9908   00503C                     u6831:
  9909   00503C  EF37  F028         	goto	l5105
  9910   005040                     u6830:
  9911   005040                     
  9912                           ;ff.c: 2135:     if (i < 1) {
  9913   005040  5009               	movf	get_ldnumber@i^0,w,c
  9914   005042  100A               	iorwf	(get_ldnumber@i+1)^0,w,c
  9915   005044  A4D8               	btfss	status,2,c
  9916   005046  EF27  F028         	goto	u6841
  9917   00504A  EF29  F028         	goto	u6840
  9918   00504E                     u6841:
  9919   00504E  EF37  F028         	goto	l5105
  9920   005052                     u6840:
  9921   005052                     
  9922                           ;ff.c: 2136:      vol = (int)i;
  9923   005052  C009  F007         	movff	get_ldnumber@i,get_ldnumber@vol
  9924   005056  C00A  F008         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  9925   00505A                     
  9926                           ;ff.c: 2137:      *path = ++tt;
  9927   00505A  4A0B               	infsnz	get_ldnumber@tt^0,f,c
  9928   00505C  2A0C               	incf	(get_ldnumber@tt+1)^0,f,c
  9929   00505E  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9930   005062  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9931   005066  C00B  FFDE         	movff	get_ldnumber@tt,postinc2
  9932   00506A  C00C  FFDD         	movff	get_ldnumber@tt+1,postdec2
  9933   00506E                     l5105:
  9934                           
  9935                           ;ff.c: 2156:    return vol;
  9936   00506E  C007  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9937   005072  C008  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9938   005076  EF43  F028         	goto	l555
  9939   00507A                     l5109:
  9940                           
  9941                           ;ff.c: 2161:   vol = 0;
  9942   00507A  0E00               	movlw	0
  9943   00507C  6E08               	movwf	(get_ldnumber@vol+1)^0,c
  9944   00507E  0E00               	movlw	0
  9945   005080  6E07               	movwf	get_ldnumber@vol^0,c
  9946   005082  EF37  F028         	goto	l5105
  9947   005086                     l555:
  9948   005086  0012               	return		;funcret
  9949   005088                     __end_of_get_ldnumber:
  9950                           	callstack 0
  9951                           
  9952 ;; *************** function _disk_initialize *****************
  9953 ;; Defined at:
  9954 ;;		line 299 in file "diskio.c"
  9955 ;; Parameters:    Size  Location     Type
  9956 ;;  pdrv            1    wreg     unsigned char 
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;  pdrv            1   17[COMRAM] unsigned char 
  9959 ;;  ocr             4   18[COMRAM] unsigned char [4]
  9960 ;;  tmr             2   26[COMRAM] unsigned short 
  9961 ;;  n               1   28[COMRAM] unsigned char 
  9962 ;;  ty              1   25[COMRAM] unsigned char 
  9963 ;;  cmd             1   24[COMRAM] unsigned char 
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      unsigned char 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0
  9974 ;;      Locals:        12       0       0       0       0       0       0       0       0
  9975 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9976 ;;      Totals:        13       0       0       0       0       0       0       0       0
  9977 ;;Total ram usage:       13 bytes
  9978 ;; Hardware stack levels used: 1
  9979 ;; Hardware stack levels required when called: 5
  9980 ;; This function calls:
  9981 ;;		_SPI_Exchange
  9982 ;;		_SPI_Init_Master
  9983 ;;		_deselect
  9984 ;;		_send_cmd
  9985 ;; This function is called by:
  9986 ;;		_find_volume
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           	psect	text22
  9991   003F06                     __ptext22:
  9992                           	callstack 0
  9993   003F06                     _disk_initialize:
  9994                           	callstack 23
  9995                           
  9996                           ;incstack = 0
  9997                           ;disk_initialize@pdrv stored from wreg
  9998   003F06  6E12               	movwf	disk_initialize@pdrv^0,c
  9999   003F08                     
 10000                           ;diskio.c: 300:  BYTE pdrv;diskio.c: 302: {;diskio.c: 303:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 304:  UINT tmr;;diskio.c: 307:  if (pdrv) return 0x01;
 10001   003F08  5012               	movf	disk_initialize@pdrv^0,w,c
 10002   003F0A  B4D8               	btfsc	status,2,c
 10003   003F0C  EF8A  F01F         	goto	u6061
 10004   003F10  EF8C  F01F         	goto	u6060
 10005   003F14                     u6061:
 10006   003F14  EF8F  F01F         	goto	l131
 10007   003F18                     u6060:
 10008   003F18  0E01               	movlw	1
 10009   003F1A  EFED  F020         	goto	l132
 10010   003F1E                     l131:
 10011                           
 10012                           ;diskio.c: 309:  if (Stat & 0x02) return Stat;
 10013   003F1E  0100               	movlb	0	; () banked
 10014   003F20  A3F7               	btfss	_Stat& (0+255),1,b
 10015   003F22  EF95  F01F         	goto	u6071
 10016   003F26  EF97  F01F         	goto	u6070
 10017   003F2A                     u6071:
 10018   003F2A  EF9B  F01F         	goto	l4709
 10019   003F2E                     u6070:
 10020   003F2E                     l4705:
 10021   003F2E  0100               	movlb	0	; () banked
 10022   003F30  51F7               	movf	_Stat& (0+255),w,b
 10023   003F32  EFED  F020         	goto	l132
 10024   003F36                     l4709:
 10025                           
 10026                           ; BSR set to: 0
 10027                           ;diskio.c: 311:  SPI_Init_Master();
 10028   003F36  ECB3  F02E         	call	_SPI_Init_Master	;wreg free
 10029   003F3A                     
 10030                           ;diskio.c: 312:  for (n = 10; n; n--) SPI_Exchange(0xFF);
 10031   003F3A  0E0A               	movlw	10
 10032   003F3C  6E1D               	movwf	disk_initialize@n^0,c
 10033   003F3E  EFA5  F01F         	goto	l4717
 10034   003F42                     l4713:
 10035   003F42  0EFF               	movlw	255
 10036   003F44  ECE9  F02E         	call	_SPI_Exchange
 10037   003F48  061D               	decf	disk_initialize@n^0,f,c
 10038   003F4A                     l4717:
 10039   003F4A  501D               	movf	disk_initialize@n^0,w,c
 10040   003F4C  A4D8               	btfss	status,2,c
 10041   003F4E  EFAB  F01F         	goto	u6081
 10042   003F52  EFAD  F01F         	goto	u6080
 10043   003F56                     u6081:
 10044   003F56  EFA1  F01F         	goto	l4713
 10045   003F5A                     u6080:
 10046   003F5A                     
 10047                           ;diskio.c: 314:  ty = 0;
 10048   003F5A  0E00               	movlw	0
 10049   003F5C  6E1A               	movwf	disk_initialize@ty^0,c
 10050   003F5E                     
 10051                           ;diskio.c: 315:  if (send_cmd((0), 0) == 1) {
 10052   003F5E  0E00               	movlw	0
 10053   003F60  6E0B               	movwf	send_cmd@arg^0,c
 10054   003F62  0E00               	movlw	0
 10055   003F64  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10056   003F66  0E00               	movlw	0
 10057   003F68  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10058   003F6A  0E00               	movlw	0
 10059   003F6C  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10060   003F6E  0E00               	movlw	0
 10061   003F70  ECFE  F02D         	call	_send_cmd
 10062   003F74  06E8               	decf	wreg,f,c
 10063   003F76  A4D8               	btfss	status,2,c
 10064   003F78  EFC0  F01F         	goto	u6091
 10065   003F7C  EFC2  F01F         	goto	u6090
 10066   003F80                     u6091:
 10067   003F80  EFDD  F020         	goto	l4793
 10068   003F84                     u6090:
 10069   003F84                     
 10070                           ;diskio.c: 316:   if (send_cmd((8), 0x1AA) == 1) {
 10071   003F84  0EAA               	movlw	170
 10072   003F86  6E0B               	movwf	send_cmd@arg^0,c
 10073   003F88  0E01               	movlw	1
 10074   003F8A  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10075   003F8C  0E00               	movlw	0
 10076   003F8E  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10077   003F90  0E00               	movlw	0
 10078   003F92  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10079   003F94  0E08               	movlw	8
 10080   003F96  ECFE  F02D         	call	_send_cmd
 10081   003F9A  06E8               	decf	wreg,f,c
 10082   003F9C  A4D8               	btfss	status,2,c
 10083   003F9E  EFD3  F01F         	goto	u6101
 10084   003FA2  EFD5  F01F         	goto	u6100
 10085   003FA6                     u6101:
 10086   003FA6  EF70  F020         	goto	l4773
 10087   003FAA                     u6100:
 10088   003FAA                     
 10089                           ;diskio.c: 317:    for (n = 0; n < 4; n++) ocr[n] = SPI_Exchange(0xFF);
 10090   003FAA  0E00               	movlw	0
 10091   003FAC  6E1D               	movwf	disk_initialize@n^0,c
 10092   003FAE                     l4731:
 10093   003FAE  0E13               	movlw	low disk_initialize@ocr
 10094   003FB0  241D               	addwf	disk_initialize@n^0,w,c
 10095   003FB2  6ED9               	movwf	fsr2l,c
 10096   003FB4  6ADA               	clrf	fsr2h,c
 10097   003FB6  0E00               	movlw	high disk_initialize@ocr
 10098   003FB8  22DA               	addwfc	fsr2h,f,c
 10099   003FBA  0EFF               	movlw	255
 10100   003FBC  ECE9  F02E         	call	_SPI_Exchange
 10101   003FC0  6EDF               	movwf	indf2,c
 10102   003FC2  2A1D               	incf	disk_initialize@n^0,f,c
 10103   003FC4  0E03               	movlw	3
 10104   003FC6  641D               	cpfsgt	disk_initialize@n^0,c
 10105   003FC8  EFE8  F01F         	goto	u6111
 10106   003FCC  EFEA  F01F         	goto	u6110
 10107   003FD0                     u6111:
 10108   003FD0  EFD7  F01F         	goto	l4731
 10109   003FD4                     u6110:
 10110   003FD4                     
 10111                           ;diskio.c: 318:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 10112   003FD4  0415               	decf	(disk_initialize@ocr+2)^0,w,c
 10113   003FD6  A4D8               	btfss	status,2,c
 10114   003FD8  EFF0  F01F         	goto	u6121
 10115   003FDC  EFF2  F01F         	goto	u6120
 10116   003FE0                     u6121:
 10117   003FE0  EFDD  F020         	goto	l4793
 10118   003FE4                     u6120:
 10119   003FE4  0EAA               	movlw	170
 10120   003FE6  1816               	xorwf	(disk_initialize@ocr+3)^0,w,c
 10121   003FE8  A4D8               	btfss	status,2,c
 10122   003FEA  EFF9  F01F         	goto	u6131
 10123   003FEE  EFFB  F01F         	goto	u6130
 10124   003FF2                     u6131:
 10125   003FF2  EFDD  F020         	goto	l4793
 10126   003FF6                     u6130:
 10127   003FF6                     
 10128                           ;diskio.c: 319:     for (tmr = 1000; tmr; tmr--) {
 10129   003FF6  0E03               	movlw	3
 10130   003FF8  6E1C               	movwf	(disk_initialize@tmr+1)^0,c
 10131   003FFA  0EE8               	movlw	232
 10132   003FFC  6E1B               	movwf	disk_initialize@tmr^0,c
 10133   003FFE  EF21  F020         	goto	l142
 10134   004002                     l4743:
 10135                           
 10136                           ;diskio.c: 320:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
 10137   004002  0E00               	movlw	0
 10138   004004  6E0B               	movwf	send_cmd@arg^0,c
 10139   004006  0E00               	movlw	0
 10140   004008  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10141   00400A  0E00               	movlw	0
 10142   00400C  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10143   00400E  0E40               	movlw	64
 10144   004010  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10145   004012  0EA9               	movlw	169
 10146   004014  ECFE  F02D         	call	_send_cmd
 10147   004018  0900               	iorlw	0
 10148   00401A  A4D8               	btfss	status,2,c
 10149   00401C  EF12  F020         	goto	u6141
 10150   004020  EF14  F020         	goto	u6140
 10151   004024                     u6141:
 10152   004024  EF16  F020         	goto	l4747
 10153   004028                     u6140:
 10154   004028  EF2A  F020         	goto	l4751
 10155   00402C                     l4747:
 10156                           
 10157                           ;diskio.c: 321:      _delay((unsigned long)((1)*(20000000UL/4000.0)));
 10158   00402C  0E07               	movlw	7
 10159   00402E  6E11               	movwf	??_disk_initialize^0,c
 10160   004030  0E7D               	movlw	125
 10161   004032                     u8687:
 10162   004032  2EE8               	decfsz	wreg,f,c
 10163   004034  D7FE               	bra	u8687
 10164   004036  2E11               	decfsz	??_disk_initialize^0,f,c
 10165   004038  D7FC               	bra	u8687
 10166   00403A  F000               	nop	
 10167   00403C                     
 10168                           ;diskio.c: 322:     }
 10169   00403C  061B               	decf	disk_initialize@tmr^0,f,c
 10170   00403E  A0D8               	btfss	status,0,c
 10171   004040  061C               	decf	(disk_initialize@tmr+1)^0,f,c
 10172   004042                     l142:
 10173   004042  501B               	movf	disk_initialize@tmr^0,w,c
 10174   004044  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10175   004046  A4D8               	btfss	status,2,c
 10176   004048  EF28  F020         	goto	u6151
 10177   00404C  EF2A  F020         	goto	u6150
 10178   004050                     u6151:
 10179   004050  EF01  F020         	goto	l4743
 10180   004054                     u6150:
 10181   004054                     l4751:
 10182                           
 10183                           ;diskio.c: 323:     if (tmr && send_cmd((58), 0) == 0) {
 10184   004054  501B               	movf	disk_initialize@tmr^0,w,c
 10185   004056  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10186   004058  B4D8               	btfsc	status,2,c
 10187   00405A  EF31  F020         	goto	u6161
 10188   00405E  EF33  F020         	goto	u6160
 10189   004062                     u6161:
 10190   004062  EFDD  F020         	goto	l153
 10191   004066                     u6160:
 10192   004066  0E00               	movlw	0
 10193   004068  6E0B               	movwf	send_cmd@arg^0,c
 10194   00406A  0E00               	movlw	0
 10195   00406C  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10196   00406E  0E00               	movlw	0
 10197   004070  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10198   004072  0E00               	movlw	0
 10199   004074  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10200   004076  0E3A               	movlw	58
 10201   004078  ECFE  F02D         	call	_send_cmd
 10202   00407C  0900               	iorlw	0
 10203   00407E  A4D8               	btfss	status,2,c
 10204   004080  EF44  F020         	goto	u6171
 10205   004084  EF46  F020         	goto	u6170
 10206   004088                     u6171:
 10207   004088  EFDD  F020         	goto	l153
 10208   00408C                     u6170:
 10209   00408C                     
 10210                           ;diskio.c: 324:      for (n = 0; n < 4; n++) ocr[n] = SPI_Exchange(0xFF);
 10211   00408C  0E00               	movlw	0
 10212   00408E  6E1D               	movwf	disk_initialize@n^0,c
 10213   004090                     l4761:
 10214   004090  0E13               	movlw	low disk_initialize@ocr
 10215   004092  241D               	addwf	disk_initialize@n^0,w,c
 10216   004094  6ED9               	movwf	fsr2l,c
 10217   004096  6ADA               	clrf	fsr2h,c
 10218   004098  0E00               	movlw	high disk_initialize@ocr
 10219   00409A  22DA               	addwfc	fsr2h,f,c
 10220   00409C  0EFF               	movlw	255
 10221   00409E  ECE9  F02E         	call	_SPI_Exchange
 10222   0040A2  6EDF               	movwf	indf2,c
 10223   0040A4  2A1D               	incf	disk_initialize@n^0,f,c
 10224   0040A6  0E03               	movlw	3
 10225   0040A8  641D               	cpfsgt	disk_initialize@n^0,c
 10226   0040AA  EF59  F020         	goto	u6181
 10227   0040AE  EF5B  F020         	goto	u6180
 10228   0040B2                     u6181:
 10229   0040B2  EF48  F020         	goto	l4761
 10230   0040B6                     u6180:
 10231   0040B6                     
 10232                           ;diskio.c: 325:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
 10233   0040B6  BC13               	btfsc	disk_initialize@ocr^0,6,c
 10234   0040B8  EF60  F020         	goto	u6191
 10235   0040BC  EF62  F020         	goto	u6190
 10236   0040C0                     u6191:
 10237   0040C0  EF68  F020         	goto	l4769
 10238   0040C4                     u6190:
 10239   0040C4  0E00               	movlw	0
 10240   0040C6  6E18               	movwf	(_disk_initialize$641+1)^0,c
 10241   0040C8  0E04               	movlw	4
 10242   0040CA  6E17               	movwf	_disk_initialize$641^0,c
 10243   0040CC  EF6C  F020         	goto	l4771
 10244   0040D0                     l4769:
 10245   0040D0  0E00               	movlw	0
 10246   0040D2  6E18               	movwf	(_disk_initialize$641+1)^0,c
 10247   0040D4  0E0C               	movlw	12
 10248   0040D6  6E17               	movwf	_disk_initialize$641^0,c
 10249   0040D8                     l4771:
 10250   0040D8  C017  F01A         	movff	_disk_initialize$641,disk_initialize@ty
 10251   0040DC  EFDD  F020         	goto	l4793
 10252   0040E0                     l4773:
 10253                           
 10254                           ;diskio.c: 329:    if (send_cmd((0x80+41), 0) <= 1) {
 10255   0040E0  0E00               	movlw	0
 10256   0040E2  6E0B               	movwf	send_cmd@arg^0,c
 10257   0040E4  0E00               	movlw	0
 10258   0040E6  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10259   0040E8  0E00               	movlw	0
 10260   0040EA  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10261   0040EC  0E00               	movlw	0
 10262   0040EE  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10263   0040F0  0EA9               	movlw	169
 10264   0040F2  ECFE  F02D         	call	_send_cmd
 10265   0040F6  6E11               	movwf	??_disk_initialize^0,c
 10266   0040F8  0E02               	movlw	2
 10267   0040FA  6011               	cpfslt	??_disk_initialize^0,c
 10268   0040FC  EF82  F020         	goto	u6201
 10269   004100  EF84  F020         	goto	u6200
 10270   004104                     u6201:
 10271   004104  EF8A  F020         	goto	l4777
 10272   004108                     u6200:
 10273   004108                     
 10274                           ;diskio.c: 330:     ty = 0x02; cmd = (0x80+41);
 10275   004108  0E02               	movlw	2
 10276   00410A  6E1A               	movwf	disk_initialize@ty^0,c
 10277   00410C  0EA9               	movlw	169
 10278   00410E  6E19               	movwf	disk_initialize@cmd^0,c
 10279                           
 10280                           ;diskio.c: 331:    } else {
 10281   004110  EF8E  F020         	goto	l155
 10282   004114                     l4777:
 10283                           
 10284                           ;diskio.c: 332:     ty = 0x01; cmd = (1);
 10285   004114  0E01               	movlw	1
 10286   004116  6E1A               	movwf	disk_initialize@ty^0,c
 10287   004118  0E01               	movlw	1
 10288   00411A  6E19               	movwf	disk_initialize@cmd^0,c
 10289   00411C                     l155:
 10290                           
 10291                           ;diskio.c: 334:    for (tmr = 1000; tmr; tmr--) {
 10292   00411C  0E03               	movlw	3
 10293   00411E  6E1C               	movwf	(disk_initialize@tmr+1)^0,c
 10294   004120  0EE8               	movlw	232
 10295   004122  6E1B               	movwf	disk_initialize@tmr^0,c
 10296   004124  EFB4  F020         	goto	l156
 10297   004128                     l4779:
 10298                           
 10299                           ;diskio.c: 335:     if (send_cmd(cmd, 0) == 0) break;
 10300   004128  0E00               	movlw	0
 10301   00412A  6E0B               	movwf	send_cmd@arg^0,c
 10302   00412C  0E00               	movlw	0
 10303   00412E  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10304   004130  0E00               	movlw	0
 10305   004132  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10306   004134  0E00               	movlw	0
 10307   004136  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10308   004138  5019               	movf	disk_initialize@cmd^0,w,c
 10309   00413A  ECFE  F02D         	call	_send_cmd
 10310   00413E  0900               	iorlw	0
 10311   004140  A4D8               	btfss	status,2,c
 10312   004142  EFA5  F020         	goto	u6211
 10313   004146  EFA7  F020         	goto	u6210
 10314   00414A                     u6211:
 10315   00414A  EFA9  F020         	goto	l4783
 10316   00414E                     u6210:
 10317   00414E  EFBD  F020         	goto	l4787
 10318   004152                     l4783:
 10319                           
 10320                           ;diskio.c: 336:     _delay((unsigned long)((1)*(20000000UL/4000.0)));
 10321   004152  0E07               	movlw	7
 10322   004154  6E11               	movwf	??_disk_initialize^0,c
 10323   004156  0E7D               	movlw	125
 10324   004158                     u8697:
 10325   004158  2EE8               	decfsz	wreg,f,c
 10326   00415A  D7FE               	bra	u8697
 10327   00415C  2E11               	decfsz	??_disk_initialize^0,f,c
 10328   00415E  D7FC               	bra	u8697
 10329   004160  F000               	nop	
 10330   004162                     
 10331                           ;diskio.c: 337:    }
 10332   004162  061B               	decf	disk_initialize@tmr^0,f,c
 10333   004164  A0D8               	btfss	status,0,c
 10334   004166  061C               	decf	(disk_initialize@tmr+1)^0,f,c
 10335   004168                     l156:
 10336   004168  501B               	movf	disk_initialize@tmr^0,w,c
 10337   00416A  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10338   00416C  A4D8               	btfss	status,2,c
 10339   00416E  EFBB  F020         	goto	u6221
 10340   004172  EFBD  F020         	goto	u6220
 10341   004176                     u6221:
 10342   004176  EF94  F020         	goto	l4779
 10343   00417A                     u6220:
 10344   00417A                     l4787:
 10345                           
 10346                           ;diskio.c: 338:    if (!tmr || send_cmd((16), 512) != 0)
 10347   00417A  501B               	movf	disk_initialize@tmr^0,w,c
 10348   00417C  101C               	iorwf	(disk_initialize@tmr+1)^0,w,c
 10349   00417E  B4D8               	btfsc	status,2,c
 10350   004180  EFC4  F020         	goto	u6231
 10351   004184  EFC6  F020         	goto	u6230
 10352   004188                     u6231:
 10353   004188  EFD9  F020         	goto	l4791
 10354   00418C                     u6230:
 10355   00418C  0E00               	movlw	0
 10356   00418E  6E0B               	movwf	send_cmd@arg^0,c
 10357   004190  0E02               	movlw	2
 10358   004192  6E0C               	movwf	(send_cmd@arg+1)^0,c
 10359   004194  0E00               	movlw	0
 10360   004196  6E0D               	movwf	(send_cmd@arg+2)^0,c
 10361   004198  0E00               	movlw	0
 10362   00419A  6E0E               	movwf	(send_cmd@arg+3)^0,c
 10363   00419C  0E10               	movlw	16
 10364   00419E  ECFE  F02D         	call	_send_cmd
 10365   0041A2  0900               	iorlw	0
 10366   0041A4  B4D8               	btfsc	status,2,c
 10367   0041A6  EFD7  F020         	goto	u6241
 10368   0041AA  EFD9  F020         	goto	u6240
 10369   0041AE                     u6241:
 10370   0041AE  EFDD  F020         	goto	l4793
 10371   0041B2                     u6240:
 10372   0041B2                     l4791:
 10373                           
 10374                           ;diskio.c: 339:     ty = 0;
 10375   0041B2  0E00               	movlw	0
 10376   0041B4  6E1A               	movwf	disk_initialize@ty^0,c
 10377   0041B6  EFDD  F020         	goto	l4793
 10378   0041BA                     l153:
 10379   0041BA                     l4793:
 10380                           
 10381                           ;diskio.c: 342:  CardType = ty;
 10382   0041BA  C01A  F0D6         	movff	disk_initialize@ty,_CardType
 10383   0041BE                     
 10384                           ;diskio.c: 343:  deselect();
 10385   0041BE  EC02  F02F         	call	_deselect	;wreg free
 10386   0041C2                     
 10387                           ;diskio.c: 345:  if (ty) {
 10388   0041C2  501A               	movf	disk_initialize@ty^0,w,c
 10389   0041C4  B4D8               	btfsc	status,2,c
 10390   0041C6  EFE7  F020         	goto	u6251
 10391   0041CA  EFE9  F020         	goto	u6250
 10392   0041CE                     u6251:
 10393   0041CE  EF97  F01F         	goto	l4705
 10394   0041D2                     u6250:
 10395   0041D2                     
 10396                           ;diskio.c: 346:   Stat &= ~0x01;
 10397   0041D2  0100               	movlb	0	; () banked
 10398   0041D4  91F7               	bcf	_Stat& (0+255),0,b
 10399   0041D6  EF97  F01F         	goto	l4705
 10400   0041DA                     l132:
 10401   0041DA  0012               	return		;funcret
 10402   0041DC                     __end_of_disk_initialize:
 10403                           	callstack 0
 10404                           
 10405 ;; *************** function _SPI_Init_Master *****************
 10406 ;; Defined at:
 10407 ;;		line 4 in file "SPI_libreria.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;		None
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;		None
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, status,2
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10421 ;;      Params:         0       0       0       0       0       0       0       0       0
 10422 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10423 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10424 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10425 ;;Total ram usage:        0 bytes
 10426 ;; Hardware stack levels used: 1
 10427 ;; This function calls:
 10428 ;;		Nothing
 10429 ;; This function is called by:
 10430 ;;		_main
 10431 ;;		_disk_initialize
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           	psect	text23
 10436   005D66                     __ptext23:
 10437                           	callstack 0
 10438   005D66                     _SPI_Init_Master:
 10439                           	callstack 27
 10440   005D66                     
 10441                           ;SPI_libreria.c: 6:     ADCON1bits.PCFG = 0x0F;
 10442   005D66  0E0F               	movlw	15
 10443   005D68  12C1               	iorwf	193,f,c	;volatile
 10444   005D6A                     
 10445                           ;SPI_libreria.c: 8:     TRISBbits.TRISB0 =1;
 10446   005D6A  8093               	bsf	147,0,c	;volatile
 10447   005D6C                     
 10448                           ;SPI_libreria.c: 9:     TRISBbits.TRISB1=0;
 10449   005D6C  9293               	bcf	147,1,c	;volatile
 10450   005D6E                     
 10451                           ;SPI_libreria.c: 10:     TRISAbits.TRISA5=0;
 10452   005D6E  9A92               	bcf	146,5,c	;volatile
 10453   005D70                     
 10454                           ;SPI_libreria.c: 11:     TRISCbits.TRISC7=0;
 10455   005D70  9E94               	bcf	148,7,c	;volatile
 10456   005D72                     
 10457                           ;SPI_libreria.c: 14:     LATA5 = 1;
 10458   005D72  8A89               	bsf	3977,5,c	;volatile
 10459   005D74                     
 10460                           ;SPI_libreria.c: 15:     PIR1bits.SPPIF = 0;
 10461   005D74  9E9E               	bcf	158,7,c	;volatile
 10462   005D76                     
 10463                           ;SPI_libreria.c: 16:     SSPSTATbits.BF = 0;
 10464   005D76  90C7               	bcf	199,0,c	;volatile
 10465   005D78                     
 10466                           ;SPI_libreria.c: 17:     SSPSTATbits.CKE = 1;
 10467   005D78  8CC7               	bsf	199,6,c	;volatile
 10468   005D7A                     
 10469                           ;SPI_libreria.c: 18:     SSPSTATbits.SMP = 0;
 10470   005D7A  9EC7               	bcf	199,7,c	;volatile
 10471                           
 10472                           ;SPI_libreria.c: 19:     SSPCON1bits.SSPM = 2;
 10473   005D7C  50C6               	movf	198,w,c	;volatile
 10474   005D7E  0BF0               	andlw	-16
 10475   005D80  0902               	iorlw	2
 10476   005D82  6EC6               	movwf	198,c	;volatile
 10477   005D84                     
 10478                           ;SPI_libreria.c: 20:     SSPCON1bits.CKP = 0;
 10479   005D84  98C6               	bcf	198,4,c	;volatile
 10480   005D86                     
 10481                           ;SPI_libreria.c: 21:     SSPCON1bits.SSPEN = 1;
 10482   005D86  8AC6               	bsf	198,5,c	;volatile
 10483   005D88                     
 10484                           ;SPI_libreria.c: 22:     SSPCON1bits.SSPOV = 0;
 10485   005D88  9CC6               	bcf	198,6,c	;volatile
 10486   005D8A                     
 10487                           ;SPI_libreria.c: 23:     SSPCON1bits.WCOL = 0;
 10488   005D8A  9EC6               	bcf	198,7,c	;volatile
 10489   005D8C  0012               	return		;funcret
 10490   005D8E                     __end_of_SPI_Init_Master:
 10491                           	callstack 0
 10492                           
 10493 ;; *************** function _check_fs *****************
 10494 ;; Defined at:
 10495 ;;		line 2175 in file "ff.c"
 10496 ;; Parameters:    Size  Location     Type
 10497 ;;  fs              2   58[COMRAM] PTR struct .
 10498 ;;		 -> NULL(0), FatFs(558), 
 10499 ;;  sect            4   60[COMRAM] unsigned long 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      unsigned char 
 10504 ;; Registers used:
 10505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10511 ;;      Params:         6       0       0       0       0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10513 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10514 ;;      Totals:        10       0       0       0       0       0       0       0       0
 10515 ;;Total ram usage:       10 bytes
 10516 ;; Hardware stack levels used: 1
 10517 ;; Hardware stack levels required when called: 8
 10518 ;; This function calls:
 10519 ;;		_move_window
 10520 ;; This function is called by:
 10521 ;;		_find_volume
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           	psect	text24
 10526   005088                     __ptext24:
 10527                           	callstack 0
 10528   005088                     _check_fs:
 10529                           	callstack 20
 10530   005088                     
 10531                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
 10532   005088  EE20 F004          	lfsr	2,4
 10533   00508C  503B               	movf	check_fs@fs^0,w,c
 10534   00508E  26D9               	addwf	fsr2l,f,c
 10535   005090  503C               	movf	(check_fs@fs+1)^0,w,c
 10536   005092  22DA               	addwfc	fsr2h,f,c
 10537   005094  6ADF               	clrf	indf2,c
 10538   005096  EE20 F02A          	lfsr	2,42
 10539   00509A  503B               	movf	check_fs@fs^0,w,c
 10540   00509C  26D9               	addwf	fsr2l,f,c
 10541   00509E  503C               	movf	(check_fs@fs+1)^0,w,c
 10542   0050A0  22DA               	addwfc	fsr2h,f,c
 10543   0050A2  0EFF               	movlw	255
 10544   0050A4  6EDE               	movwf	postinc2,c
 10545   0050A6  0EFF               	movlw	255
 10546   0050A8  6EDE               	movwf	postinc2,c
 10547   0050AA  0EFF               	movlw	255
 10548   0050AC  6EDE               	movwf	postinc2,c
 10549   0050AE  0EFF               	movlw	255
 10550   0050B0  6EDD               	movwf	postdec2,c
 10551   0050B2                     
 10552                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
 10553   0050B2  C03B  F030         	movff	check_fs@fs,move_window@fs
 10554   0050B6  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
 10555   0050BA  C03D  F032         	movff	check_fs@sect,move_window@sector
 10556   0050BE  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
 10557   0050C2  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
 10558   0050C6  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
 10559   0050CA  ECE8  F02A         	call	_move_window	;wreg free
 10560   0050CE  0900               	iorlw	0
 10561   0050D0  B4D8               	btfsc	status,2,c
 10562   0050D2  EF6D  F028         	goto	u6851
 10563   0050D6  EF6F  F028         	goto	u6850
 10564   0050DA                     u6851:
 10565   0050DA  EF72  F028         	goto	l5123
 10566   0050DE                     u6850:
 10567   0050DE                     
 10568                           ;ff.c: 2182:   return 3;
 10569   0050DE  0E03               	movlw	3
 10570   0050E0  EFD1  F028         	goto	l559
 10571   0050E4                     l5123:
 10572                           
 10573                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
 10574   0050E4  EE22 F02C          	lfsr	2,556
 10575   0050E8  503B               	movf	check_fs@fs^0,w,c
 10576   0050EA  26D9               	addwf	fsr2l,f,c
 10577   0050EC  503C               	movf	(check_fs@fs+1)^0,w,c
 10578   0050EE  22DA               	addwfc	fsr2h,f,c
 10579   0050F0  0E55               	movlw	85
 10580   0050F2  18DE               	xorwf	postinc2,w,c
 10581   0050F4  E109               	bnz	u6860
 10582   0050F6  0EAA               	movlw	170
 10583   0050F8  18DE               	xorwf	postinc2,w,c
 10584   0050FA  B4D8               	btfsc	status,2,c
 10585   0050FC  EF82  F028         	goto	u6861
 10586   005100  EF84  F028         	goto	u6860
 10587   005104                     u6861:
 10588   005104  EF87  F028         	goto	l5129
 10589   005108                     u6860:
 10590   005108                     
 10591                           ;ff.c: 2185:   return 2;
 10592   005108  0E02               	movlw	2
 10593   00510A  EFD1  F028         	goto	l559
 10594   00510E                     l5129:
 10595                           
 10596                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
 10597   00510E  EE20 F064          	lfsr	2,100
 10598   005112  503B               	movf	check_fs@fs^0,w,c
 10599   005114  26D9               	addwf	fsr2l,f,c
 10600   005116  503C               	movf	(check_fs@fs+1)^0,w,c
 10601   005118  22DA               	addwfc	fsr2h,f,c
 10602   00511A  0EFF               	movlw	255
 10603   00511C  14DE               	andwf	postinc2,w,c
 10604   00511E  6E41               	movwf	??_check_fs^0,c
 10605   005120  0EFF               	movlw	255
 10606   005122  14DE               	andwf	postinc2,w,c
 10607   005124  6E42               	movwf	(??_check_fs+1)^0,c
 10608   005126  0EFF               	movlw	255
 10609   005128  14DE               	andwf	postinc2,w,c
 10610   00512A  6E43               	movwf	(??_check_fs+2)^0,c
 10611   00512C  0E00               	movlw	0
 10612   00512E  14DE               	andwf	postinc2,w,c
 10613   005130  6E44               	movwf	(??_check_fs+3)^0,c
 10614   005132  0E46               	movlw	70
 10615   005134  1841               	xorwf	??_check_fs^0,w,c
 10616   005136  E10B               	bnz	u6871
 10617   005138  0E41               	movlw	65
 10618   00513A  1842               	xorwf	(??_check_fs+1)^0,w,c
 10619   00513C  E108               	bnz	u6871
 10620   00513E  0E54               	movlw	84
 10621   005140  1843               	xorwf	(??_check_fs+2)^0,w,c
 10622   005142  1044               	iorwf	(??_check_fs+3)^0,w,c
 10623   005144  A4D8               	btfss	status,2,c
 10624   005146  EFA7  F028         	goto	u6871
 10625   00514A  EFA9  F028         	goto	u6870
 10626   00514E                     u6871:
 10627   00514E  EFAC  F028         	goto	l5135
 10628   005152                     u6870:
 10629   005152                     l5131:
 10630                           
 10631                           ;ff.c: 2188:   return 0;
 10632   005152  0E00               	movlw	0
 10633   005154  EFD1  F028         	goto	l559
 10634   005158                     l5135:
 10635                           
 10636                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
 10637   005158  EE20 F080          	lfsr	2,128
 10638   00515C  503B               	movf	check_fs@fs^0,w,c
 10639   00515E  26D9               	addwf	fsr2l,f,c
 10640   005160  503C               	movf	(check_fs@fs+1)^0,w,c
 10641   005162  22DA               	addwfc	fsr2h,f,c
 10642   005164  0EFF               	movlw	255
 10643   005166  14DE               	andwf	postinc2,w,c
 10644   005168  6E41               	movwf	??_check_fs^0,c
 10645   00516A  0EFF               	movlw	255
 10646   00516C  14DE               	andwf	postinc2,w,c
 10647   00516E  6E42               	movwf	(??_check_fs+1)^0,c
 10648   005170  0EFF               	movlw	255
 10649   005172  14DE               	andwf	postinc2,w,c
 10650   005174  6E43               	movwf	(??_check_fs+2)^0,c
 10651   005176  0E00               	movlw	0
 10652   005178  14DE               	andwf	postinc2,w,c
 10653   00517A  6E44               	movwf	(??_check_fs+3)^0,c
 10654   00517C  0E46               	movlw	70
 10655   00517E  1841               	xorwf	??_check_fs^0,w,c
 10656   005180  E10B               	bnz	u6881
 10657   005182  0E41               	movlw	65
 10658   005184  1842               	xorwf	(??_check_fs+1)^0,w,c
 10659   005186  E108               	bnz	u6881
 10660   005188  0E54               	movlw	84
 10661   00518A  1843               	xorwf	(??_check_fs+2)^0,w,c
 10662   00518C  1044               	iorwf	(??_check_fs+3)^0,w,c
 10663   00518E  A4D8               	btfss	status,2,c
 10664   005190  EFCC  F028         	goto	u6881
 10665   005194  EFCE  F028         	goto	u6880
 10666   005198                     u6881:
 10667   005198  EFD0  F028         	goto	l5141
 10668   00519C                     u6880:
 10669   00519C  EFA9  F028         	goto	l5131
 10670   0051A0                     l5141:
 10671                           
 10672                           ;ff.c: 2192:  return 1;
 10673   0051A0  0E01               	movlw	1
 10674   0051A2                     l559:
 10675   0051A2  0012               	return		;funcret
 10676   0051A4                     __end_of_check_fs:
 10677                           	callstack 0
 10678                           
 10679 ;; *************** function ___lmul *****************
 10680 ;; Defined at:
 10681 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul32.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;  multiplier      4    0[COMRAM] unsigned long 
 10684 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  product         4    8[COMRAM] unsigned long 
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  4    0[COMRAM] unsigned long 
 10689 ;; Registers used:
 10690 ;;		wreg, status,2, status,0
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10696 ;;      Params:         8       0       0       0       0       0       0       0       0
 10697 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10699 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10700 ;;Total ram usage:       12 bytes
 10701 ;; Hardware stack levels used: 1
 10702 ;; This function calls:
 10703 ;;		Nothing
 10704 ;; This function is called by:
 10705 ;;		_clust2sect
 10706 ;;		_find_volume
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text25
 10711   005AD6                     __ptext25:
 10712                           	callstack 0
 10713   005AD6                     ___lmul:
 10714                           	callstack 28
 10715   005AD6  0E00               	movlw	0
 10716   005AD8  6E09               	movwf	___lmul@product^0,c
 10717   005ADA  0E00               	movlw	0
 10718   005ADC  6E0A               	movwf	(___lmul@product+1)^0,c
 10719   005ADE  0E00               	movlw	0
 10720   005AE0  6E0B               	movwf	(___lmul@product+2)^0,c
 10721   005AE2  0E00               	movlw	0
 10722   005AE4  6E0C               	movwf	(___lmul@product+3)^0,c
 10723   005AE6                     l4247:
 10724   005AE6  A001               	btfss	___lmul@multiplier^0,0,c
 10725   005AE8  EF78  F02D         	goto	u5181
 10726   005AEC  EF7A  F02D         	goto	u5180
 10727   005AF0                     u5181:
 10728   005AF0  EF82  F02D         	goto	l4251
 10729   005AF4                     u5180:
 10730   005AF4  5005               	movf	___lmul@multiplicand^0,w,c
 10731   005AF6  2609               	addwf	___lmul@product^0,f,c
 10732   005AF8  5006               	movf	(___lmul@multiplicand+1)^0,w,c
 10733   005AFA  220A               	addwfc	(___lmul@product+1)^0,f,c
 10734   005AFC  5007               	movf	(___lmul@multiplicand+2)^0,w,c
 10735   005AFE  220B               	addwfc	(___lmul@product+2)^0,f,c
 10736   005B00  5008               	movf	(___lmul@multiplicand+3)^0,w,c
 10737   005B02  220C               	addwfc	(___lmul@product+3)^0,f,c
 10738   005B04                     l4251:
 10739   005B04  90D8               	bcf	status,0,c
 10740   005B06  3605               	rlcf	___lmul@multiplicand^0,f,c
 10741   005B08  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
 10742   005B0A  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
 10743   005B0C  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
 10744   005B0E  90D8               	bcf	status,0,c
 10745   005B10  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
 10746   005B12  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
 10747   005B14  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
 10748   005B16  3201               	rrcf	___lmul@multiplier^0,f,c
 10749   005B18  5001               	movf	___lmul@multiplier^0,w,c
 10750   005B1A  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
 10751   005B1C  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
 10752   005B1E  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
 10753   005B20  A4D8               	btfss	status,2,c
 10754   005B22  EF95  F02D         	goto	u5191
 10755   005B26  EF97  F02D         	goto	u5190
 10756   005B2A                     u5191:
 10757   005B2A  EF73  F02D         	goto	l4247
 10758   005B2E                     u5190:
 10759   005B2E  C009  F001         	movff	___lmul@product,?___lmul
 10760   005B32  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10761   005B36  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10762   005B3A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10763   005B3E  0012               	return		;funcret
 10764   005B40                     __end_of___lmul:
 10765                           	callstack 0
 10766                           
 10767 ;; *************** function ___lldiv *****************
 10768 ;; Defined at:
 10769 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\__lldiv.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  dividend        4    0[COMRAM] unsigned long 
 10772 ;;  divisor         4    4[COMRAM] unsigned long 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;  quotient        4    8[COMRAM] unsigned long 
 10775 ;;  counter         1   12[COMRAM] unsigned char 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  4    0[COMRAM] unsigned long 
 10778 ;; Registers used:
 10779 ;;		wreg, status,2, status,0
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10785 ;;      Params:         8       0       0       0       0       0       0       0       0
 10786 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10788 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10789 ;;Total ram usage:       13 bytes
 10790 ;; Hardware stack levels used: 1
 10791 ;; This function calls:
 10792 ;;		Nothing
 10793 ;; This function is called by:
 10794 ;;		_find_volume
 10795 ;;		_f_lseek
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           	psect	text26
 10800   005800                     __ptext26:
 10801                           	callstack 0
 10802   005800                     ___lldiv:
 10803                           	callstack 28
 10804   005800  0E00               	movlw	0
 10805   005802  6E09               	movwf	___lldiv@quotient^0,c
 10806   005804  0E00               	movlw	0
 10807   005806  6E0A               	movwf	(___lldiv@quotient+1)^0,c
 10808   005808  0E00               	movlw	0
 10809   00580A  6E0B               	movwf	(___lldiv@quotient+2)^0,c
 10810   00580C  0E00               	movlw	0
 10811   00580E  6E0C               	movwf	(___lldiv@quotient+3)^0,c
 10812   005810  5005               	movf	___lldiv@divisor^0,w,c
 10813   005812  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
 10814   005814  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
 10815   005816  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
 10816   005818  B4D8               	btfsc	status,2,c
 10817   00581A  EF11  F02C         	goto	u6941
 10818   00581E  EF13  F02C         	goto	u6940
 10819   005822                     u6941:
 10820   005822  EF49  F02C         	goto	l797
 10821   005826                     u6940:
 10822   005826  0E01               	movlw	1
 10823   005828  6E0D               	movwf	___lldiv@counter^0,c
 10824   00582A  EF1D  F02C         	goto	l5171
 10825   00582E                     l5169:
 10826   00582E  90D8               	bcf	status,0,c
 10827   005830  3605               	rlcf	___lldiv@divisor^0,f,c
 10828   005832  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
 10829   005834  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
 10830   005836  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
 10831   005838  2A0D               	incf	___lldiv@counter^0,f,c
 10832   00583A                     l5171:
 10833   00583A  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
 10834   00583C  EF22  F02C         	goto	u6951
 10835   005840  EF24  F02C         	goto	u6950
 10836   005844                     u6951:
 10837   005844  EF17  F02C         	goto	l5169
 10838   005848                     u6950:
 10839   005848                     l5173:
 10840   005848  90D8               	bcf	status,0,c
 10841   00584A  3609               	rlcf	___lldiv@quotient^0,f,c
 10842   00584C  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
 10843   00584E  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
 10844   005850  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
 10845   005852  5005               	movf	___lldiv@divisor^0,w,c
 10846   005854  5C01               	subwf	___lldiv@dividend^0,w,c
 10847   005856  5006               	movf	(___lldiv@divisor+1)^0,w,c
 10848   005858  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
 10849   00585A  5007               	movf	(___lldiv@divisor+2)^0,w,c
 10850   00585C  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
 10851   00585E  5008               	movf	(___lldiv@divisor+3)^0,w,c
 10852   005860  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
 10853   005862  A0D8               	btfss	status,0,c
 10854   005864  EF36  F02C         	goto	u6961
 10855   005868  EF38  F02C         	goto	u6960
 10856   00586C                     u6961:
 10857   00586C  EF41  F02C         	goto	l5181
 10858   005870                     u6960:
 10859   005870  5005               	movf	___lldiv@divisor^0,w,c
 10860   005872  5E01               	subwf	___lldiv@dividend^0,f,c
 10861   005874  5006               	movf	(___lldiv@divisor+1)^0,w,c
 10862   005876  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
 10863   005878  5007               	movf	(___lldiv@divisor+2)^0,w,c
 10864   00587A  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
 10865   00587C  5008               	movf	(___lldiv@divisor+3)^0,w,c
 10866   00587E  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
 10867   005880  8009               	bsf	___lldiv@quotient^0,0,c
 10868   005882                     l5181:
 10869   005882  90D8               	bcf	status,0,c
 10870   005884  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
 10871   005886  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
 10872   005888  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
 10873   00588A  3205               	rrcf	___lldiv@divisor^0,f,c
 10874   00588C  2E0D               	decfsz	___lldiv@counter^0,f,c
 10875   00588E  EF24  F02C         	goto	l5173
 10876   005892                     l797:
 10877   005892  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10878   005896  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10879   00589A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10880   00589E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10881   0058A2  0012               	return		;funcret
 10882   0058A4                     __end_of___lldiv:
 10883                           	callstack 0
 10884                           
 10885 ;; *************** function _f_close *****************
 10886 ;; Defined at:
 10887 ;;		line 2861 in file "ff.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;  fp              2   71[COMRAM] PTR struct .
 10890 ;;		 -> Fil(32), 
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  res             1   73[COMRAM] enum E95
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      enum E3587
 10895 ;; Registers used:
 10896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10902 ;;      Params:         2       0       0       0       0       0       0       0       0
 10903 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10905 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10906 ;;Total ram usage:        3 bytes
 10907 ;; Hardware stack levels used: 1
 10908 ;; Hardware stack levels required when called: 9
 10909 ;; This function calls:
 10910 ;;		_f_sync
 10911 ;;		_validate
 10912 ;; This function is called by:
 10913 ;;		_main
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text27
 10918   005C54                     __ptext27:
 10919                           	callstack 0
 10920   005C54                     _f_close:
 10921                           	callstack 21
 10922   005C54                     
 10923                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10924   005C54  C048  F043         	movff	f_close@fp,f_sync@fp
 10925   005C58  C049  F044         	movff	f_close@fp+1,f_sync@fp+1
 10926   005C5C  EC28  F025         	call	_f_sync	;wreg free
 10927   005C60  6E4A               	movwf	f_close@res^0,c
 10928   005C62                     
 10929                           ;ff.c: 2870:  if (res == FR_OK)
 10930   005C62  504A               	movf	f_close@res^0,w,c
 10931   005C64  A4D8               	btfss	status,2,c
 10932   005C66  EF37  F02E         	goto	u8181
 10933   005C6A  EF39  F02E         	goto	u8180
 10934   005C6E                     u8181:
 10935   005C6E  EF4E  F02E         	goto	l722
 10936   005C72                     u8180:
 10937   005C72                     
 10938                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10939   005C72  C048  F002         	movff	f_close@fp,validate@obj
 10940   005C76  C049  F003         	movff	f_close@fp+1,validate@obj+1
 10941   005C7A  EC21  F02A         	call	_validate	;wreg free
 10942   005C7E  6E4A               	movwf	f_close@res^0,c
 10943   005C80                     
 10944                           ;ff.c: 2874:   if (res == FR_OK) {
 10945   005C80  504A               	movf	f_close@res^0,w,c
 10946   005C82  A4D8               	btfss	status,2,c
 10947   005C84  EF46  F02E         	goto	u8191
 10948   005C88  EF48  F02E         	goto	u8190
 10949   005C8C                     u8191:
 10950   005C8C  EF4E  F02E         	goto	l722
 10951   005C90                     u8190:
 10952   005C90                     
 10953                           ;ff.c: 2882:     fp->fs = 0;
 10954   005C90  C048  FFD9         	movff	f_close@fp,fsr2l
 10955   005C94  C049  FFDA         	movff	f_close@fp+1,fsr2h
 10956   005C98  6ADE               	clrf	postinc2,c
 10957   005C9A  6ADD               	clrf	postdec2,c
 10958   005C9C                     l722:
 10959   005C9C  0012               	return		;funcret
 10960   005C9E                     __end_of_f_close:
 10961                           	callstack 0
 10962                           
 10963 ;; *************** function _f_sync *****************
 10964 ;; Defined at:
 10965 ;;		line 2813 in file "ff.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  fp              2   66[COMRAM] PTR struct .
 10968 ;;		 -> Fil(32), 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  tm              4    0        unsigned long 
 10971 ;;  dir             2   69[COMRAM] PTR unsigned char 
 10972 ;;		 -> NULL(0), FatFs(558), 
 10973 ;;  res             1   68[COMRAM] enum E95
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      enum E95
 10976 ;; Registers used:
 10977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10983 ;;      Params:         2       0       0       0       0       0       0       0       0
 10984 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10986 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10987 ;;Total ram usage:        5 bytes
 10988 ;; Hardware stack levels used: 1
 10989 ;; Hardware stack levels required when called: 8
 10990 ;; This function calls:
 10991 ;;		_move_window
 10992 ;;		_st_clust
 10993 ;;		_sync_fs
 10994 ;;		_validate
 10995 ;; This function is called by:
 10996 ;;		_f_close
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text28
 11001   004A50                     __ptext28:
 11002                           	callstack 0
 11003   004A50                     _f_sync:
 11004                           	callstack 21
 11005   004A50                     
 11006                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 11007   004A50  C043  F002         	movff	f_sync@fp,validate@obj
 11008   004A54  C044  F003         	movff	f_sync@fp+1,validate@obj+1
 11009   004A58  EC21  F02A         	call	_validate	;wreg free
 11010   004A5C  6E45               	movwf	f_sync@res^0,c
 11011   004A5E                     
 11012                           ;ff.c: 2823:  if (res == FR_OK) {
 11013   004A5E  5045               	movf	f_sync@res^0,w,c
 11014   004A60  A4D8               	btfss	status,2,c
 11015   004A62  EF35  F025         	goto	u7611
 11016   004A66  EF37  F025         	goto	u7610
 11017   004A6A                     u7611:
 11018   004A6A  EFD4  F025         	goto	l5585
 11019   004A6E                     u7610:
 11020   004A6E                     
 11021                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 11022   004A6E  EE20 F004          	lfsr	2,4
 11023   004A72  5043               	movf	f_sync@fp^0,w,c
 11024   004A74  26D9               	addwf	fsr2l,f,c
 11025   004A76  5044               	movf	(f_sync@fp+1)^0,w,c
 11026   004A78  22DA               	addwfc	fsr2h,f,c
 11027   004A7A  AADF               	btfss	indf2,5,c
 11028   004A7C  EF42  F025         	goto	u7621
 11029   004A80  EF44  F025         	goto	u7620
 11030   004A84                     u7621:
 11031   004A84  EFD4  F025         	goto	l5585
 11032   004A88                     u7620:
 11033   004A88                     
 11034                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 11035   004A88  C043  FFD9         	movff	f_sync@fp,fsr2l
 11036   004A8C  C044  FFDA         	movff	f_sync@fp+1,fsr2h
 11037   004A90  CFDE F030          	movff	postinc2,move_window@fs
 11038   004A94  CFDD F031          	movff	postdec2,move_window@fs+1
 11039   004A98  EE20 F01A          	lfsr	2,26
 11040   004A9C  5043               	movf	f_sync@fp^0,w,c
 11041   004A9E  26D9               	addwf	fsr2l,f,c
 11042   004AA0  5044               	movf	(f_sync@fp+1)^0,w,c
 11043   004AA2  22DA               	addwfc	fsr2h,f,c
 11044   004AA4  CFDE F032          	movff	postinc2,move_window@sector
 11045   004AA8  CFDE F033          	movff	postinc2,move_window@sector+1
 11046   004AAC  CFDE F034          	movff	postinc2,move_window@sector+2
 11047   004AB0  CFDE F035          	movff	postinc2,move_window@sector+3
 11048   004AB4  ECE8  F02A         	call	_move_window	;wreg free
 11049   004AB8  6E45               	movwf	f_sync@res^0,c
 11050   004ABA                     
 11051                           ;ff.c: 2834:    if (res == FR_OK) {
 11052   004ABA  5045               	movf	f_sync@res^0,w,c
 11053   004ABC  A4D8               	btfss	status,2,c
 11054   004ABE  EF63  F025         	goto	u7631
 11055   004AC2  EF65  F025         	goto	u7630
 11056   004AC6                     u7631:
 11057   004AC6  EFD4  F025         	goto	l5585
 11058   004ACA                     u7630:
 11059   004ACA                     
 11060                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11061   004ACA  EE20 F01E          	lfsr	2,30
 11062   004ACE  5043               	movf	f_sync@fp^0,w,c
 11063   004AD0  26D9               	addwf	fsr2l,f,c
 11064   004AD2  5044               	movf	(f_sync@fp+1)^0,w,c
 11065   004AD4  22DA               	addwfc	fsr2h,f,c
 11066   004AD6  CFDE F046          	movff	postinc2,f_sync@dir
 11067   004ADA  CFDD F047          	movff	postdec2,f_sync@dir+1
 11068                           
 11069                           ;ff.c: 2836:     dir[11] |= 0x20;
 11070   004ADE  EE20 F00B          	lfsr	2,11
 11071   004AE2  5046               	movf	f_sync@dir^0,w,c
 11072   004AE4  26D9               	addwf	fsr2l,f,c
 11073   004AE6  5047               	movf	(f_sync@dir+1)^0,w,c
 11074   004AE8  22DA               	addwfc	fsr2h,f,c
 11075   004AEA  0E00               	movlw	0
 11076   004AEC  8ADB               	bsf	plusw2,5,c
 11077   004AEE                     
 11078                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11079   004AEE  EE20 F00A          	lfsr	2,10
 11080   004AF2  5043               	movf	f_sync@fp^0,w,c
 11081   004AF4  26D9               	addwf	fsr2l,f,c
 11082   004AF6  5044               	movf	(f_sync@fp+1)^0,w,c
 11083   004AF8  22DA               	addwfc	fsr2h,f,c
 11084   004AFA  EE10 F01C          	lfsr	1,28
 11085   004AFE  5046               	movf	f_sync@dir^0,w,c
 11086   004B00  26E1               	addwf	fsr1l,f,c
 11087   004B02  5047               	movf	(f_sync@dir+1)^0,w,c
 11088   004B04  22E2               	addwfc	fsr1h,f,c
 11089   004B06  CFDE FFE6          	movff	postinc2,postinc1
 11090   004B0A  CFDE FFE6          	movff	postinc2,postinc1
 11091   004B0E  CFDE FFE6          	movff	postinc2,postinc1
 11092   004B12  CFDE FFE6          	movff	postinc2,postinc1
 11093   004B16                     
 11094                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11095   004B16  C046  F001         	movff	f_sync@dir,st_clust@dir
 11096   004B1A  C047  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11097   004B1E  EE20 F00E          	lfsr	2,14
 11098   004B22  5043               	movf	f_sync@fp^0,w,c
 11099   004B24  26D9               	addwf	fsr2l,f,c
 11100   004B26  5044               	movf	(f_sync@fp+1)^0,w,c
 11101   004B28  22DA               	addwfc	fsr2h,f,c
 11102   004B2A  CFDE F003          	movff	postinc2,st_clust@cl
 11103   004B2E  CFDE F004          	movff	postinc2,st_clust@cl+1
 11104   004B32  CFDE F005          	movff	postinc2,st_clust@cl+2
 11105   004B36  CFDE F006          	movff	postinc2,st_clust@cl+3
 11106   004B3A  EC89  F02E         	call	_st_clust	;wreg free
 11107   004B3E                     
 11108                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11109   004B3E  EE20 F016          	lfsr	2,22
 11110   004B42  5046               	movf	f_sync@dir^0,w,c
 11111   004B44  26D9               	addwf	fsr2l,f,c
 11112   004B46  5047               	movf	(f_sync@dir+1)^0,w,c
 11113   004B48  22DA               	addwfc	fsr2h,f,c
 11114   004B4A  0E00               	movlw	0
 11115   004B4C  6EDE               	movwf	postinc2,c
 11116   004B4E  0E00               	movlw	0
 11117   004B50  6EDE               	movwf	postinc2,c
 11118   004B52  0E21               	movlw	33
 11119   004B54  6EDE               	movwf	postinc2,c
 11120   004B56  0E46               	movlw	70
 11121   004B58  6EDD               	movwf	postdec2,c
 11122   004B5A                     
 11123                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11124   004B5A  EE20 F012          	lfsr	2,18
 11125   004B5E  5046               	movf	f_sync@dir^0,w,c
 11126   004B60  26D9               	addwf	fsr2l,f,c
 11127   004B62  5047               	movf	(f_sync@dir+1)^0,w,c
 11128   004B64  22DA               	addwfc	fsr2h,f,c
 11129   004B66  6ADE               	clrf	postinc2,c
 11130   004B68  6ADD               	clrf	postdec2,c
 11131   004B6A                     
 11132                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11133   004B6A  EE20 F004          	lfsr	2,4
 11134   004B6E  5043               	movf	f_sync@fp^0,w,c
 11135   004B70  26D9               	addwf	fsr2l,f,c
 11136   004B72  5044               	movf	(f_sync@fp+1)^0,w,c
 11137   004B74  22DA               	addwfc	fsr2h,f,c
 11138   004B76  0EDF               	movlw	223
 11139   004B78  16DF               	andwf	indf2,f,c
 11140   004B7A                     
 11141                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11142   004B7A  C043  FFD9         	movff	f_sync@fp,fsr2l
 11143   004B7E  C044  FFDA         	movff	f_sync@fp+1,fsr2h
 11144   004B82  EE10 F004          	lfsr	1,4
 11145   004B86  50DE               	movf	postinc2,w,c
 11146   004B88  26E1               	addwf	fsr1l,f,c
 11147   004B8A  50DD               	movf	postdec2,w,c
 11148   004B8C  22E2               	addwfc	fsr1h,f,c
 11149   004B8E  0E01               	movlw	1
 11150   004B90  6EE7               	movwf	indf1,c
 11151   004B92                     
 11152                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11153   004B92  C043  FFD9         	movff	f_sync@fp,fsr2l
 11154   004B96  C044  FFDA         	movff	f_sync@fp+1,fsr2h
 11155   004B9A  CFDE F038          	movff	postinc2,sync_fs@fs
 11156   004B9E  CFDD F039          	movff	postdec2,sync_fs@fs+1
 11157   004BA2  ECEE  F020         	call	_sync_fs	;wreg free
 11158   004BA6  6E45               	movwf	f_sync@res^0,c
 11159   004BA8                     l5585:
 11160                           
 11161                           ;ff.c: 2849:  return res;
 11162   004BA8  5045               	movf	f_sync@res^0,w,c
 11163   004BAA  0012               	return		;funcret
 11164   004BAC                     __end_of_f_sync:
 11165                           	callstack 0
 11166                           
 11167 ;; *************** function _validate *****************
 11168 ;; Defined at:
 11169 ;;		line 2372 in file "ff.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  obj             2    1[COMRAM] PTR void 
 11172 ;;		 -> Fil(32), 
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  fil             2    7[COMRAM] PTR struct .
 11175 ;;		 -> Fil(32), 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      enum E95
 11178 ;; Registers used:
 11179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11185 ;;      Params:         2       0       0       0       0       0       0       0       0
 11186 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11187 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11188 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11189 ;;Total ram usage:        8 bytes
 11190 ;; Hardware stack levels used: 1
 11191 ;; Hardware stack levels required when called: 1
 11192 ;; This function calls:
 11193 ;;		_disk_status
 11194 ;; This function is called by:
 11195 ;;		_f_write
 11196 ;;		_f_sync
 11197 ;;		_f_close
 11198 ;;		_f_read
 11199 ;;		_f_lseek
 11200 ;; This function uses a non-reentrant model
 11201 ;;
 11202                           
 11203                           	psect	text29
 11204   005442                     __ptext29:
 11205                           	callstack 0
 11206   005442                     _validate:
 11207                           	callstack 28
 11208   005442                     
 11209                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11210   005442  C002  F008         	movff	validate@obj,validate@fil
 11211   005446  C003  F009         	movff	validate@obj+1,validate@fil+1
 11212                           
 11213                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11214   00544A  5008               	movf	validate@fil^0,w,c
 11215   00544C  1009               	iorwf	(validate@fil+1)^0,w,c
 11216   00544E  B4D8               	btfsc	status,2,c
 11217   005450  EF2C  F02A         	goto	u6891
 11218   005454  EF2E  F02A         	goto	u6890
 11219   005458                     u6891:
 11220   005458  EF80  F02A         	goto	l5155
 11221   00545C                     u6890:
 11222   00545C  C008  FFD9         	movff	validate@fil,fsr2l
 11223   005460  C009  FFDA         	movff	validate@fil+1,fsr2h
 11224   005464  50DE               	movf	postinc2,w,c
 11225   005466  10DE               	iorwf	postinc2,w,c
 11226   005468  B4D8               	btfsc	status,2,c
 11227   00546A  EF39  F02A         	goto	u6901
 11228   00546E  EF3B  F02A         	goto	u6900
 11229   005472                     u6901:
 11230   005472  EF80  F02A         	goto	l5155
 11231   005476                     u6900:
 11232   005476  C008  FFD9         	movff	validate@fil,fsr2l
 11233   00547A  C009  FFDA         	movff	validate@fil+1,fsr2h
 11234   00547E  CFDE F004          	movff	postinc2,??_validate
 11235   005482  CFDD F005          	movff	postdec2,??_validate+1
 11236   005486  C004  FFD9         	movff	??_validate,fsr2l
 11237   00548A  C005  FFDA         	movff	??_validate+1,fsr2h
 11238   00548E  50DF               	movf	indf2,w,c
 11239   005490  B4D8               	btfsc	status,2,c
 11240   005492  EF4D  F02A         	goto	u6911
 11241   005496  EF4F  F02A         	goto	u6910
 11242   00549A                     u6911:
 11243   00549A  EF80  F02A         	goto	l5155
 11244   00549E                     u6910:
 11245   00549E  EE20 F002          	lfsr	2,2
 11246   0054A2  5008               	movf	validate@fil^0,w,c
 11247   0054A4  26D9               	addwf	fsr2l,f,c
 11248   0054A6  5009               	movf	(validate@fil+1)^0,w,c
 11249   0054A8  22DA               	addwfc	fsr2h,f,c
 11250   0054AA  C008  FFE1         	movff	validate@fil,fsr1l
 11251   0054AE  C009  FFE2         	movff	validate@fil+1,fsr1h
 11252   0054B2  EE00 F006          	lfsr	0,6
 11253   0054B6  50E6               	movf	postinc1,w,c
 11254   0054B8  26E9               	addwf	fsr0l,f,c
 11255   0054BA  50E5               	movf	postdec1,w,c
 11256   0054BC  22EA               	addwfc	fsr0h,f,c
 11257   0054BE  50DE               	movf	postinc2,w,c
 11258   0054C0  18EE               	xorwf	postinc0,w,c
 11259   0054C2  E107               	bnz	u6921
 11260   0054C4  50DE               	movf	postinc2,w,c
 11261   0054C6  18EE               	xorwf	postinc0,w,c
 11262   0054C8  A4D8               	btfss	status,2,c
 11263   0054CA  EF69  F02A         	goto	u6921
 11264   0054CE  EF6B  F02A         	goto	u6920
 11265   0054D2                     u6921:
 11266   0054D2  EF80  F02A         	goto	l5155
 11267   0054D6                     u6920:
 11268   0054D6  C008  FFD9         	movff	validate@fil,fsr2l
 11269   0054DA  C009  FFDA         	movff	validate@fil+1,fsr2h
 11270   0054DE  EE10 F001          	lfsr	1,1
 11271   0054E2  50DE               	movf	postinc2,w,c
 11272   0054E4  26E1               	addwf	fsr1l,f,c
 11273   0054E6  50DD               	movf	postdec2,w,c
 11274   0054E8  22E2               	addwfc	fsr1h,f,c
 11275   0054EA  50E7               	movf	indf1,w,c
 11276   0054EC  ECDA  F02E         	call	_disk_status
 11277   0054F0  6E04               	movwf	??_validate^0,c
 11278   0054F2  A004               	btfss	??_validate^0,0,c
 11279   0054F4  EF7E  F02A         	goto	u6931
 11280   0054F8  EF80  F02A         	goto	u6930
 11281   0054FC                     u6931:
 11282   0054FC  EF83  F02A         	goto	l5159
 11283   005500                     u6930:
 11284   005500                     l5155:
 11285                           
 11286                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11287   005500  0E09               	movlw	9
 11288   005502  EF84  F02A         	goto	l622
 11289   005506                     l5159:
 11290                           
 11291                           ;ff.c: 2384:  return FR_OK;
 11292   005506  0E00               	movlw	0
 11293   005508                     l622:
 11294   005508  0012               	return		;funcret
 11295   00550A                     __end_of_validate:
 11296                           	callstack 0
 11297                           
 11298 ;; *************** function _disk_status *****************
 11299 ;; Defined at:
 11300 ;;		line 359 in file "diskio.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  pdrv            1    wreg     unsigned char 
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;  pdrv            1    0[COMRAM] unsigned char 
 11305 ;; Return value:  Size  Location     Type
 11306 ;;                  1    wreg      unsigned char 
 11307 ;; Registers used:
 11308 ;;		wreg, status,2
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11314 ;;      Params:         0       0       0       0       0       0       0       0       0
 11315 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11316 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11317 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11318 ;;Total ram usage:        1 bytes
 11319 ;; Hardware stack levels used: 1
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_find_volume
 11324 ;;		_validate
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           	psect	text30
 11329   005DB4                     __ptext30:
 11330                           	callstack 0
 11331   005DB4                     _disk_status:
 11332                           	callstack 28
 11333                           
 11334                           ;incstack = 0
 11335                           ;disk_status@pdrv stored from wreg
 11336   005DB4  6E01               	movwf	disk_status@pdrv^0,c
 11337   005DB6                     
 11338                           ;diskio.c: 360:  BYTE pdrv;diskio.c: 362: {;diskio.c: 363:  if (pdrv) return 0x01;
 11339   005DB6  5001               	movf	disk_status@pdrv^0,w,c
 11340   005DB8  B4D8               	btfsc	status,2,c
 11341   005DBA  EFE1  F02E         	goto	u5391
 11342   005DBE  EFE3  F02E         	goto	u5390
 11343   005DC2                     u5391:
 11344   005DC2  EFE6  F02E         	goto	l4387
 11345   005DC6                     u5390:
 11346   005DC6  0E01               	movlw	1
 11347   005DC8  EFE8  F02E         	goto	l167
 11348   005DCC                     l4387:
 11349                           
 11350                           ;diskio.c: 364:  return Stat;
 11351   005DCC  0100               	movlb	0	; () banked
 11352   005DCE  51F7               	movf	_Stat& (0+255),w,b
 11353   005DD0                     l167:
 11354   005DD0  0012               	return		;funcret
 11355   005DD2                     __end_of_disk_status:
 11356                           	callstack 0
 11357                           
 11358 ;; *************** function _sync_fs *****************
 11359 ;; Defined at:
 11360 ;;		line 760 in file "ff.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;  fs              2   55[COMRAM] PTR struct .
 11363 ;;		 -> NULL(0), FatFs(558), 
 11364 ;; Auto vars:     Size  Location     Type
 11365 ;;  res             1   65[COMRAM] enum E95
 11366 ;; Return value:  Size  Location     Type
 11367 ;;                  1    wreg      enum E95
 11368 ;; Registers used:
 11369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11370 ;; Tracked objects:
 11371 ;;		On entry : 0/0
 11372 ;;		On exit  : 0/0
 11373 ;;		Unchanged: 0/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11375 ;;      Params:         2       0       0       0       0       0       0       0       0
 11376 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11377 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11378 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11379 ;;Total ram usage:       11 bytes
 11380 ;; Hardware stack levels used: 1
 11381 ;; Hardware stack levels required when called: 7
 11382 ;; This function calls:
 11383 ;;		_disk_ioctl
 11384 ;;		_disk_write
 11385 ;;		_mem_set
 11386 ;;		_sync_window
 11387 ;; This function is called by:
 11388 ;;		_f_sync
 11389 ;; This function uses a non-reentrant model
 11390 ;;
 11391                           
 11392                           	psect	text31
 11393   0041DC                     __ptext31:
 11394                           	callstack 0
 11395   0041DC                     _sync_fs:
 11396                           	callstack 21
 11397   0041DC                     
 11398                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11399   0041DC  C038  F01B         	movff	sync_fs@fs,sync_window@fs
 11400   0041E0  C039  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11401   0041E4  EC65  F024         	call	_sync_window	;wreg free
 11402   0041E8  6E42               	movwf	sync_fs@res^0,c
 11403   0041EA                     
 11404                           ;ff.c: 768:  if (res == FR_OK) {
 11405   0041EA  5042               	movf	sync_fs@res^0,w,c
 11406   0041EC  A4D8               	btfss	status,2,c
 11407   0041EE  EFFB  F020         	goto	u6301
 11408   0041F2  EFFD  F020         	goto	u6300
 11409   0041F6                     u6301:
 11410   0041F6  EFDF  F021         	goto	l303
 11411   0041FA                     u6300:
 11412   0041FA                     
 11413                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11414   0041FA  C038  FFD9         	movff	sync_fs@fs,fsr2l
 11415   0041FE  C039  FFDA         	movff	sync_fs@fs+1,fsr2h
 11416   004202  0E03               	movlw	3
 11417   004204  18DE               	xorwf	postinc2,w,c
 11418   004206  A4D8               	btfss	status,2,c
 11419   004208  EF08  F021         	goto	u6311
 11420   00420C  EF0A  F021         	goto	u6310
 11421   004210                     u6311:
 11422   004210  EFC6  F021         	goto	l4851
 11423   004214                     u6310:
 11424   004214  EE20 F005          	lfsr	2,5
 11425   004218  5038               	movf	sync_fs@fs^0,w,c
 11426   00421A  26D9               	addwf	fsr2l,f,c
 11427   00421C  5039               	movf	(sync_fs@fs+1)^0,w,c
 11428   00421E  22DA               	addwfc	fsr2h,f,c
 11429   004220  04DE               	decf	postinc2,w,c
 11430   004222  A4D8               	btfss	status,2,c
 11431   004224  EF16  F021         	goto	u6321
 11432   004228  EF18  F021         	goto	u6320
 11433   00422C                     u6321:
 11434   00422C  EFC6  F021         	goto	l4851
 11435   004230                     u6320:
 11436   004230                     
 11437                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11438   004230  0E2E               	movlw	46
 11439   004232  2438               	addwf	sync_fs@fs^0,w,c
 11440   004234  6E01               	movwf	mem_set@dst^0,c
 11441   004236  0E00               	movlw	0
 11442   004238  2039               	addwfc	(sync_fs@fs+1)^0,w,c
 11443   00423A  6E02               	movwf	(mem_set@dst+1)^0,c
 11444   00423C  0E00               	movlw	0
 11445   00423E  6E04               	movwf	(mem_set@val+1)^0,c
 11446   004240  0E00               	movlw	0
 11447   004242  6E03               	movwf	mem_set@val^0,c
 11448   004244  0E02               	movlw	2
 11449   004246  6E06               	movwf	(mem_set@cnt+1)^0,c
 11450   004248  0E00               	movlw	0
 11451   00424A  6E05               	movwf	mem_set@cnt^0,c
 11452   00424C  EC6D  F02E         	call	_mem_set	;wreg free
 11453   004250                     
 11454                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11455   004250  EE22 F02C          	lfsr	2,556
 11456   004254  5038               	movf	sync_fs@fs^0,w,c
 11457   004256  26D9               	addwf	fsr2l,f,c
 11458   004258  5039               	movf	(sync_fs@fs+1)^0,w,c
 11459   00425A  22DA               	addwfc	fsr2h,f,c
 11460   00425C  0E55               	movlw	85
 11461   00425E  6EDE               	movwf	postinc2,c
 11462   004260  0EAA               	movlw	170
 11463   004262  6EDD               	movwf	postdec2,c
 11464   004264                     
 11465                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11466   004264  EE20 F02E          	lfsr	2,46
 11467   004268  5038               	movf	sync_fs@fs^0,w,c
 11468   00426A  26D9               	addwf	fsr2l,f,c
 11469   00426C  5039               	movf	(sync_fs@fs+1)^0,w,c
 11470   00426E  22DA               	addwfc	fsr2h,f,c
 11471   004270  0E52               	movlw	82
 11472   004272  6EDE               	movwf	postinc2,c
 11473   004274  0E52               	movlw	82
 11474   004276  6EDE               	movwf	postinc2,c
 11475   004278  0E61               	movlw	97
 11476   00427A  6EDE               	movwf	postinc2,c
 11477   00427C  0E41               	movlw	65
 11478   00427E  6EDD               	movwf	postdec2,c
 11479   004280                     
 11480                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11481   004280  EE22 F012          	lfsr	2,530
 11482   004284  5038               	movf	sync_fs@fs^0,w,c
 11483   004286  26D9               	addwf	fsr2l,f,c
 11484   004288  5039               	movf	(sync_fs@fs+1)^0,w,c
 11485   00428A  22DA               	addwfc	fsr2h,f,c
 11486   00428C  0E72               	movlw	114
 11487   00428E  6EDE               	movwf	postinc2,c
 11488   004290  0E72               	movlw	114
 11489   004292  6EDE               	movwf	postinc2,c
 11490   004294  0E41               	movlw	65
 11491   004296  6EDE               	movwf	postinc2,c
 11492   004298  0E61               	movlw	97
 11493   00429A  6EDD               	movwf	postdec2,c
 11494   00429C                     
 11495                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11496   00429C  EE20 F00E          	lfsr	2,14
 11497   0042A0  5038               	movf	sync_fs@fs^0,w,c
 11498   0042A2  26D9               	addwf	fsr2l,f,c
 11499   0042A4  5039               	movf	(sync_fs@fs+1)^0,w,c
 11500   0042A6  22DA               	addwfc	fsr2h,f,c
 11501   0042A8  EE12 F016          	lfsr	1,534
 11502   0042AC  5038               	movf	sync_fs@fs^0,w,c
 11503   0042AE  26E1               	addwf	fsr1l,f,c
 11504   0042B0  5039               	movf	(sync_fs@fs+1)^0,w,c
 11505   0042B2  22E2               	addwfc	fsr1h,f,c
 11506   0042B4  CFDE FFE6          	movff	postinc2,postinc1
 11507   0042B8  CFDE FFE6          	movff	postinc2,postinc1
 11508   0042BC  CFDE FFE6          	movff	postinc2,postinc1
 11509   0042C0  CFDE FFE6          	movff	postinc2,postinc1
 11510   0042C4                     
 11511                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11512   0042C4  EE20 F00A          	lfsr	2,10
 11513   0042C8  5038               	movf	sync_fs@fs^0,w,c
 11514   0042CA  26D9               	addwf	fsr2l,f,c
 11515   0042CC  5039               	movf	(sync_fs@fs+1)^0,w,c
 11516   0042CE  22DA               	addwfc	fsr2h,f,c
 11517   0042D0  EE12 F01A          	lfsr	1,538
 11518   0042D4  5038               	movf	sync_fs@fs^0,w,c
 11519   0042D6  26E1               	addwf	fsr1l,f,c
 11520   0042D8  5039               	movf	(sync_fs@fs+1)^0,w,c
 11521   0042DA  22E2               	addwfc	fsr1h,f,c
 11522   0042DC  CFDE FFE6          	movff	postinc2,postinc1
 11523   0042E0  CFDE FFE6          	movff	postinc2,postinc1
 11524   0042E4  CFDE FFE6          	movff	postinc2,postinc1
 11525   0042E8  CFDE FFE6          	movff	postinc2,postinc1
 11526   0042EC                     
 11527                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11528   0042EC  EE20 F01A          	lfsr	2,26
 11529   0042F0  5038               	movf	sync_fs@fs^0,w,c
 11530   0042F2  26D9               	addwf	fsr2l,f,c
 11531   0042F4  5039               	movf	(sync_fs@fs+1)^0,w,c
 11532   0042F6  22DA               	addwfc	fsr2h,f,c
 11533   0042F8  CFDE F03A          	movff	postinc2,??_sync_fs
 11534   0042FC  CFDE F03B          	movff	postinc2,??_sync_fs+1
 11535   004300  CFDE F03C          	movff	postinc2,??_sync_fs+2
 11536   004304  CFDE F03D          	movff	postinc2,??_sync_fs+3
 11537   004308  0E01               	movlw	1
 11538   00430A  243A               	addwf	??_sync_fs^0,w,c
 11539   00430C  6E3E               	movwf	(??_sync_fs+4)^0,c
 11540   00430E  0E00               	movlw	0
 11541   004310  203B               	addwfc	(??_sync_fs+1)^0,w,c
 11542   004312  6E3F               	movwf	(??_sync_fs+5)^0,c
 11543   004314  0E00               	movlw	0
 11544   004316  203C               	addwfc	(??_sync_fs+2)^0,w,c
 11545   004318  6E40               	movwf	(??_sync_fs+6)^0,c
 11546   00431A  0E00               	movlw	0
 11547   00431C  203D               	addwfc	(??_sync_fs+3)^0,w,c
 11548   00431E  6E41               	movwf	(??_sync_fs+7)^0,c
 11549   004320  EE20 F02A          	lfsr	2,42
 11550   004324  5038               	movf	sync_fs@fs^0,w,c
 11551   004326  26D9               	addwf	fsr2l,f,c
 11552   004328  5039               	movf	(sync_fs@fs+1)^0,w,c
 11553   00432A  22DA               	addwfc	fsr2h,f,c
 11554   00432C  C03E  FFDE         	movff	??_sync_fs+4,postinc2
 11555   004330  C03F  FFDE         	movff	??_sync_fs+5,postinc2
 11556   004334  C040  FFDE         	movff	??_sync_fs+6,postinc2
 11557   004338  C041  FFDE         	movff	??_sync_fs+7,postinc2
 11558   00433C                     
 11559                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11560   00433C  0E2E               	movlw	46
 11561   00433E  2438               	addwf	sync_fs@fs^0,w,c
 11562   004340  6E11               	movwf	disk_write@buff^0,c
 11563   004342  0E00               	movlw	0
 11564   004344  2039               	addwfc	(sync_fs@fs+1)^0,w,c
 11565   004346  6E12               	movwf	(disk_write@buff+1)^0,c
 11566   004348  EE20 F02A          	lfsr	2,42
 11567   00434C  5038               	movf	sync_fs@fs^0,w,c
 11568   00434E  26D9               	addwf	fsr2l,f,c
 11569   004350  5039               	movf	(sync_fs@fs+1)^0,w,c
 11570   004352  22DA               	addwfc	fsr2h,f,c
 11571   004354  CFDE F013          	movff	postinc2,disk_write@sector
 11572   004358  CFDE F014          	movff	postinc2,disk_write@sector+1
 11573   00435C  CFDE F015          	movff	postinc2,disk_write@sector+2
 11574   004360  CFDE F016          	movff	postinc2,disk_write@sector+3
 11575   004364  0E00               	movlw	0
 11576   004366  6E18               	movwf	(disk_write@count+1)^0,c
 11577   004368  0E01               	movlw	1
 11578   00436A  6E17               	movwf	disk_write@count^0,c
 11579   00436C  EE20 F001          	lfsr	2,1
 11580   004370  5038               	movf	sync_fs@fs^0,w,c
 11581   004372  26D9               	addwf	fsr2l,f,c
 11582   004374  5039               	movf	(sync_fs@fs+1)^0,w,c
 11583   004376  22DA               	addwfc	fsr2h,f,c
 11584   004378  50DF               	movf	indf2,w,c
 11585   00437A  EC90  F023         	call	_disk_write
 11586   00437E                     
 11587                           ;ff.c: 781:    fs->fsi_flag = 0;
 11588   00437E  EE20 F005          	lfsr	2,5
 11589   004382  5038               	movf	sync_fs@fs^0,w,c
 11590   004384  26D9               	addwf	fsr2l,f,c
 11591   004386  5039               	movf	(sync_fs@fs+1)^0,w,c
 11592   004388  22DA               	addwfc	fsr2h,f,c
 11593   00438A  6ADF               	clrf	indf2,c
 11594   00438C                     l4851:
 11595                           
 11596                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11597   00438C  0E00               	movlw	0
 11598   00438E  6E11               	movwf	disk_ioctl@cmd^0,c
 11599   004390  0E00               	movlw	0
 11600   004392  6E12               	movwf	disk_ioctl@buff^0,c
 11601   004394  0E00               	movlw	0
 11602   004396  6E13               	movwf	(disk_ioctl@buff+1)^0,c
 11603   004398  EE20 F001          	lfsr	2,1
 11604   00439C  5038               	movf	sync_fs@fs^0,w,c
 11605   00439E  26D9               	addwf	fsr2l,f,c
 11606   0043A0  5039               	movf	(sync_fs@fs+1)^0,w,c
 11607   0043A2  22DA               	addwfc	fsr2h,f,c
 11608   0043A4  50DF               	movf	indf2,w,c
 11609   0043A6  EC30  F00E         	call	_disk_ioctl
 11610   0043AA  0900               	iorlw	0
 11611   0043AC  B4D8               	btfsc	status,2,c
 11612   0043AE  EFDB  F021         	goto	u6331
 11613   0043B2  EFDD  F021         	goto	u6330
 11614   0043B6                     u6331:
 11615   0043B6  EFDF  F021         	goto	l303
 11616   0043BA                     u6330:
 11617   0043BA                     
 11618                           ;ff.c: 785:    res = FR_DISK_ERR;
 11619   0043BA  0E01               	movlw	1
 11620   0043BC  6E42               	movwf	sync_fs@res^0,c
 11621   0043BE                     l303:
 11622                           
 11623                           ;ff.c: 788:  return res;
 11624   0043BE  5042               	movf	sync_fs@res^0,w,c
 11625   0043C0  0012               	return		;funcret
 11626   0043C2                     __end_of_sync_fs:
 11627                           	callstack 0
 11628                           
 11629 ;; *************** function _mem_set *****************
 11630 ;; Defined at:
 11631 ;;		line 524 in file "ff.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;  dst             2    0[COMRAM] PTR void 
 11634 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11635 ;;  val             2    2[COMRAM] int 
 11636 ;;  cnt             2    4[COMRAM] unsigned short 
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  d               2    6[COMRAM] PTR unsigned char 
 11639 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11640 ;; Return value:  Size  Location     Type
 11641 ;;                  1    wreg      void 
 11642 ;; Registers used:
 11643 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 0/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11649 ;;      Params:         6       0       0       0       0       0       0       0       0
 11650 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11651 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11652 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11653 ;;Total ram usage:        8 bytes
 11654 ;; Hardware stack levels used: 1
 11655 ;; This function calls:
 11656 ;;		Nothing
 11657 ;; This function is called by:
 11658 ;;		_sync_fs
 11659 ;;		_dir_next
 11660 ;;		_dir_register
 11661 ;;		_create_name
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           	psect	text32
 11666   005CDA                     __ptext32:
 11667                           	callstack 0
 11668   005CDA                     _mem_set:
 11669                           	callstack 26
 11670   005CDA                     
 11671                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11672   005CDA  C001  F007         	movff	mem_set@dst,mem_set@d
 11673   005CDE  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11674                           
 11675                           ;ff.c: 527:  while (cnt--)
 11676   005CE2  EF7B  F02E         	goto	l4261
 11677   005CE6                     l4257:
 11678                           
 11679                           ;ff.c: 528:   *d++ = (BYTE)val;
 11680   005CE6  C007  FFD9         	movff	mem_set@d,fsr2l
 11681   005CEA  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11682   005CEE  C003  FFDF         	movff	mem_set@val,indf2
 11683   005CF2  4A07               	infsnz	mem_set@d^0,f,c
 11684   005CF4  2A08               	incf	(mem_set@d+1)^0,f,c
 11685   005CF6                     l4261:
 11686                           
 11687                           ;ff.c: 527:  while (cnt--)
 11688   005CF6  0605               	decf	mem_set@cnt^0,f,c
 11689   005CF8  A0D8               	btfss	status,0,c
 11690   005CFA  0606               	decf	(mem_set@cnt+1)^0,f,c
 11691   005CFC  2805               	incf	mem_set@cnt^0,w,c
 11692   005CFE  E106               	bnz	u5201
 11693   005D00  2806               	incf	(mem_set@cnt+1)^0,w,c
 11694   005D02  A4D8               	btfss	status,2,c
 11695   005D04  EF86  F02E         	goto	u5201
 11696   005D08  EF88  F02E         	goto	u5200
 11697   005D0C                     u5201:
 11698   005D0C  EF73  F02E         	goto	l4257
 11699   005D10                     u5200:
 11700   005D10  0012               	return		;funcret
 11701   005D12                     __end_of_mem_set:
 11702                           	callstack 0
 11703                           
 11704 ;; *************** function _disk_ioctl *****************
 11705 ;; Defined at:
 11706 ;;		line 449 in file "diskio.c"
 11707 ;; Parameters:    Size  Location     Type
 11708 ;;  pdrv            1    wreg     unsigned char 
 11709 ;;  cmd             1   16[COMRAM] unsigned char 
 11710 ;;  buff            2   17[COMRAM] PTR void 
 11711 ;;		 -> NULL(0), 
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;  pdrv            1   46[COMRAM] unsigned char 
 11714 ;;  csd            16   30[COMRAM] unsigned char [16]
 11715 ;;  csize           4   47[COMRAM] unsigned long 
 11716 ;;  ptr             2   53[COMRAM] PTR unsigned char 
 11717 ;;		 -> NULL(0), 
 11718 ;;  n               1   52[COMRAM] unsigned char 
 11719 ;;  res             1   51[COMRAM] enum E3537
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  1    wreg      enum E3537
 11722 ;; Registers used:
 11723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11729 ;;      Params:         3       0       0       0       0       0       0       0       0
 11730 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11731 ;;      Temps:         11       0       0       0       0       0       0       0       0
 11732 ;;      Totals:        39       0       0       0       0       0       0       0       0
 11733 ;;Total ram usage:       39 bytes
 11734 ;; Hardware stack levels used: 1
 11735 ;; Hardware stack levels required when called: 5
 11736 ;; This function calls:
 11737 ;;		_SPI_Exchange
 11738 ;;		___wmul
 11739 ;;		_deselect
 11740 ;;		_rcvr_datablock
 11741 ;;		_select
 11742 ;;		_send_cmd
 11743 ;; This function is called by:
 11744 ;;		_sync_fs
 11745 ;; This function uses a non-reentrant model
 11746 ;;
 11747                           
 11748                           	psect	text33
 11749   001C60                     __ptext33:
 11750                           	callstack 0
 11751   001C60                     _disk_ioctl:
 11752                           	callstack 22
 11753                           
 11754                           ;incstack = 0
 11755                           ;disk_ioctl@pdrv stored from wreg
 11756   001C60  6E2F               	movwf	disk_ioctl@pdrv^0,c
 11757   001C62                     
 11758                           ;diskio.c: 450:  BYTE pdrv,;diskio.c: 451:  BYTE cmd,;diskio.c: 452:  void *buff;diskio.
      +                          c: 454: {;diskio.c: 455:  DRESULT res;;diskio.c: 456:  BYTE n, csd[16], *ptr = buff;
 11759   001C62  C012  F036         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11760   001C66  C013  F037         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11761   001C6A                     
 11762                           ;diskio.c: 457:  DWORD csize;;diskio.c: 460:  if (pdrv) return RES_PARERR;
 11763   001C6A  502F               	movf	disk_ioctl@pdrv^0,w,c
 11764   001C6C  B4D8               	btfsc	status,2,c
 11765   001C6E  EF3B  F00E         	goto	u5401
 11766   001C72  EF3D  F00E         	goto	u5400
 11767   001C76                     u5401:
 11768   001C76  EF40  F00E         	goto	l4399
 11769   001C7A                     u5400:
 11770   001C7A  0E04               	movlw	4
 11771   001C7C  EF31  F011         	goto	l206
 11772   001C80                     l4399:
 11773                           
 11774                           ;diskio.c: 462:  res = RES_ERROR;
 11775   001C80  0E01               	movlw	1
 11776   001C82  6E34               	movwf	disk_ioctl@res^0,c
 11777   001C84                     
 11778                           ;diskio.c: 464:  if (Stat & 0x01) return RES_NOTRDY;
 11779   001C84  0100               	movlb	0	; () banked
 11780   001C86  A1F7               	btfss	_Stat& (0+255),0,b
 11781   001C88  EF48  F00E         	goto	u5411
 11782   001C8C  EF4A  F00E         	goto	u5410
 11783   001C90                     u5411:
 11784   001C90  EF01  F011         	goto	l4499
 11785   001C94                     u5410:
 11786   001C94                     
 11787                           ; BSR set to: 0
 11788   001C94  0E03               	movlw	3
 11789   001C96  EF31  F011         	goto	l206
 11790   001C9A                     l4407:
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;diskio.c: 468:   if (select()) res = RES_OK;
 11794   001C9A  EC9E  F02E         	call	_select	;wreg free
 11795   001C9E  0900               	iorlw	0
 11796   001CA0  B4D8               	btfsc	status,2,c
 11797   001CA2  EF55  F00E         	goto	u5421
 11798   001CA6  EF57  F00E         	goto	u5420
 11799   001CAA                     u5421:
 11800   001CAA  EF2E  F011         	goto	l4501
 11801   001CAE                     u5420:
 11802   001CAE                     l4409:
 11803   001CAE  0E00               	movlw	0
 11804   001CB0  6E34               	movwf	disk_ioctl@res^0,c
 11805   001CB2  EF2E  F011         	goto	l4501
 11806   001CB6                     l4411:
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;diskio.c: 472:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11810   001CB6  0E00               	movlw	0
 11811   001CB8  6E0B               	movwf	send_cmd@arg^0,c
 11812   001CBA  0E00               	movlw	0
 11813   001CBC  6E0C               	movwf	(send_cmd@arg+1)^0,c
 11814   001CBE  0E00               	movlw	0
 11815   001CC0  6E0D               	movwf	(send_cmd@arg+2)^0,c
 11816   001CC2  0E00               	movlw	0
 11817   001CC4  6E0E               	movwf	(send_cmd@arg+3)^0,c
 11818   001CC6  0E09               	movlw	9
 11819   001CC8  ECFE  F02D         	call	_send_cmd
 11820   001CCC  0900               	iorlw	0
 11821   001CCE  A4D8               	btfss	status,2,c
 11822   001CD0  EF6C  F00E         	goto	u5431
 11823   001CD4  EF6E  F00E         	goto	u5430
 11824   001CD8                     u5431:
 11825   001CD8  EF2E  F011         	goto	l4501
 11826   001CDC                     u5430:
 11827   001CDC  0E1F               	movlw	low disk_ioctl@csd
 11828   001CDE  6E02               	movwf	rcvr_datablock@buff^0,c
 11829   001CE0  0E00               	movlw	high disk_ioctl@csd
 11830   001CE2  6E03               	movwf	(rcvr_datablock@buff+1)^0,c
 11831   001CE4  0E00               	movlw	0
 11832   001CE6  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 11833   001CE8  0E10               	movlw	16
 11834   001CEA  6E04               	movwf	rcvr_datablock@btr^0,c
 11835   001CEC  EC52  F02C         	call	_rcvr_datablock	;wreg free
 11836   001CF0  0900               	iorlw	0
 11837   001CF2  B4D8               	btfsc	status,2,c
 11838   001CF4  EF7E  F00E         	goto	u5441
 11839   001CF8  EF80  F00E         	goto	u5440
 11840   001CFC                     u5441:
 11841   001CFC  EF2E  F011         	goto	l4501
 11842   001D00                     u5440:
 11843   001D00                     
 11844                           ;diskio.c: 473:    if ((csd[0] >> 6) == 1) {
 11845   001D00  441F               	rlncf	disk_ioctl@csd^0,w,c
 11846   001D02  46E8               	rlncf	wreg,f,c
 11847   001D04  0B03               	andlw	3
 11848   001D06  06E8               	decf	wreg,f,c
 11849   001D08  A4D8               	btfss	status,2,c
 11850   001D0A  EF89  F00E         	goto	u5451
 11851   001D0E  EF8B  F00E         	goto	u5450
 11852   001D12                     u5451:
 11853   001D12  EFD5  F00E         	goto	l4421
 11854   001D16                     u5450:
 11855   001D16                     
 11856                           ;diskio.c: 474:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11857   001D16  C026  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11858   001D1A  0E3F               	movlw	63
 11859   001D1C  1614               	andwf	??_disk_ioctl^0,f,c
 11860   001D1E  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11861   001D22  6A16               	clrf	(??_disk_ioctl+2)^0,c
 11862   001D24  6A17               	clrf	(??_disk_ioctl+3)^0,c
 11863   001D26  6A18               	clrf	(??_disk_ioctl+4)^0,c
 11864   001D28  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11865   001D2C  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11866   001D30  6A16               	clrf	(??_disk_ioctl+2)^0,c
 11867   001D32  6A15               	clrf	(??_disk_ioctl+1)^0,c
 11868   001D34  5027               	movf	(disk_ioctl@csd+8)^0,w,c
 11869   001D36  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 11870   001D38  5028               	movf	(disk_ioctl@csd+9)^0,w,c
 11871   001D3A  6E19               	movwf	(??_disk_ioctl+5)^0,c
 11872   001D3C  5019               	movf	(??_disk_ioctl+5)^0,w,c
 11873   001D3E  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 11874   001D40  6E1B               	movwf	(??_disk_ioctl+7)^0,c
 11875   001D42  501A               	movf	(??_disk_ioctl+6)^0,w,c
 11876   001D44  2016               	addwfc	(??_disk_ioctl+2)^0,w,c
 11877   001D46  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 11878   001D48  0E00               	movlw	0
 11879   001D4A  2017               	addwfc	(??_disk_ioctl+3)^0,w,c
 11880   001D4C  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 11881   001D4E  0E00               	movlw	0
 11882   001D50  2018               	addwfc	(??_disk_ioctl+4)^0,w,c
 11883   001D52  6E1E               	movwf	(??_disk_ioctl+10)^0,c
 11884   001D54  0E01               	movlw	1
 11885   001D56  241B               	addwf	(??_disk_ioctl+7)^0,w,c
 11886   001D58  6E30               	movwf	disk_ioctl@csize^0,c
 11887   001D5A  0E00               	movlw	0
 11888   001D5C  201C               	addwfc	(??_disk_ioctl+8)^0,w,c
 11889   001D5E  6E31               	movwf	(disk_ioctl@csize+1)^0,c
 11890   001D60  0E00               	movlw	0
 11891   001D62  201D               	addwfc	(??_disk_ioctl+9)^0,w,c
 11892   001D64  6E32               	movwf	(disk_ioctl@csize+2)^0,c
 11893   001D66  0E00               	movlw	0
 11894   001D68  201E               	addwfc	(??_disk_ioctl+10)^0,w,c
 11895   001D6A  6E33               	movwf	(disk_ioctl@csize+3)^0,c
 11896   001D6C                     
 11897                           ;diskio.c: 475:     *(DWORD*)buff = csize << 10;
 11898   001D6C  C030  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11899   001D70  C031  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11900   001D74  C032  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11901   001D78  C033  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11902   001D7C  0E0A               	movlw	10
 11903   001D7E                     u5465:
 11904   001D7E  90D8               	bcf	status,0,c
 11905   001D80  3614               	rlcf	??_disk_ioctl^0,f,c
 11906   001D82  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 11907   001D84  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 11908   001D86  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 11909   001D88  2EE8               	decfsz	wreg,f,c
 11910   001D8A  EFBF  F00E         	goto	u5465
 11911   001D8E  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11912   001D92  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11913   001D96  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11914   001D9A  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11915   001D9E  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11916   001DA2  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11917                           
 11918                           ;diskio.c: 476:    } else {
 11919   001DA6  EF57  F00E         	goto	l4409
 11920   001DAA                     l4421:
 11921                           
 11922                           ;diskio.c: 477:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11923   001DAA  6A14               	clrf	??_disk_ioctl^0,c
 11924   001DAC  AE29               	btfss	(disk_ioctl@csd+10)^0,7,c
 11925   001DAE  D001               	bra	u5475
 11926   001DB0  2A14               	incf	??_disk_ioctl^0,f,c
 11927   001DB2                     u5475:
 11928   001DB2  0E01               	movlw	1
 11929   001DB4  1614               	andwf	??_disk_ioctl^0,f,c
 11930   001DB6  C024  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11931   001DBA  0E0F               	movlw	15
 11932   001DBC  1615               	andwf	(??_disk_ioctl+1)^0,f,c
 11933   001DBE  5028               	movf	(disk_ioctl@csd+9)^0,w,c
 11934   001DC0  0B03               	andlw	3
 11935   001DC2  0D02               	mullw	2
 11936   001DC4  50F3               	movf	243,w,c
 11937   001DC6  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 11938   001DC8  2414               	addwf	??_disk_ioctl^0,w,c
 11939   001DCA  0F02               	addlw	2
 11940   001DCC  6E35               	movwf	disk_ioctl@n^0,c
 11941   001DCE                     
 11942                           ;diskio.c: 478:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11943   001DCE  5025               	movf	(disk_ioctl@csd+6)^0,w,c
 11944   001DD0  0B03               	andlw	3
 11945   001DD2  6E14               	movwf	??_disk_ioctl^0,c
 11946   001DD4  6A15               	clrf	(??_disk_ioctl+1)^0,c
 11947   001DD6  0E0A               	movlw	10
 11948   001DD8                     u5485:
 11949   001DD8  90D8               	bcf	status,0,c
 11950   001DDA  3614               	rlcf	??_disk_ioctl^0,f,c
 11951   001DDC  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 11952   001DDE  2EE8               	decfsz	wreg,f,c
 11953   001DE0  EFEC  F00E         	goto	u5485
 11954   001DE4  5026               	movf	(disk_ioctl@csd+7)^0,w,c
 11955   001DE6  6E16               	movwf	(??_disk_ioctl+2)^0,c
 11956   001DE8  6A17               	clrf	(??_disk_ioctl+3)^0,c
 11957   001DEA  90D8               	bcf	status,0,c
 11958   001DEC  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 11959   001DEE  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 11960   001DF0  90D8               	bcf	status,0,c
 11961   001DF2  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 11962   001DF4  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 11963   001DF6  C027  F018         	movff	disk_ioctl@csd+8,??_disk_ioctl+4
 11964   001DFA  0E06               	movlw	6
 11965   001DFC  6E19               	movwf	(??_disk_ioctl+5)^0,c
 11966   001DFE                     u5495:
 11967   001DFE  90D8               	bcf	status,0,c
 11968   001E00  3218               	rrcf	(??_disk_ioctl+4)^0,f,c
 11969   001E02  2E19               	decfsz	(??_disk_ioctl+5)^0,f,c
 11970   001E04  EFFF  F00E         	goto	u5495
 11971   001E08  5018               	movf	(??_disk_ioctl+4)^0,w,c
 11972   001E0A  2416               	addwf	(??_disk_ioctl+2)^0,w,c
 11973   001E0C  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 11974   001E0E  0E00               	movlw	0
 11975   001E10  2017               	addwfc	(??_disk_ioctl+3)^0,w,c
 11976   001E12  6E1B               	movwf	(??_disk_ioctl+7)^0,c
 11977   001E14  5014               	movf	??_disk_ioctl^0,w,c
 11978   001E16  241A               	addwf	(??_disk_ioctl+6)^0,w,c
 11979   001E18  6E1C               	movwf	(??_disk_ioctl+8)^0,c
 11980   001E1A  5015               	movf	(??_disk_ioctl+1)^0,w,c
 11981   001E1C  201B               	addwfc	(??_disk_ioctl+7)^0,w,c
 11982   001E1E  6E1D               	movwf	(??_disk_ioctl+9)^0,c
 11983   001E20  0E01               	movlw	1
 11984   001E22  261C               	addwf	(??_disk_ioctl+8)^0,f,c
 11985   001E24  0E00               	movlw	0
 11986   001E26  221D               	addwfc	(??_disk_ioctl+9)^0,f,c
 11987   001E28  C01C  F030         	movff	??_disk_ioctl+8,disk_ioctl@csize
 11988   001E2C  C01D  F031         	movff	??_disk_ioctl+9,disk_ioctl@csize+1
 11989   001E30  6A32               	clrf	(disk_ioctl@csize+2)^0,c
 11990   001E32  6A33               	clrf	(disk_ioctl@csize+3)^0,c
 11991   001E34                     
 11992                           ;diskio.c: 479:     *(DWORD*)buff = csize << (n - 9);
 11993   001E34  C035  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11994   001E38  0EF7               	movlw	-9
 11995   001E3A  2614               	addwf	??_disk_ioctl^0,f,c
 11996   001E3C  C030  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11997   001E40  C031  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11998   001E44  C032  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11999   001E48  C033  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 12000   001E4C  2A14               	incf	??_disk_ioctl^0,f,c
 12001   001E4E  EF2E  F00F         	goto	u5500
 12002   001E52                     u5505:
 12003   001E52  90D8               	bcf	status,0,c
 12004   001E54  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 12005   001E56  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12006   001E58  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 12007   001E5A  3618               	rlcf	(??_disk_ioctl+4)^0,f,c
 12008   001E5C                     u5500:
 12009   001E5C  2E14               	decfsz	??_disk_ioctl^0,f,c
 12010   001E5E  EF29  F00F         	goto	u5505
 12011   001E62  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12012   001E66  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12013   001E6A  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 12014   001E6E  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 12015   001E72  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 12016   001E76  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 12017   001E7A  EF57  F00E         	goto	l4409
 12018   001E7E                     l216:
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;diskio.c: 486:   if (CardType & 0x04) {
 12022   001E7E  A5D6               	btfss	_CardType& (0+255),2,b
 12023   001E80  EF44  F00F         	goto	u5511
 12024   001E84  EF46  F00F         	goto	u5510
 12025   001E88                     u5511:
 12026   001E88  EFA1  F00F         	goto	l4447
 12027   001E8C                     u5510:
 12028   001E8C                     
 12029                           ; BSR set to: 0
 12030                           ;diskio.c: 487:    if (send_cmd((0x80+13), 0) == 0) {
 12031   001E8C  0E00               	movlw	0
 12032   001E8E  6E0B               	movwf	send_cmd@arg^0,c
 12033   001E90  0E00               	movlw	0
 12034   001E92  6E0C               	movwf	(send_cmd@arg+1)^0,c
 12035   001E94  0E00               	movlw	0
 12036   001E96  6E0D               	movwf	(send_cmd@arg+2)^0,c
 12037   001E98  0E00               	movlw	0
 12038   001E9A  6E0E               	movwf	(send_cmd@arg+3)^0,c
 12039   001E9C  0E8D               	movlw	141
 12040   001E9E  ECFE  F02D         	call	_send_cmd
 12041   001EA2  0900               	iorlw	0
 12042   001EA4  A4D8               	btfss	status,2,c
 12043   001EA6  EF57  F00F         	goto	u5521
 12044   001EAA  EF59  F00F         	goto	u5520
 12045   001EAE                     u5521:
 12046   001EAE  EF2E  F011         	goto	l4501
 12047   001EB2                     u5520:
 12048   001EB2                     
 12049                           ;diskio.c: 488:     SPI_Exchange(0xFF);
 12050   001EB2  0EFF               	movlw	255
 12051   001EB4  ECE9  F02E         	call	_SPI_Exchange
 12052   001EB8                     
 12053                           ;diskio.c: 489:     if (rcvr_datablock(csd, 16)) {
 12054   001EB8  0E1F               	movlw	low disk_ioctl@csd
 12055   001EBA  6E02               	movwf	rcvr_datablock@buff^0,c
 12056   001EBC  0E00               	movlw	high disk_ioctl@csd
 12057   001EBE  6E03               	movwf	(rcvr_datablock@buff+1)^0,c
 12058   001EC0  0E00               	movlw	0
 12059   001EC2  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 12060   001EC4  0E10               	movlw	16
 12061   001EC6  6E04               	movwf	rcvr_datablock@btr^0,c
 12062   001EC8  EC52  F02C         	call	_rcvr_datablock	;wreg free
 12063   001ECC  0900               	iorlw	0
 12064   001ECE  B4D8               	btfsc	status,2,c
 12065   001ED0  EF6C  F00F         	goto	u5531
 12066   001ED4  EF6E  F00F         	goto	u5530
 12067   001ED8                     u5531:
 12068   001ED8  EF2E  F011         	goto	l4501
 12069   001EDC                     u5530:
 12070   001EDC                     
 12071                           ;diskio.c: 490:      for (n = 64 - 16; n; n--) SPI_Exchange(0xFF);
 12072   001EDC  0E30               	movlw	48
 12073   001EDE  6E35               	movwf	disk_ioctl@n^0,c
 12074   001EE0  EF76  F00F         	goto	l4441
 12075   001EE4                     l4437:
 12076   001EE4  0EFF               	movlw	255
 12077   001EE6  ECE9  F02E         	call	_SPI_Exchange
 12078   001EEA  0635               	decf	disk_ioctl@n^0,f,c
 12079   001EEC                     l4441:
 12080   001EEC  5035               	movf	disk_ioctl@n^0,w,c
 12081   001EEE  A4D8               	btfss	status,2,c
 12082   001EF0  EF7C  F00F         	goto	u5541
 12083   001EF4  EF7E  F00F         	goto	u5540
 12084   001EF8                     u5541:
 12085   001EF8  EF72  F00F         	goto	l4437
 12086   001EFC                     u5540:
 12087   001EFC                     
 12088                           ;diskio.c: 491:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 12089   001EFC  C029  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12090   001F00  3A14               	swapf	??_disk_ioctl^0,f,c
 12091   001F02  0E0F               	movlw	15
 12092   001F04  1614               	andwf	??_disk_ioctl^0,f,c
 12093   001F06  0E10               	movlw	16
 12094   001F08  6E15               	movwf	(??_disk_ioctl+1)^0,c
 12095   001F0A  6A16               	clrf	(??_disk_ioctl+2)^0,c
 12096   001F0C  6A17               	clrf	(??_disk_ioctl+3)^0,c
 12097   001F0E  6A18               	clrf	(??_disk_ioctl+4)^0,c
 12098   001F10  2A14               	incf	??_disk_ioctl^0,f,c
 12099   001F12  EF90  F00F         	goto	u5550
 12100   001F16                     u5555:
 12101   001F16  90D8               	bcf	status,0,c
 12102   001F18  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 12103   001F1A  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12104   001F1C  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 12105   001F1E  3618               	rlcf	(??_disk_ioctl+4)^0,f,c
 12106   001F20                     u5550:
 12107   001F20  2E14               	decfsz	??_disk_ioctl^0,f,c
 12108   001F22  EF8B  F00F         	goto	u5555
 12109   001F26  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12110   001F2A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12111   001F2E  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 12112   001F32  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 12113   001F36  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 12114   001F3A  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 12115   001F3E  EF57  F00E         	goto	l4409
 12116   001F42                     l4447:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;diskio.c: 496:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 12120   001F42  0E00               	movlw	0
 12121   001F44  6E0B               	movwf	send_cmd@arg^0,c
 12122   001F46  0E00               	movlw	0
 12123   001F48  6E0C               	movwf	(send_cmd@arg+1)^0,c
 12124   001F4A  0E00               	movlw	0
 12125   001F4C  6E0D               	movwf	(send_cmd@arg+2)^0,c
 12126   001F4E  0E00               	movlw	0
 12127   001F50  6E0E               	movwf	(send_cmd@arg+3)^0,c
 12128   001F52  0E09               	movlw	9
 12129   001F54  ECFE  F02D         	call	_send_cmd
 12130   001F58  0900               	iorlw	0
 12131   001F5A  A4D8               	btfss	status,2,c
 12132   001F5C  EFB2  F00F         	goto	u5561
 12133   001F60  EFB4  F00F         	goto	u5560
 12134   001F64                     u5561:
 12135   001F64  EF2E  F011         	goto	l4501
 12136   001F68                     u5560:
 12137   001F68  0E1F               	movlw	low disk_ioctl@csd
 12138   001F6A  6E02               	movwf	rcvr_datablock@buff^0,c
 12139   001F6C  0E00               	movlw	high disk_ioctl@csd
 12140   001F6E  6E03               	movwf	(rcvr_datablock@buff+1)^0,c
 12141   001F70  0E00               	movlw	0
 12142   001F72  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 12143   001F74  0E10               	movlw	16
 12144   001F76  6E04               	movwf	rcvr_datablock@btr^0,c
 12145   001F78  EC52  F02C         	call	_rcvr_datablock	;wreg free
 12146   001F7C  0900               	iorlw	0
 12147   001F7E  B4D8               	btfsc	status,2,c
 12148   001F80  EFC4  F00F         	goto	u5571
 12149   001F84  EFC6  F00F         	goto	u5570
 12150   001F88                     u5571:
 12151   001F88  EF2E  F011         	goto	l4501
 12152   001F8C                     u5570:
 12153   001F8C                     
 12154                           ;diskio.c: 497:     if (CardType & 0x02) {
 12155   001F8C  0100               	movlb	0	; () banked
 12156   001F8E  A3D6               	btfss	_CardType& (0+255),1,b
 12157   001F90  EFCC  F00F         	goto	u5581
 12158   001F94  EFCE  F00F         	goto	u5580
 12159   001F98                     u5581:
 12160   001F98  EF0B  F010         	goto	l4455
 12161   001F9C                     u5580:
 12162   001F9C                     
 12163                           ; BSR set to: 0
 12164                           ;diskio.c: 498:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12165   001F9C  C02C  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12166   001FA0  0E06               	movlw	6
 12167   001FA2  6E15               	movwf	(??_disk_ioctl+1)^0,c
 12168   001FA4                     u5595:
 12169   001FA4  90D8               	bcf	status,0,c
 12170   001FA6  3214               	rrcf	??_disk_ioctl^0,f,c
 12171   001FA8  2E15               	decfsz	(??_disk_ioctl+1)^0,f,c
 12172   001FAA  EFD2  F00F         	goto	u5595
 12173   001FAE  0EFF               	movlw	-1
 12174   001FB0  2614               	addwf	??_disk_ioctl^0,f,c
 12175   001FB2  5029               	movf	(disk_ioctl@csd+10)^0,w,c
 12176   001FB4  0B3F               	andlw	63
 12177   001FB6  6E16               	movwf	(??_disk_ioctl+2)^0,c
 12178   001FB8  6A17               	clrf	(??_disk_ioctl+3)^0,c
 12179   001FBA  90D8               	bcf	status,0,c
 12180   001FBC  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12181   001FBE  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 12182   001FC0  6A18               	clrf	(??_disk_ioctl+4)^0,c
 12183   001FC2  AE2A               	btfss	(disk_ioctl@csd+11)^0,7,c
 12184   001FC4  D001               	bra	u5605
 12185   001FC6  2A18               	incf	(??_disk_ioctl+4)^0,f,c
 12186   001FC8                     u5605:
 12187   001FC8  0E01               	movlw	1
 12188   001FCA  1618               	andwf	(??_disk_ioctl+4)^0,f,c
 12189   001FCC  5018               	movf	(??_disk_ioctl+4)^0,w,c
 12190   001FCE  2616               	addwf	(??_disk_ioctl+2)^0,f,c
 12191   001FD0  0E00               	movlw	0
 12192   001FD2  2217               	addwfc	(??_disk_ioctl+3)^0,f,c
 12193   001FD4  0E01               	movlw	1
 12194   001FD6  2616               	addwf	(??_disk_ioctl+2)^0,f,c
 12195   001FD8  0E00               	movlw	0
 12196   001FDA  2217               	addwfc	(??_disk_ioctl+3)^0,f,c
 12197   001FDC  2A14               	incf	??_disk_ioctl^0,f,c
 12198   001FDE  EFF4  F00F         	goto	u5614
 12199   001FE2                     u5615:
 12200   001FE2  90D8               	bcf	status,0,c
 12201   001FE4  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12202   001FE6  3617               	rlcf	(??_disk_ioctl+3)^0,f,c
 12203   001FE8                     u5614:
 12204   001FE8  2E14               	decfsz	??_disk_ioctl^0,f,c
 12205   001FEA  EFF1  F00F         	goto	u5615
 12206   001FEE  5016               	movf	(??_disk_ioctl+2)^0,w,c
 12207   001FF0  6E19               	movwf	(??_disk_ioctl+5)^0,c
 12208   001FF2  5017               	movf	(??_disk_ioctl+3)^0,w,c
 12209   001FF4  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 12210   001FF6  6A1B               	clrf	(??_disk_ioctl+7)^0,c
 12211   001FF8  6A1C               	clrf	(??_disk_ioctl+8)^0,c
 12212   001FFA  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12213   001FFE  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12214   002002  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12215   002006  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12216   00200A  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12217   00200E  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12218                           
 12219                           ;diskio.c: 499:     } else {
 12220   002012  EF57  F00E         	goto	l4409
 12221   002016                     l4455:
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;diskio.c: 500:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12225   002016  C029  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12226   00201A  90D8               	bcf	status,0,c
 12227   00201C  3214               	rrcf	??_disk_ioctl^0,f,c
 12228   00201E  90D8               	bcf	status,0,c
 12229   002020  3214               	rrcf	??_disk_ioctl^0,f,c
 12230   002022  0E1F               	movlw	31
 12231   002024  1614               	andwf	??_disk_ioctl^0,f,c
 12232   002026  0E01               	movlw	1
 12233   002028  2414               	addwf	??_disk_ioctl^0,w,c
 12234   00202A  6E01               	movwf	___wmul@multiplier^0,c
 12235   00202C  6A02               	clrf	(___wmul@multiplier+1)^0,c
 12236   00202E  0E00               	movlw	0
 12237   002030  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
 12238   002032  502A               	movf	(disk_ioctl@csd+11)^0,w,c
 12239   002034  0B03               	andlw	3
 12240   002036  6E15               	movwf	(??_disk_ioctl+1)^0,c
 12241   002038  6A16               	clrf	(??_disk_ioctl+2)^0,c
 12242   00203A  90D8               	bcf	status,0,c
 12243   00203C  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 12244   00203E  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12245   002040  90D8               	bcf	status,0,c
 12246   002042  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 12247   002044  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12248   002046  90D8               	bcf	status,0,c
 12249   002048  3615               	rlcf	(??_disk_ioctl+1)^0,f,c
 12250   00204A  3616               	rlcf	(??_disk_ioctl+2)^0,f,c
 12251   00204C  C02A  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12252   002050  0E05               	movlw	5
 12253   002052  6E18               	movwf	(??_disk_ioctl+4)^0,c
 12254   002054                     u5625:
 12255   002054  90D8               	bcf	status,0,c
 12256   002056  3217               	rrcf	(??_disk_ioctl+3)^0,f,c
 12257   002058  2E18               	decfsz	(??_disk_ioctl+4)^0,f,c
 12258   00205A  EF2A  F010         	goto	u5625
 12259   00205E  0E07               	movlw	7
 12260   002060  1617               	andwf	(??_disk_ioctl+3)^0,f,c
 12261   002062  5017               	movf	(??_disk_ioctl+3)^0,w,c
 12262   002064  2615               	addwf	(??_disk_ioctl+1)^0,f,c
 12263   002066  0E00               	movlw	0
 12264   002068  2216               	addwfc	(??_disk_ioctl+2)^0,f,c
 12265   00206A  0E01               	movlw	1
 12266   00206C  2415               	addwf	(??_disk_ioctl+1)^0,w,c
 12267   00206E  6E03               	movwf	___wmul@multiplicand^0,c
 12268   002070  0E00               	movlw	0
 12269   002072  2016               	addwfc	(??_disk_ioctl+2)^0,w,c
 12270   002074  6E04               	movwf	(___wmul@multiplicand+1)^0,c
 12271   002076  ECC7  F02E         	call	___wmul	;wreg free
 12272   00207A  5001               	movf	?___wmul^0,w,c
 12273   00207C  6E19               	movwf	(??_disk_ioctl+5)^0,c
 12274   00207E  5002               	movf	(?___wmul+1)^0,w,c
 12275   002080  6E1A               	movwf	(??_disk_ioctl+6)^0,c
 12276   002082  6A1B               	clrf	(??_disk_ioctl+7)^0,c
 12277   002084  6A1C               	clrf	(??_disk_ioctl+8)^0,c
 12278   002086  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12279   00208A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12280   00208E  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12281   002092  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12282   002096  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12283   00209A  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12284   00209E  EF57  F00E         	goto	l4409
 12285   0020A2                     l4459:
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;diskio.c: 510:   *ptr = CardType;
 12289   0020A2  C036  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12290   0020A6  C037  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12291   0020AA  C0D6  FFDF         	movff	_CardType,indf2
 12292   0020AE  EF57  F00E         	goto	l4409
 12293   0020B2                     l4463:
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;diskio.c: 515:   if (send_cmd((9), 0) == 0
 12297   0020B2  0E00               	movlw	0
 12298   0020B4  6E0B               	movwf	send_cmd@arg^0,c
 12299   0020B6  0E00               	movlw	0
 12300   0020B8  6E0C               	movwf	(send_cmd@arg+1)^0,c
 12301   0020BA  0E00               	movlw	0
 12302   0020BC  6E0D               	movwf	(send_cmd@arg+2)^0,c
 12303   0020BE  0E00               	movlw	0
 12304   0020C0  6E0E               	movwf	(send_cmd@arg+3)^0,c
 12305   0020C2  0E09               	movlw	9
 12306   0020C4  ECFE  F02D         	call	_send_cmd
 12307   0020C8  0900               	iorlw	0
 12308   0020CA  A4D8               	btfss	status,2,c
 12309   0020CC  EF6A  F010         	goto	u5631
 12310   0020D0  EF6C  F010         	goto	u5630
 12311   0020D4                     u5631:
 12312   0020D4  EF2E  F011         	goto	l4501
 12313   0020D8                     u5630:
 12314   0020D8  C036  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12315   0020DC  C037  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12316   0020E0  0E00               	movlw	0
 12317   0020E2  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 12318   0020E4  0E10               	movlw	16
 12319   0020E6  6E04               	movwf	rcvr_datablock@btr^0,c
 12320   0020E8  EC52  F02C         	call	_rcvr_datablock	;wreg free
 12321   0020EC  0900               	iorlw	0
 12322   0020EE  B4D8               	btfsc	status,2,c
 12323   0020F0  EF7C  F010         	goto	u5641
 12324   0020F4  EF7E  F010         	goto	u5640
 12325   0020F8                     u5641:
 12326   0020F8  EF2E  F011         	goto	l4501
 12327   0020FC                     u5640:
 12328   0020FC  EF57  F00E         	goto	l4409
 12329   002100                     l4469:
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;diskio.c: 521:   if (send_cmd((10), 0) == 0
 12333   002100  0E00               	movlw	0
 12334   002102  6E0B               	movwf	send_cmd@arg^0,c
 12335   002104  0E00               	movlw	0
 12336   002106  6E0C               	movwf	(send_cmd@arg+1)^0,c
 12337   002108  0E00               	movlw	0
 12338   00210A  6E0D               	movwf	(send_cmd@arg+2)^0,c
 12339   00210C  0E00               	movlw	0
 12340   00210E  6E0E               	movwf	(send_cmd@arg+3)^0,c
 12341   002110  0E0A               	movlw	10
 12342   002112  ECFE  F02D         	call	_send_cmd
 12343   002116  0900               	iorlw	0
 12344   002118  A4D8               	btfss	status,2,c
 12345   00211A  EF91  F010         	goto	u5651
 12346   00211E  EF93  F010         	goto	u5650
 12347   002122                     u5651:
 12348   002122  EF2E  F011         	goto	l4501
 12349   002126                     u5650:
 12350   002126  C036  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12351   00212A  C037  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12352   00212E  0E00               	movlw	0
 12353   002130  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 12354   002132  0E10               	movlw	16
 12355   002134  6E04               	movwf	rcvr_datablock@btr^0,c
 12356   002136  EC52  F02C         	call	_rcvr_datablock	;wreg free
 12357   00213A  0900               	iorlw	0
 12358   00213C  B4D8               	btfsc	status,2,c
 12359   00213E  EFA3  F010         	goto	u5661
 12360   002142  EFA5  F010         	goto	u5660
 12361   002146                     u5661:
 12362   002146  EF2E  F011         	goto	l4501
 12363   00214A                     u5660:
 12364   00214A  EF57  F00E         	goto	l4409
 12365   00214E                     l4475:
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;diskio.c: 527:   if (send_cmd((58), 0) == 0) {
 12369   00214E  0E00               	movlw	0
 12370   002150  6E0B               	movwf	send_cmd@arg^0,c
 12371   002152  0E00               	movlw	0
 12372   002154  6E0C               	movwf	(send_cmd@arg+1)^0,c
 12373   002156  0E00               	movlw	0
 12374   002158  6E0D               	movwf	(send_cmd@arg+2)^0,c
 12375   00215A  0E00               	movlw	0
 12376   00215C  6E0E               	movwf	(send_cmd@arg+3)^0,c
 12377   00215E  0E3A               	movlw	58
 12378   002160  ECFE  F02D         	call	_send_cmd
 12379   002164  0900               	iorlw	0
 12380   002166  A4D8               	btfss	status,2,c
 12381   002168  EFB8  F010         	goto	u5671
 12382   00216C  EFBA  F010         	goto	u5670
 12383   002170                     u5671:
 12384   002170  EF2E  F011         	goto	l4501
 12385   002174                     u5670:
 12386   002174                     
 12387                           ;diskio.c: 528:    for (n = 4; n; n--) *ptr++ = SPI_Exchange(0xFF);
 12388   002174  0E04               	movlw	4
 12389   002176  6E35               	movwf	disk_ioctl@n^0,c
 12390   002178  EFC9  F010         	goto	l4485
 12391   00217C                     l4479:
 12392   00217C  0EFF               	movlw	255
 12393   00217E  ECE9  F02E         	call	_SPI_Exchange
 12394   002182  C036  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12395   002186  C037  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12396   00218A  6EDF               	movwf	indf2,c
 12397   00218C  4A36               	infsnz	disk_ioctl@ptr^0,f,c
 12398   00218E  2A37               	incf	(disk_ioctl@ptr+1)^0,f,c
 12399   002190  0635               	decf	disk_ioctl@n^0,f,c
 12400   002192                     l4485:
 12401   002192  5035               	movf	disk_ioctl@n^0,w,c
 12402   002194  A4D8               	btfss	status,2,c
 12403   002196  EFCF  F010         	goto	u5681
 12404   00219A  EFD1  F010         	goto	u5680
 12405   00219E                     u5681:
 12406   00219E  EFBE  F010         	goto	l4479
 12407   0021A2                     u5680:
 12408   0021A2  EF57  F00E         	goto	l4409
 12409   0021A6                     l4489:
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;diskio.c: 534:   if (send_cmd((0x80+13), 0) == 0) {
 12413   0021A6  0E00               	movlw	0
 12414   0021A8  6E0B               	movwf	send_cmd@arg^0,c
 12415   0021AA  0E00               	movlw	0
 12416   0021AC  6E0C               	movwf	(send_cmd@arg+1)^0,c
 12417   0021AE  0E00               	movlw	0
 12418   0021B0  6E0D               	movwf	(send_cmd@arg+2)^0,c
 12419   0021B2  0E00               	movlw	0
 12420   0021B4  6E0E               	movwf	(send_cmd@arg+3)^0,c
 12421   0021B6  0E8D               	movlw	141
 12422   0021B8  ECFE  F02D         	call	_send_cmd
 12423   0021BC  0900               	iorlw	0
 12424   0021BE  A4D8               	btfss	status,2,c
 12425   0021C0  EFE4  F010         	goto	u5691
 12426   0021C4  EFE6  F010         	goto	u5690
 12427   0021C8                     u5691:
 12428   0021C8  EF2E  F011         	goto	l4501
 12429   0021CC                     u5690:
 12430   0021CC                     
 12431                           ;diskio.c: 535:    SPI_Exchange(0xFF);
 12432   0021CC  0EFF               	movlw	255
 12433   0021CE  ECE9  F02E         	call	_SPI_Exchange
 12434   0021D2                     
 12435                           ;diskio.c: 536:    if (rcvr_datablock(ptr, 64))
 12436   0021D2  C036  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12437   0021D6  C037  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12438   0021DA  0E00               	movlw	0
 12439   0021DC  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 12440   0021DE  0E40               	movlw	64
 12441   0021E0  6E04               	movwf	rcvr_datablock@btr^0,c
 12442   0021E2  EC52  F02C         	call	_rcvr_datablock	;wreg free
 12443   0021E6  0900               	iorlw	0
 12444   0021E8  B4D8               	btfsc	status,2,c
 12445   0021EA  EFF9  F010         	goto	u5701
 12446   0021EE  EFFB  F010         	goto	u5700
 12447   0021F2                     u5701:
 12448   0021F2  EF2E  F011         	goto	l4501
 12449   0021F6                     u5700:
 12450   0021F6  EF57  F00E         	goto	l4409
 12451   0021FA                     l4497:
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;diskio.c: 542:   res = RES_PARERR;
 12455   0021FA  0E04               	movlw	4
 12456   0021FC  6E34               	movwf	disk_ioctl@res^0,c
 12457                           
 12458                           ;diskio.c: 543:  }
 12459   0021FE  EF2E  F011         	goto	l4501
 12460   002202                     l4499:
 12461                           
 12462                           ; BSR set to: 0
 12463   002202  5011               	movf	disk_ioctl@cmd^0,w,c
 12464   002204  6E14               	movwf	??_disk_ioctl^0,c
 12465   002206  6A15               	clrf	(??_disk_ioctl+1)^0,c
 12466                           
 12467                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12468                           ; Switch size 1, requested type "simple"
 12469                           ; Number of cases is 1, Range of values is 0 to 0
 12470                           ; switch strategies available:
 12471                           ; Name         Instructions Cycles
 12472                           ; simple_byte            4     3 (average)
 12473                           ;	Chosen strategy is simple_byte
 12474   002208  5015               	movf	(??_disk_ioctl+1)^0,w,c
 12475   00220A  0A00               	xorlw	0	; case 0
 12476   00220C  B4D8               	btfsc	status,2,c
 12477   00220E  EF0B  F011         	goto	l6185
 12478   002212  EFFD  F010         	goto	l4497
 12479   002216                     l6185:
 12480                           
 12481                           ; BSR set to: 0
 12482                           ; Switch size 1, requested type "simple"
 12483                           ; Number of cases is 8, Range of values is 0 to 14
 12484                           ; switch strategies available:
 12485                           ; Name         Instructions Cycles
 12486                           ; simple_byte           25    13 (average)
 12487                           ;	Chosen strategy is simple_byte
 12488   002216  5014               	movf	??_disk_ioctl^0,w,c
 12489   002218  0A00               	xorlw	0	; case 0
 12490   00221A  B4D8               	btfsc	status,2,c
 12491   00221C  EF4D  F00E         	goto	l4407
 12492   002220  0A01               	xorlw	1	; case 1
 12493   002222  B4D8               	btfsc	status,2,c
 12494   002224  EF5B  F00E         	goto	l4411
 12495   002228  0A02               	xorlw	2	; case 3
 12496   00222A  B4D8               	btfsc	status,2,c
 12497   00222C  EF3F  F00F         	goto	l216
 12498   002230  0A09               	xorlw	9	; case 10
 12499   002232  B4D8               	btfsc	status,2,c
 12500   002234  EF51  F010         	goto	l4459
 12501   002238  0A01               	xorlw	1	; case 11
 12502   00223A  B4D8               	btfsc	status,2,c
 12503   00223C  EF59  F010         	goto	l4463
 12504   002240  0A07               	xorlw	7	; case 12
 12505   002242  B4D8               	btfsc	status,2,c
 12506   002244  EF80  F010         	goto	l4469
 12507   002248  0A01               	xorlw	1	; case 13
 12508   00224A  B4D8               	btfsc	status,2,c
 12509   00224C  EFA7  F010         	goto	l4475
 12510   002250  0A03               	xorlw	3	; case 14
 12511   002252  B4D8               	btfsc	status,2,c
 12512   002254  EFD3  F010         	goto	l4489
 12513   002258  EFFD  F010         	goto	l4497
 12514   00225C                     l4501:
 12515                           
 12516                           ;diskio.c: 545:  deselect();
 12517   00225C  EC02  F02F         	call	_deselect	;wreg free
 12518   002260                     
 12519                           ;diskio.c: 547:  return res;
 12520   002260  5034               	movf	disk_ioctl@res^0,w,c
 12521   002262                     l206:
 12522   002262  0012               	return		;funcret
 12523   002264                     __end_of_disk_ioctl:
 12524                           	callstack 0
 12525                           
 12526 ;; *************** function ___wmul *****************
 12527 ;; Defined at:
 12528 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul16.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;  multiplier      2    0[COMRAM] unsigned int 
 12531 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;  product         2    4[COMRAM] unsigned int 
 12534 ;; Return value:  Size  Location     Type
 12535 ;;                  2    0[COMRAM] unsigned int 
 12536 ;; Registers used:
 12537 ;;		wreg, status,2, status,0, prodl, prodh
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12543 ;;      Params:         4       0       0       0       0       0       0       0       0
 12544 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12545 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12546 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12547 ;;Total ram usage:        6 bytes
 12548 ;; Hardware stack levels used: 1
 12549 ;; This function calls:
 12550 ;;		Nothing
 12551 ;; This function is called by:
 12552 ;;		_disk_ioctl
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           	psect	text34
 12557   005D8E                     __ptext34:
 12558                           	callstack 0
 12559   005D8E                     ___wmul:
 12560                           	callstack 26
 12561   005D8E  5001               	movf	___wmul@multiplier^0,w,c
 12562   005D90  0203               	mulwf	___wmul@multiplicand^0,c
 12563   005D92  CFF3 F005          	movff	prodl,___wmul@product
 12564   005D96  CFF4 F006          	movff	prodh,___wmul@product+1
 12565   005D9A  5001               	movf	___wmul@multiplier^0,w,c
 12566   005D9C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
 12567   005D9E  50F3               	movf	243,w,c
 12568   005DA0  2606               	addwf	(___wmul@product+1)^0,f,c
 12569   005DA2  5002               	movf	(___wmul@multiplier+1)^0,w,c
 12570   005DA4  0203               	mulwf	___wmul@multiplicand^0,c
 12571   005DA6  50F3               	movf	243,w,c
 12572   005DA8  2606               	addwf	(___wmul@product+1)^0,f,c
 12573   005DAA  C005  F001         	movff	___wmul@product,?___wmul
 12574   005DAE  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12575   005DB2  0012               	return		;funcret
 12576   005DB4                     __end_of___wmul:
 12577                           	callstack 0
 12578                           
 12579 ;; *************** function _st_clust *****************
 12580 ;; Defined at:
 12581 ;;		line 1252 in file "ff.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12584 ;;		 -> NULL(0), FatFs(558), 
 12585 ;;  cl              4    2[COMRAM] unsigned long 
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;		None
 12588 ;; Return value:  Size  Location     Type
 12589 ;;                  1    wreg      void 
 12590 ;; Registers used:
 12591 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12597 ;;      Params:         6       0       0       0       0       0       0       0       0
 12598 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12599 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12600 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12601 ;;Total ram usage:        6 bytes
 12602 ;; Hardware stack levels used: 1
 12603 ;; This function calls:
 12604 ;;		Nothing
 12605 ;; This function is called by:
 12606 ;;		_f_open
 12607 ;;		_f_sync
 12608 ;; This function uses a non-reentrant model
 12609 ;;
 12610                           
 12611                           	psect	text35
 12612   005D12                     __ptext35:
 12613                           	callstack 0
 12614   005D12                     _st_clust:
 12615                           	callstack 29
 12616   005D12                     
 12617                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12618   005D12  EE20 F01A          	lfsr	2,26
 12619   005D16  5001               	movf	st_clust@dir^0,w,c
 12620   005D18  26D9               	addwf	fsr2l,f,c
 12621   005D1A  5002               	movf	(st_clust@dir+1)^0,w,c
 12622   005D1C  22DA               	addwfc	fsr2h,f,c
 12623   005D1E  C003  FFDE         	movff	st_clust@cl,postinc2
 12624   005D22  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12625                           
 12626                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12627   005D26  EE20 F014          	lfsr	2,20
 12628   005D2A  5001               	movf	st_clust@dir^0,w,c
 12629   005D2C  26D9               	addwf	fsr2l,f,c
 12630   005D2E  5002               	movf	(st_clust@dir+1)^0,w,c
 12631   005D30  22DA               	addwfc	fsr2h,f,c
 12632   005D32  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12633   005D36  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12634   005D3A  0012               	return		;funcret
 12635   005D3C                     __end_of_st_clust:
 12636                           	callstack 0
 12637                           
 12638 ;; *************** function _move_window *****************
 12639 ;; Defined at:
 12640 ;;		line 729 in file "ff.c"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;  fs              2   47[COMRAM] PTR struct .
 12643 ;;		 -> NULL(0), FatFs(558), 
 12644 ;;  sector          4   49[COMRAM] unsigned long 
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  res             1   57[COMRAM] enum E95
 12647 ;; Return value:  Size  Location     Type
 12648 ;;                  1    wreg      enum E95
 12649 ;; Registers used:
 12650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12656 ;;      Params:         6       0       0       0       0       0       0       0       0
 12657 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12658 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12659 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12660 ;;Total ram usage:       11 bytes
 12661 ;; Hardware stack levels used: 1
 12662 ;; Hardware stack levels required when called: 7
 12663 ;; This function calls:
 12664 ;;		_disk_read
 12665 ;;		_sync_window
 12666 ;; This function is called by:
 12667 ;;		_get_fat
 12668 ;;		_put_fat
 12669 ;;		_dir_alloc
 12670 ;;		_dir_find
 12671 ;;		_dir_register
 12672 ;;		_check_fs
 12673 ;;		_find_volume
 12674 ;;		_f_open
 12675 ;;		_f_write
 12676 ;;		_f_sync
 12677 ;;		_f_read
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           	psect	text36
 12682   0055D0                     __ptext36:
 12683                           	callstack 0
 12684   0055D0                     _move_window:
 12685                           	callstack 22
 12686   0055D0                     
 12687                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12688   0055D0  0E00               	movlw	0
 12689   0055D2  6E3A               	movwf	move_window@res^0,c
 12690   0055D4                     
 12691                           ;ff.c: 737:  if (sector != fs->winsect) {
 12692   0055D4  EE20 F02A          	lfsr	2,42
 12693   0055D8  5030               	movf	move_window@fs^0,w,c
 12694   0055DA  26D9               	addwf	fsr2l,f,c
 12695   0055DC  5031               	movf	(move_window@fs+1)^0,w,c
 12696   0055DE  22DA               	addwfc	fsr2h,f,c
 12697   0055E0  5032               	movf	move_window@sector^0,w,c
 12698   0055E2  18DE               	xorwf	postinc2,w,c
 12699   0055E4  E10F               	bnz	u4920
 12700   0055E6  5033               	movf	(move_window@sector+1)^0,w,c
 12701   0055E8  18DE               	xorwf	postinc2,w,c
 12702   0055EA  E10C               	bnz	u4920
 12703   0055EC  5034               	movf	(move_window@sector+2)^0,w,c
 12704   0055EE  18DE               	xorwf	postinc2,w,c
 12705   0055F0  E109               	bnz	u4920
 12706   0055F2  5035               	movf	(move_window@sector+3)^0,w,c
 12707   0055F4  18DE               	xorwf	postinc2,w,c
 12708   0055F6  B4D8               	btfsc	status,2,c
 12709   0055F8  EF00  F02B         	goto	u4921
 12710   0055FC  EF02  F02B         	goto	u4920
 12711   005600                     u4921:
 12712   005600  EF48  F02B         	goto	l4109
 12713   005604                     u4920:
 12714   005604                     
 12715                           ;ff.c: 739:   res = sync_window(fs);
 12716   005604  C030  F01B         	movff	move_window@fs,sync_window@fs
 12717   005608  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12718   00560C  EC65  F024         	call	_sync_window	;wreg free
 12719   005610  6E3A               	movwf	move_window@res^0,c
 12720   005612                     
 12721                           ;ff.c: 741:   if (res == FR_OK) {
 12722   005612  503A               	movf	move_window@res^0,w,c
 12723   005614  A4D8               	btfss	status,2,c
 12724   005616  EF0F  F02B         	goto	u4931
 12725   00561A  EF11  F02B         	goto	u4930
 12726   00561E                     u4931:
 12727   00561E  EF48  F02B         	goto	l4109
 12728   005622                     u4930:
 12729   005622                     
 12730                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12731   005622  0E2E               	movlw	46
 12732   005624  2430               	addwf	move_window@fs^0,w,c
 12733   005626  6E11               	movwf	disk_read@buff^0,c
 12734   005628  0E00               	movlw	0
 12735   00562A  2031               	addwfc	(move_window@fs+1)^0,w,c
 12736   00562C  6E12               	movwf	(disk_read@buff+1)^0,c
 12737   00562E  C032  F013         	movff	move_window@sector,disk_read@sector
 12738   005632  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12739   005636  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12740   00563A  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12741   00563E  0E00               	movlw	0
 12742   005640  6E18               	movwf	(disk_read@count+1)^0,c
 12743   005642  0E01               	movlw	1
 12744   005644  6E17               	movwf	disk_read@count^0,c
 12745   005646  EE20 F001          	lfsr	2,1
 12746   00564A  5030               	movf	move_window@fs^0,w,c
 12747   00564C  26D9               	addwf	fsr2l,f,c
 12748   00564E  5031               	movf	(move_window@fs+1)^0,w,c
 12749   005650  22DA               	addwfc	fsr2h,f,c
 12750   005652  50DF               	movf	indf2,w,c
 12751   005654  EC74  F026         	call	_disk_read
 12752   005658  0900               	iorlw	0
 12753   00565A  B4D8               	btfsc	status,2,c
 12754   00565C  EF32  F02B         	goto	u4941
 12755   005660  EF34  F02B         	goto	u4940
 12756   005664                     u4941:
 12757   005664  EF3A  F02B         	goto	l4107
 12758   005668                     u4940:
 12759   005668                     
 12760                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12761   005668  6832               	setf	move_window@sector^0,c
 12762   00566A  6833               	setf	(move_window@sector+1)^0,c
 12763   00566C  6834               	setf	(move_window@sector+2)^0,c
 12764   00566E  6835               	setf	(move_window@sector+3)^0,c
 12765   005670                     
 12766                           ;ff.c: 744:     res = FR_DISK_ERR;
 12767   005670  0E01               	movlw	1
 12768   005672  6E3A               	movwf	move_window@res^0,c
 12769   005674                     l4107:
 12770                           
 12771                           ;ff.c: 746:    fs->winsect = sector;
 12772   005674  EE20 F02A          	lfsr	2,42
 12773   005678  5030               	movf	move_window@fs^0,w,c
 12774   00567A  26D9               	addwf	fsr2l,f,c
 12775   00567C  5031               	movf	(move_window@fs+1)^0,w,c
 12776   00567E  22DA               	addwfc	fsr2h,f,c
 12777   005680  C032  FFDE         	movff	move_window@sector,postinc2
 12778   005684  C033  FFDE         	movff	move_window@sector+1,postinc2
 12779   005688  C034  FFDE         	movff	move_window@sector+2,postinc2
 12780   00568C  C035  FFDE         	movff	move_window@sector+3,postinc2
 12781   005690                     l4109:
 12782                           
 12783                           ;ff.c: 749:  return res;
 12784   005690  503A               	movf	move_window@res^0,w,c
 12785   005692  0012               	return		;funcret
 12786   005694                     __end_of_move_window:
 12787                           	callstack 0
 12788                           
 12789 ;; *************** function _sync_window *****************
 12790 ;; Defined at:
 12791 ;;		line 700 in file "ff.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  fs              2   26[COMRAM] PTR struct .
 12794 ;;		 -> NULL(0), FatFs(558), 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  wsect           4   43[COMRAM] unsigned long 
 12797 ;;  nf              2   41[COMRAM] unsigned short 
 12798 ;;  res             1   40[COMRAM] enum E95
 12799 ;; Return value:  Size  Location     Type
 12800 ;;                  1    wreg      enum E95
 12801 ;; Registers used:
 12802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12808 ;;      Params:         2       0       0       0       0       0       0       0       0
 12809 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12810 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12811 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12812 ;;Total ram usage:       21 bytes
 12813 ;; Hardware stack levels used: 1
 12814 ;; Hardware stack levels required when called: 6
 12815 ;; This function calls:
 12816 ;;		_disk_write
 12817 ;; This function is called by:
 12818 ;;		_move_window
 12819 ;;		_sync_fs
 12820 ;;		_dir_next
 12821 ;;		_f_write
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           	psect	text37
 12826   0048CA                     __ptext37:
 12827                           	callstack 0
 12828   0048CA                     _sync_window:
 12829                           	callstack 23
 12830   0048CA                     
 12831                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12832   0048CA  0E00               	movlw	0
 12833   0048CC  6E29               	movwf	sync_window@res^0,c
 12834   0048CE                     
 12835                           ;ff.c: 709:  if (fs->wflag) {
 12836   0048CE  EE20 F004          	lfsr	2,4
 12837   0048D2  501B               	movf	sync_window@fs^0,w,c
 12838   0048D4  26D9               	addwf	fsr2l,f,c
 12839   0048D6  501C               	movf	(sync_window@fs+1)^0,w,c
 12840   0048D8  22DA               	addwfc	fsr2h,f,c
 12841   0048DA  50DF               	movf	indf2,w,c
 12842   0048DC  B4D8               	btfsc	status,2,c
 12843   0048DE  EF73  F024         	goto	u4881
 12844   0048E2  EF75  F024         	goto	u4880
 12845   0048E6                     u4881:
 12846   0048E6  EF26  F025         	goto	l4089
 12847   0048EA                     u4880:
 12848   0048EA                     
 12849                           ;ff.c: 710:   wsect = fs->winsect;
 12850   0048EA  EE20 F02A          	lfsr	2,42
 12851   0048EE  501B               	movf	sync_window@fs^0,w,c
 12852   0048F0  26D9               	addwf	fsr2l,f,c
 12853   0048F2  501C               	movf	(sync_window@fs+1)^0,w,c
 12854   0048F4  22DA               	addwfc	fsr2h,f,c
 12855   0048F6  CFDE F02C          	movff	postinc2,sync_window@wsect
 12856   0048FA  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12857   0048FE  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12858   004902  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12859   004906                     
 12860                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12861   004906  0E2E               	movlw	46
 12862   004908  241B               	addwf	sync_window@fs^0,w,c
 12863   00490A  6E11               	movwf	disk_write@buff^0,c
 12864   00490C  0E00               	movlw	0
 12865   00490E  201C               	addwfc	(sync_window@fs+1)^0,w,c
 12866   004910  6E12               	movwf	(disk_write@buff+1)^0,c
 12867   004912  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12868   004916  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12869   00491A  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12870   00491E  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12871   004922  0E00               	movlw	0
 12872   004924  6E18               	movwf	(disk_write@count+1)^0,c
 12873   004926  0E01               	movlw	1
 12874   004928  6E17               	movwf	disk_write@count^0,c
 12875   00492A  EE20 F001          	lfsr	2,1
 12876   00492E  501B               	movf	sync_window@fs^0,w,c
 12877   004930  26D9               	addwf	fsr2l,f,c
 12878   004932  501C               	movf	(sync_window@fs+1)^0,w,c
 12879   004934  22DA               	addwfc	fsr2h,f,c
 12880   004936  50DF               	movf	indf2,w,c
 12881   004938  EC90  F023         	call	_disk_write
 12882   00493C  0900               	iorlw	0
 12883   00493E  B4D8               	btfsc	status,2,c
 12884   004940  EFA4  F024         	goto	u4891
 12885   004944  EFA6  F024         	goto	u4890
 12886   004948                     u4891:
 12887   004948  EFAA  F024         	goto	l4071
 12888   00494C                     u4890:
 12889   00494C                     
 12890                           ;ff.c: 712:    res = FR_DISK_ERR;
 12891   00494C  0E01               	movlw	1
 12892   00494E  6E29               	movwf	sync_window@res^0,c
 12893                           
 12894                           ;ff.c: 713:   } else {
 12895   004950  EF26  F025         	goto	l4089
 12896   004954                     l4071:
 12897                           
 12898                           ;ff.c: 714:    fs->wflag = 0;
 12899   004954  EE20 F004          	lfsr	2,4
 12900   004958  501B               	movf	sync_window@fs^0,w,c
 12901   00495A  26D9               	addwf	fsr2l,f,c
 12902   00495C  501C               	movf	(sync_window@fs+1)^0,w,c
 12903   00495E  22DA               	addwfc	fsr2h,f,c
 12904   004960  6ADF               	clrf	indf2,c
 12905   004962                     
 12906                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12907   004962  EE20 F016          	lfsr	2,22
 12908   004966  501B               	movf	sync_window@fs^0,w,c
 12909   004968  26D9               	addwf	fsr2l,f,c
 12910   00496A  501C               	movf	(sync_window@fs+1)^0,w,c
 12911   00496C  22DA               	addwfc	fsr2h,f,c
 12912   00496E  EE10 F01E          	lfsr	1,30
 12913   004972  501B               	movf	sync_window@fs^0,w,c
 12914   004974  26E1               	addwf	fsr1l,f,c
 12915   004976  501C               	movf	(sync_window@fs+1)^0,w,c
 12916   004978  22E2               	addwfc	fsr1h,f,c
 12917   00497A  CFE6 F021          	movff	postinc1,??_sync_window+4
 12918   00497E  CFE6 F022          	movff	postinc1,??_sync_window+5
 12919   004982  CFE6 F023          	movff	postinc1,??_sync_window+6
 12920   004986  CFE6 F024          	movff	postinc1,??_sync_window+7
 12921   00498A  5021               	movf	(??_sync_window+4)^0,w,c
 12922   00498C  5C2C               	subwf	sync_window@wsect^0,w,c
 12923   00498E  6E25               	movwf	(??_sync_window+8)^0,c
 12924   004990  5022               	movf	(??_sync_window+5)^0,w,c
 12925   004992  582D               	subwfb	(sync_window@wsect+1)^0,w,c
 12926   004994  6E26               	movwf	(??_sync_window+9)^0,c
 12927   004996  5023               	movf	(??_sync_window+6)^0,w,c
 12928   004998  582E               	subwfb	(sync_window@wsect+2)^0,w,c
 12929   00499A  6E27               	movwf	(??_sync_window+10)^0,c
 12930   00499C  5024               	movf	(??_sync_window+7)^0,w,c
 12931   00499E  582F               	subwfb	(sync_window@wsect+3)^0,w,c
 12932   0049A0  6E28               	movwf	(??_sync_window+11)^0,c
 12933   0049A2  50DE               	movf	postinc2,w,c
 12934   0049A4  5C25               	subwf	(??_sync_window+8)^0,w,c
 12935   0049A6  50DE               	movf	postinc2,w,c
 12936   0049A8  5826               	subwfb	(??_sync_window+9)^0,w,c
 12937   0049AA  50DE               	movf	postinc2,w,c
 12938   0049AC  5827               	subwfb	(??_sync_window+10)^0,w,c
 12939   0049AE  50DE               	movf	postinc2,w,c
 12940   0049B0  5828               	subwfb	(??_sync_window+11)^0,w,c
 12941   0049B2  B0D8               	btfsc	status,0,c
 12942   0049B4  EFDE  F024         	goto	u4901
 12943   0049B8  EFE0  F024         	goto	u4900
 12944   0049BC                     u4901:
 12945   0049BC  EF26  F025         	goto	l4089
 12946   0049C0                     u4900:
 12947   0049C0                     
 12948                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12949   0049C0  EE20 F003          	lfsr	2,3
 12950   0049C4  501B               	movf	sync_window@fs^0,w,c
 12951   0049C6  26D9               	addwf	fsr2l,f,c
 12952   0049C8  501C               	movf	(sync_window@fs+1)^0,w,c
 12953   0049CA  22DA               	addwfc	fsr2h,f,c
 12954   0049CC  50DF               	movf	indf2,w,c
 12955   0049CE  6E1D               	movwf	??_sync_window^0,c
 12956   0049D0  501D               	movf	??_sync_window^0,w,c
 12957   0049D2  6E2A               	movwf	sync_window@nf^0,c
 12958   0049D4  6A2B               	clrf	(sync_window@nf+1)^0,c
 12959   0049D6                     l4077:
 12960   0049D6  502B               	movf	(sync_window@nf+1)^0,w,c
 12961   0049D8  E107               	bnz	u4911
 12962   0049DA  0E02               	movlw	2
 12963   0049DC  5C2A               	subwf	sync_window@nf^0,w,c
 12964   0049DE  B0D8               	btfsc	status,0,c
 12965   0049E0  EFF4  F024         	goto	u4911
 12966   0049E4  EFF6  F024         	goto	u4910
 12967   0049E8                     u4911:
 12968   0049E8  EFF8  F024         	goto	l4081
 12969   0049EC                     u4910:
 12970   0049EC  EF26  F025         	goto	l4089
 12971   0049F0                     l4081:
 12972                           
 12973                           ;ff.c: 717:      wsect += fs->fsize;
 12974   0049F0  EE20 F016          	lfsr	2,22
 12975   0049F4  501B               	movf	sync_window@fs^0,w,c
 12976   0049F6  26D9               	addwf	fsr2l,f,c
 12977   0049F8  501C               	movf	(sync_window@fs+1)^0,w,c
 12978   0049FA  22DA               	addwfc	fsr2h,f,c
 12979   0049FC  50DE               	movf	postinc2,w,c
 12980   0049FE  262C               	addwf	sync_window@wsect^0,f,c
 12981   004A00  50DE               	movf	postinc2,w,c
 12982   004A02  222D               	addwfc	(sync_window@wsect+1)^0,f,c
 12983   004A04  50DE               	movf	postinc2,w,c
 12984   004A06  222E               	addwfc	(sync_window@wsect+2)^0,f,c
 12985   004A08  50DD               	movf	postdec2,w,c
 12986   004A0A  222F               	addwfc	(sync_window@wsect+3)^0,f,c
 12987   004A0C                     
 12988                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12989   004A0C  0E2E               	movlw	46
 12990   004A0E  241B               	addwf	sync_window@fs^0,w,c
 12991   004A10  6E11               	movwf	disk_write@buff^0,c
 12992   004A12  0E00               	movlw	0
 12993   004A14  201C               	addwfc	(sync_window@fs+1)^0,w,c
 12994   004A16  6E12               	movwf	(disk_write@buff+1)^0,c
 12995   004A18  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12996   004A1C  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12997   004A20  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12998   004A24  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12999   004A28  0E00               	movlw	0
 13000   004A2A  6E18               	movwf	(disk_write@count+1)^0,c
 13001   004A2C  0E01               	movlw	1
 13002   004A2E  6E17               	movwf	disk_write@count^0,c
 13003   004A30  EE20 F001          	lfsr	2,1
 13004   004A34  501B               	movf	sync_window@fs^0,w,c
 13005   004A36  26D9               	addwf	fsr2l,f,c
 13006   004A38  501C               	movf	(sync_window@fs+1)^0,w,c
 13007   004A3A  22DA               	addwfc	fsr2h,f,c
 13008   004A3C  50DF               	movf	indf2,w,c
 13009   004A3E  EC90  F023         	call	_disk_write
 13010   004A42                     
 13011                           ;ff.c: 719:     }
 13012   004A42  062A               	decf	sync_window@nf^0,f,c
 13013   004A44  A0D8               	btfss	status,0,c
 13014   004A46  062B               	decf	(sync_window@nf+1)^0,f,c
 13015   004A48  EFEB  F024         	goto	l4077
 13016   004A4C                     l4089:
 13017                           
 13018                           ;ff.c: 723:  return res;
 13019   004A4C  5029               	movf	sync_window@res^0,w,c
 13020   004A4E  0012               	return		;funcret
 13021   004A50                     __end_of_sync_window:
 13022                           	callstack 0
 13023                           
 13024 ;; *************** function _disk_write *****************
 13025 ;; Defined at:
 13026 ;;		line 408 in file "diskio.c"
 13027 ;; Parameters:    Size  Location     Type
 13028 ;;  pdrv            1    wreg     unsigned char 
 13029 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 13030 ;;		 -> FatFs.win(512), NULL(0), STR_3(25), FatFs(558), 
 13031 ;;  sector          4   18[COMRAM] unsigned long 
 13032 ;;  count           2   22[COMRAM] unsigned short 
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  pdrv            1   25[COMRAM] unsigned char 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      enum E3537
 13037 ;; Registers used:
 13038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13044 ;;      Params:         8       0       0       0       0       0       0       0       0
 13045 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13046 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13047 ;;      Totals:        10       0       0       0       0       0       0       0       0
 13048 ;;Total ram usage:       10 bytes
 13049 ;; Hardware stack levels used: 1
 13050 ;; Hardware stack levels required when called: 5
 13051 ;; This function calls:
 13052 ;;		_deselect
 13053 ;;		_send_cmd
 13054 ;;		_xmit_datablock
 13055 ;; This function is called by:
 13056 ;;		_sync_window
 13057 ;;		_sync_fs
 13058 ;;		_f_write
 13059 ;; This function uses a non-reentrant model
 13060 ;;
 13061                           
 13062                           	psect	text38
 13063   004720                     __ptext38:
 13064                           	callstack 0
 13065   004720                     _disk_write:
 13066                           	callstack 23
 13067                           
 13068                           ;incstack = 0
 13069                           ;disk_write@pdrv stored from wreg
 13070   004720  6E1A               	movwf	disk_write@pdrv^0,c
 13071   004722                     
 13072                           ;diskio.c: 409:  BYTE pdrv,;diskio.c: 410:  const BYTE *buff,;diskio.c: 411:  DWORD sect
      +                          or,;diskio.c: 412:  UINT count;diskio.c: 414: {;diskio.c: 415:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 13073   004722  501A               	movf	disk_write@pdrv^0,w,c
 13074   004724  A4D8               	btfss	status,2,c
 13075   004726  EF97  F023         	goto	u4601
 13076   00472A  EF99  F023         	goto	u4600
 13077   00472E                     u4601:
 13078   00472E  EFA2  F023         	goto	l3983
 13079   004732                     u4600:
 13080   004732  5017               	movf	disk_write@count^0,w,c
 13081   004734  1018               	iorwf	(disk_write@count+1)^0,w,c
 13082   004736  A4D8               	btfss	status,2,c
 13083   004738  EFA0  F023         	goto	u4611
 13084   00473C  EFA2  F023         	goto	u4610
 13085   004740                     u4611:
 13086   004740  EFA5  F023         	goto	l187
 13087   004744                     u4610:
 13088   004744                     l3983:
 13089   004744  0E04               	movlw	4
 13090   004746  EF64  F024         	goto	l190
 13091   00474A                     l187:
 13092                           
 13093                           ;diskio.c: 416:  if (Stat & 0x01) return RES_NOTRDY;
 13094   00474A  0100               	movlb	0	; () banked
 13095   00474C  A1F7               	btfss	_Stat& (0+255),0,b
 13096   00474E  EFAB  F023         	goto	u4621
 13097   004752  EFAD  F023         	goto	u4620
 13098   004756                     u4621:
 13099   004756  EFB0  F023         	goto	l191
 13100   00475A                     u4620:
 13101   00475A                     
 13102                           ; BSR set to: 0
 13103   00475A  0E03               	movlw	3
 13104   00475C  EF64  F024         	goto	l190
 13105   004760                     l191:
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;diskio.c: 417:  if (Stat & 0x04) return RES_WRPRT;
 13109   004760  A5F7               	btfss	_Stat& (0+255),2,b
 13110   004762  EFB5  F023         	goto	u4631
 13111   004766  EFB7  F023         	goto	u4630
 13112   00476A                     u4631:
 13113   00476A  EFBA  F023         	goto	l192
 13114   00476E                     u4630:
 13115   00476E                     
 13116                           ; BSR set to: 0
 13117   00476E  0E02               	movlw	2
 13118   004770  EF64  F024         	goto	l190
 13119   004774                     l192:
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;diskio.c: 419:  if (!(CardType & 0x08)) sector *= 512;
 13123   004774  B7D6               	btfsc	_CardType& (0+255),3,b
 13124   004776  EFBF  F023         	goto	u4641
 13125   00477A  EFC1  F023         	goto	u4640
 13126   00477E                     u4641:
 13127   00477E  EFCA  F023         	goto	l193
 13128   004782                     u4640:
 13129   004782                     
 13130                           ; BSR set to: 0
 13131   004782  0E09               	movlw	9
 13132   004784                     u4655:
 13133   004784  90D8               	bcf	status,0,c
 13134   004786  3613               	rlcf	disk_write@sector^0,f,c
 13135   004788  3614               	rlcf	(disk_write@sector+1)^0,f,c
 13136   00478A  3615               	rlcf	(disk_write@sector+2)^0,f,c
 13137   00478C  3616               	rlcf	(disk_write@sector+3)^0,f,c
 13138   00478E  2EE8               	decfsz	wreg,f,c
 13139   004790  EFC2  F023         	goto	u4655
 13140   004794                     l193:
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;diskio.c: 421:  if (count == 1) {
 13144   004794  0417               	decf	disk_write@count^0,w,c
 13145   004796  1018               	iorwf	(disk_write@count+1)^0,w,c
 13146   004798  A4D8               	btfss	status,2,c
 13147   00479A  EFD1  F023         	goto	u4661
 13148   00479E  EFD3  F023         	goto	u4660
 13149   0047A2                     u4661:
 13150   0047A2  EFFC  F023         	goto	l4003
 13151   0047A6                     u4660:
 13152   0047A6                     
 13153                           ; BSR set to: 0
 13154                           ;diskio.c: 422:   if ((send_cmd((24), sector) == 0)
 13155   0047A6  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13156   0047AA  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13157   0047AE  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13158   0047B2  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13159   0047B6  0E18               	movlw	24
 13160   0047B8  ECFE  F02D         	call	_send_cmd
 13161   0047BC  0900               	iorlw	0
 13162   0047BE  A4D8               	btfss	status,2,c
 13163   0047C0  EFE4  F023         	goto	u4671
 13164   0047C4  EFE6  F023         	goto	u4670
 13165   0047C8                     u4671:
 13166   0047C8  EF57  F024         	goto	l4017
 13167   0047CC                     u4670:
 13168   0047CC  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13169   0047D0  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13170   0047D4  0EFE               	movlw	254
 13171   0047D6  6E06               	movwf	xmit_datablock@token^0,c
 13172   0047D8  ECAB  F02B         	call	_xmit_datablock	;wreg free
 13173   0047DC  0900               	iorlw	0
 13174   0047DE  B4D8               	btfsc	status,2,c
 13175   0047E0  EFF4  F023         	goto	u4681
 13176   0047E4  EFF6  F023         	goto	u4680
 13177   0047E8                     u4681:
 13178   0047E8  EF57  F024         	goto	l4017
 13179   0047EC                     u4680:
 13180   0047EC                     
 13181                           ;diskio.c: 424:    count = 0;
 13182   0047EC  0E00               	movlw	0
 13183   0047EE  6E18               	movwf	(disk_write@count+1)^0,c
 13184   0047F0  0E00               	movlw	0
 13185   0047F2  6E17               	movwf	disk_write@count^0,c
 13186   0047F4  EF57  F024         	goto	l4017
 13187   0047F8                     l4003:
 13188                           
 13189                           ; BSR set to: 0
 13190                           ;diskio.c: 427:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 13191   0047F8  C0D6  F019         	movff	_CardType,??_disk_write
 13192   0047FC  0E06               	movlw	6
 13193   0047FE  1619               	andwf	??_disk_write^0,f,c
 13194   004800  B4D8               	btfsc	status,2,c
 13195   004802  EF05  F024         	goto	u4691
 13196   004806  EF07  F024         	goto	u4690
 13197   00480A                     u4691:
 13198   00480A  EF10  F024         	goto	l197
 13199   00480E                     u4690:
 13200   00480E                     
 13201                           ; BSR set to: 0
 13202   00480E  C017  F00B         	movff	disk_write@count,send_cmd@arg
 13203   004812  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 13204   004816  6A0D               	clrf	(send_cmd@arg+2)^0,c
 13205   004818  6A0E               	clrf	(send_cmd@arg+3)^0,c
 13206   00481A  0E97               	movlw	151
 13207   00481C  ECFE  F02D         	call	_send_cmd
 13208   004820                     l197:
 13209                           
 13210                           ;diskio.c: 428:   if (send_cmd((25), sector) == 0) {
 13211   004820  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13212   004824  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13213   004828  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13214   00482C  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13215   004830  0E19               	movlw	25
 13216   004832  ECFE  F02D         	call	_send_cmd
 13217   004836  0900               	iorlw	0
 13218   004838  A4D8               	btfss	status,2,c
 13219   00483A  EF21  F024         	goto	u4701
 13220   00483E  EF23  F024         	goto	u4700
 13221   004842                     u4701:
 13222   004842  EF57  F024         	goto	l4017
 13223   004846                     u4700:
 13224   004846                     l4007:
 13225                           
 13226                           ;diskio.c: 430:     if (!xmit_datablock(buff, 0xFC)) break;
 13227   004846  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13228   00484A  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13229   00484E  0EFC               	movlw	252
 13230   004850  6E06               	movwf	xmit_datablock@token^0,c
 13231   004852  ECAB  F02B         	call	_xmit_datablock	;wreg free
 13232   004856  0900               	iorlw	0
 13233   004858  A4D8               	btfss	status,2,c
 13234   00485A  EF31  F024         	goto	u4711
 13235   00485E  EF33  F024         	goto	u4710
 13236   004862                     u4711:
 13237   004862  EF35  F024         	goto	l4011
 13238   004866                     u4710:
 13239   004866  EF43  F024         	goto	l4013
 13240   00486A                     l4011:
 13241                           
 13242                           ;diskio.c: 431:     buff += 512;
 13243   00486A  0E02               	movlw	2
 13244   00486C  2612               	addwf	(disk_write@buff+1)^0,f,c
 13245                           
 13246                           ;diskio.c: 432:    } while (--count);
 13247   00486E  0617               	decf	disk_write@count^0,f,c
 13248   004870  A0D8               	btfss	status,0,c
 13249   004872  0618               	decf	(disk_write@count+1)^0,f,c
 13250   004874  5017               	movf	disk_write@count^0,w,c
 13251   004876  1018               	iorwf	(disk_write@count+1)^0,w,c
 13252   004878  A4D8               	btfss	status,2,c
 13253   00487A  EF41  F024         	goto	u4721
 13254   00487E  EF43  F024         	goto	u4720
 13255   004882                     u4721:
 13256   004882  EF23  F024         	goto	l4007
 13257   004886                     u4720:
 13258   004886                     l4013:
 13259                           
 13260                           ;diskio.c: 433:    if (!xmit_datablock(0, 0xFD))
 13261   004886  0E00               	movlw	0
 13262   004888  6E04               	movwf	xmit_datablock@buff^0,c
 13263   00488A  0E00               	movlw	0
 13264   00488C  6E05               	movwf	(xmit_datablock@buff+1)^0,c
 13265   00488E  0EFD               	movlw	253
 13266   004890  6E06               	movwf	xmit_datablock@token^0,c
 13267   004892  ECAB  F02B         	call	_xmit_datablock	;wreg free
 13268   004896  0900               	iorlw	0
 13269   004898  A4D8               	btfss	status,2,c
 13270   00489A  EF51  F024         	goto	u4731
 13271   00489E  EF53  F024         	goto	u4730
 13272   0048A2                     u4731:
 13273   0048A2  EF57  F024         	goto	l4017
 13274   0048A6                     u4730:
 13275   0048A6                     
 13276                           ;diskio.c: 434:     count = 1;
 13277   0048A6  0E00               	movlw	0
 13278   0048A8  6E18               	movwf	(disk_write@count+1)^0,c
 13279   0048AA  0E01               	movlw	1
 13280   0048AC  6E17               	movwf	disk_write@count^0,c
 13281   0048AE                     l4017:
 13282                           
 13283                           ;diskio.c: 437:  deselect();
 13284   0048AE  EC02  F02F         	call	_deselect	;wreg free
 13285   0048B2                     
 13286                           ;diskio.c: 439:  return count ? RES_ERROR : RES_OK;
 13287   0048B2  5017               	movf	disk_write@count^0,w,c
 13288   0048B4  1018               	iorwf	(disk_write@count+1)^0,w,c
 13289   0048B6  A4D8               	btfss	status,2,c
 13290   0048B8  EF60  F024         	goto	u4741
 13291   0048BC  EF63  F024         	goto	u4740
 13292   0048C0                     u4741:
 13293   0048C0  0E01               	movlw	1
 13294   0048C2  EF64  F024         	goto	u4750
 13295   0048C6                     u4740:
 13296   0048C6  0E00               	movlw	0
 13297   0048C8                     u4750:
 13298   0048C8                     l190:
 13299   0048C8  0012               	return		;funcret
 13300   0048CA                     __end_of_disk_write:
 13301                           	callstack 0
 13302                           
 13303 ;; *************** function _xmit_datablock *****************
 13304 ;; Defined at:
 13305 ;;		line 158 in file "diskio.c"
 13306 ;; Parameters:    Size  Location     Type
 13307 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13308 ;;		 -> FatFs.win(512), NULL(0), STR_3(25), FatFs(558), 
 13309 ;;  token           1    5[COMRAM] unsigned char 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  i               2    6[COMRAM] unsigned short 
 13312 ;;  resp            1    8[COMRAM] unsigned char 
 13313 ;; Return value:  Size  Location     Type
 13314 ;;                  1    wreg      unsigned char 
 13315 ;; Registers used:
 13316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13317 ;; Tracked objects:
 13318 ;;		On entry : 0/0
 13319 ;;		On exit  : 0/0
 13320 ;;		Unchanged: 0/0
 13321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13322 ;;      Params:         3       0       0       0       0       0       0       0       0
 13323 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13324 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13325 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13326 ;;Total ram usage:        6 bytes
 13327 ;; Hardware stack levels used: 1
 13328 ;; Hardware stack levels required when called: 2
 13329 ;; This function calls:
 13330 ;;		_SPI_Exchange
 13331 ;;		_SPI_Write
 13332 ;;		_wait_ready
 13333 ;; This function is called by:
 13334 ;;		_disk_write
 13335 ;; This function uses a non-reentrant model
 13336 ;;
 13337                           
 13338                           	psect	text39
 13339   005756                     __ptext39:
 13340                           	callstack 0
 13341   005756                     _xmit_datablock:
 13342                           	callstack 25
 13343   005756                     
 13344                           ;diskio.c: 159:  const BYTE *buff,;diskio.c: 160:  BYTE token;diskio.c: 162: {;diskio.c:
      +                           163:  BYTE resp;;diskio.c: 164:  WORD i;;diskio.c: 167:  if (!wait_ready()) return 0;
 13345   005756  ECCF  F02D         	call	_wait_ready	;wreg free
 13346   00575A  0900               	iorlw	0
 13347   00575C  A4D8               	btfss	status,2,c
 13348   00575E  EFB3  F02B         	goto	u4491
 13349   005762  EFB5  F02B         	goto	u4490
 13350   005766                     u4491:
 13351   005766  EFB8  F02B         	goto	l3909
 13352   00576A                     u4490:
 13353   00576A                     l3905:
 13354   00576A  0E00               	movlw	0
 13355   00576C  EFFF  F02B         	goto	l107
 13356   005770                     l3909:
 13357                           
 13358                           ;diskio.c: 169:  SPI_Write(token);
 13359   005770  5006               	movf	xmit_datablock@token^0,w,c
 13360   005772  ECF6  F02E         	call	_SPI_Write
 13361   005776                     
 13362                           ;diskio.c: 170:  if (token != 0xFD) {
 13363   005776  0EFD               	movlw	253
 13364   005778  1806               	xorwf	xmit_datablock@token^0,w,c
 13365   00577A  B4D8               	btfsc	status,2,c
 13366   00577C  EFC2  F02B         	goto	u4501
 13367   005780  EFC4  F02B         	goto	u4500
 13368   005784                     u4501:
 13369   005784  EFFE  F02B         	goto	l3929
 13370   005788                     u4500:
 13371   005788                     
 13372                           ;diskio.c: 171:   i = 512;
 13373   005788  0E02               	movlw	2
 13374   00578A  6E08               	movwf	(xmit_datablock@i+1)^0,c
 13375   00578C  0E00               	movlw	0
 13376   00578E  6E07               	movwf	xmit_datablock@i^0,c
 13377   005790                     l3915:
 13378                           
 13379                           ;diskio.c: 173:    SPI_Write(*buff++);
 13380   005790  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13381   005794  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13382   005798  6AF8               	clrf	tblptru,c
 13383   00579A  0E07               	movlw	(high __ramtop+-1)
 13384   00579C  64F7               	cpfsgt	tblptrh,c
 13385   00579E  D003               	bra	u4517
 13386   0057A0  0008               	tblrd		*
 13387   0057A2  50F5               	movf	tablat,w,c
 13388   0057A4  D005               	bra	u4510
 13389   0057A6                     u4517:
 13390   0057A6  CFF6 FFE9          	movff	tblptrl,fsr0l
 13391   0057AA  CFF7 FFEA          	movff	tblptrh,fsr0h
 13392   0057AE  50EF               	movf	indf0,w,c
 13393   0057B0                     u4510:
 13394   0057B0  ECF6  F02E         	call	_SPI_Write
 13395   0057B4  4A04               	infsnz	xmit_datablock@buff^0,f,c
 13396   0057B6  2A05               	incf	(xmit_datablock@buff+1)^0,f,c
 13397   0057B8  0607               	decf	xmit_datablock@i^0,f,c
 13398   0057BA  A0D8               	btfss	status,0,c
 13399   0057BC  0608               	decf	(xmit_datablock@i+1)^0,f,c
 13400   0057BE  5007               	movf	xmit_datablock@i^0,w,c
 13401   0057C0  1008               	iorwf	(xmit_datablock@i+1)^0,w,c
 13402   0057C2  A4D8               	btfss	status,2,c
 13403   0057C4  EFE6  F02B         	goto	u4521
 13404   0057C8  EFE8  F02B         	goto	u4520
 13405   0057CC                     u4521:
 13406   0057CC  EFC8  F02B         	goto	l3915
 13407   0057D0                     u4520:
 13408   0057D0                     
 13409                           ;diskio.c: 175:   SPI_Exchange(0xFF);
 13410   0057D0  0EFF               	movlw	255
 13411   0057D2  ECE9  F02E         	call	_SPI_Exchange
 13412                           
 13413                           ;diskio.c: 176:   SPI_Exchange(0xFF);
 13414   0057D6  0EFF               	movlw	255
 13415   0057D8  ECE9  F02E         	call	_SPI_Exchange
 13416                           
 13417                           ;diskio.c: 177:   resp = SPI_Exchange(0xFF);
 13418   0057DC  0EFF               	movlw	255
 13419   0057DE  ECE9  F02E         	call	_SPI_Exchange
 13420   0057E2  6E09               	movwf	xmit_datablock@resp^0,c
 13421   0057E4                     
 13422                           ;diskio.c: 178:   if ((resp & 0x1F) != 0x05)
 13423   0057E4  5009               	movf	xmit_datablock@resp^0,w,c
 13424   0057E6  0B1F               	andlw	31
 13425   0057E8  0A05               	xorlw	5
 13426   0057EA  B4D8               	btfsc	status,2,c
 13427   0057EC  EFFA  F02B         	goto	u4531
 13428   0057F0  EFFC  F02B         	goto	u4530
 13429   0057F4                     u4531:
 13430   0057F4  EFFE  F02B         	goto	l3929
 13431   0057F8                     u4530:
 13432   0057F8  EFB5  F02B         	goto	l3905
 13433   0057FC                     l3929:
 13434                           
 13435                           ;diskio.c: 182:  return 1;
 13436   0057FC  0E01               	movlw	1
 13437   0057FE                     l107:
 13438   0057FE  0012               	return		;funcret
 13439   005800                     __end_of_xmit_datablock:
 13440                           	callstack 0
 13441                           
 13442 ;; *************** function _disk_read *****************
 13443 ;; Defined at:
 13444 ;;		line 373 in file "diskio.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  pdrv            1    wreg     unsigned char 
 13447 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13448 ;;		 -> NULL(0), FatFs(558), 
 13449 ;;  sector          4   18[COMRAM] unsigned long 
 13450 ;;  count           2   22[COMRAM] unsigned short 
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;  pdrv            1   24[COMRAM] unsigned char 
 13453 ;;  cmd             1   27[COMRAM] unsigned char 
 13454 ;; Return value:  Size  Location     Type
 13455 ;;                  1    wreg      enum E3537
 13456 ;; Registers used:
 13457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13463 ;;      Params:         8       0       0       0       0       0       0       0       0
 13464 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13465 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13466 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13467 ;;Total ram usage:       12 bytes
 13468 ;; Hardware stack levels used: 1
 13469 ;; Hardware stack levels required when called: 5
 13470 ;; This function calls:
 13471 ;;		_deselect
 13472 ;;		_rcvr_datablock
 13473 ;;		_send_cmd
 13474 ;; This function is called by:
 13475 ;;		_move_window
 13476 ;;		_f_read
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text40
 13481   004CE8                     __ptext40:
 13482                           	callstack 0
 13483   004CE8                     _disk_read:
 13484                           	callstack 23
 13485                           
 13486                           ;incstack = 0
 13487                           ;disk_read@pdrv stored from wreg
 13488   004CE8  6E19               	movwf	disk_read@pdrv^0,c
 13489   004CEA                     
 13490                           ;diskio.c: 374:  BYTE pdrv,;diskio.c: 375:  BYTE *buff,;diskio.c: 376:  DWORD sector,;di
      +                          skio.c: 377:  UINT count;diskio.c: 379: {;diskio.c: 380:  BYTE cmd;;diskio.c: 383:  if (
      +                          pdrv || !count) return RES_PARERR;
 13491   004CEA  5019               	movf	disk_read@pdrv^0,w,c
 13492   004CEC  A4D8               	btfss	status,2,c
 13493   004CEE  EF7B  F026         	goto	u4761
 13494   004CF2  EF7D  F026         	goto	u4760
 13495   004CF6                     u4761:
 13496   004CF6  EF86  F026         	goto	l4027
 13497   004CFA                     u4760:
 13498   004CFA  5017               	movf	disk_read@count^0,w,c
 13499   004CFC  1018               	iorwf	(disk_read@count+1)^0,w,c
 13500   004CFE  A4D8               	btfss	status,2,c
 13501   004D00  EF84  F026         	goto	u4771
 13502   004D04  EF86  F026         	goto	u4770
 13503   004D08                     u4771:
 13504   004D08  EF89  F026         	goto	l170
 13505   004D0C                     u4770:
 13506   004D0C                     l4027:
 13507   004D0C  0E04               	movlw	4
 13508   004D0E  EF11  F027         	goto	l173
 13509   004D12                     l170:
 13510                           
 13511                           ;diskio.c: 384:  if (Stat & 0x01) return RES_NOTRDY;
 13512   004D12  0100               	movlb	0	; () banked
 13513   004D14  A1F7               	btfss	_Stat& (0+255),0,b
 13514   004D16  EF8F  F026         	goto	u4781
 13515   004D1A  EF91  F026         	goto	u4780
 13516   004D1E                     u4781:
 13517   004D1E  EF94  F026         	goto	l174
 13518   004D22                     u4780:
 13519   004D22                     
 13520                           ; BSR set to: 0
 13521   004D22  0E03               	movlw	3
 13522   004D24  EF11  F027         	goto	l173
 13523   004D28                     l174:
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;diskio.c: 386:  if (!(CardType & 0x08)) sector *= 512;
 13527   004D28  B7D6               	btfsc	_CardType& (0+255),3,b
 13528   004D2A  EF99  F026         	goto	u4791
 13529   004D2E  EF9B  F026         	goto	u4790
 13530   004D32                     u4791:
 13531   004D32  EFA4  F026         	goto	l175
 13532   004D36                     u4790:
 13533   004D36                     
 13534                           ; BSR set to: 0
 13535   004D36  0E09               	movlw	9
 13536   004D38                     u4805:
 13537   004D38  90D8               	bcf	status,0,c
 13538   004D3A  3613               	rlcf	disk_read@sector^0,f,c
 13539   004D3C  3614               	rlcf	(disk_read@sector+1)^0,f,c
 13540   004D3E  3615               	rlcf	(disk_read@sector+2)^0,f,c
 13541   004D40  3616               	rlcf	(disk_read@sector+3)^0,f,c
 13542   004D42  2EE8               	decfsz	wreg,f,c
 13543   004D44  EF9C  F026         	goto	u4805
 13544   004D48                     l175:
 13545                           
 13546                           ; BSR set to: 0
 13547                           ;diskio.c: 388:  cmd = count > 1 ? (18) : (17);
 13548   004D48  5018               	movf	(disk_read@count+1)^0,w,c
 13549   004D4A  E107               	bnz	u4811
 13550   004D4C  0E02               	movlw	2
 13551   004D4E  5C17               	subwf	disk_read@count^0,w,c
 13552   004D50  B0D8               	btfsc	status,0,c
 13553   004D52  EFAD  F026         	goto	u4811
 13554   004D56  EFAF  F026         	goto	u4810
 13555   004D5A                     u4811:
 13556   004D5A  EFB5  F026         	goto	l4039
 13557   004D5E                     u4810:
 13558   004D5E                     
 13559                           ; BSR set to: 0
 13560   004D5E  0E00               	movlw	0
 13561   004D60  6E1B               	movwf	(_disk_read$650+1)^0,c
 13562   004D62  0E11               	movlw	17
 13563   004D64  6E1A               	movwf	_disk_read$650^0,c
 13564   004D66  EFB9  F026         	goto	l4041
 13565   004D6A                     l4039:
 13566                           
 13567                           ; BSR set to: 0
 13568   004D6A  0E00               	movlw	0
 13569   004D6C  6E1B               	movwf	(_disk_read$650+1)^0,c
 13570   004D6E  0E12               	movlw	18
 13571   004D70  6E1A               	movwf	_disk_read$650^0,c
 13572   004D72                     l4041:
 13573                           
 13574                           ; BSR set to: 0
 13575   004D72  C01A  F01C         	movff	_disk_read$650,disk_read@cmd
 13576   004D76                     
 13577                           ; BSR set to: 0
 13578                           ;diskio.c: 389:  if (send_cmd(cmd, sector) == 0) {
 13579   004D76  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13580   004D7A  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13581   004D7E  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13582   004D82  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13583   004D86  501C               	movf	disk_read@cmd^0,w,c
 13584   004D88  ECFE  F02D         	call	_send_cmd
 13585   004D8C  0900               	iorlw	0
 13586   004D8E  A4D8               	btfss	status,2,c
 13587   004D90  EFCC  F026         	goto	u4821
 13588   004D94  EFCE  F026         	goto	u4820
 13589   004D98                     u4821:
 13590   004D98  EF04  F027         	goto	l4055
 13591   004D9C                     u4820:
 13592   004D9C                     l4045:
 13593                           
 13594                           ;diskio.c: 391:    if (!rcvr_datablock(buff, 512)) break;
 13595   004D9C  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13596   004DA0  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13597   004DA4  0E02               	movlw	2
 13598   004DA6  6E05               	movwf	(rcvr_datablock@btr+1)^0,c
 13599   004DA8  0E00               	movlw	0
 13600   004DAA  6E04               	movwf	rcvr_datablock@btr^0,c
 13601   004DAC  EC52  F02C         	call	_rcvr_datablock	;wreg free
 13602   004DB0  0900               	iorlw	0
 13603   004DB2  A4D8               	btfss	status,2,c
 13604   004DB4  EFDE  F026         	goto	u4831
 13605   004DB8  EFE0  F026         	goto	u4830
 13606   004DBC                     u4831:
 13607   004DBC  EFE2  F026         	goto	l4049
 13608   004DC0                     u4830:
 13609   004DC0  EFF0  F026         	goto	l4051
 13610   004DC4                     l4049:
 13611                           
 13612                           ;diskio.c: 392:    buff += 512;
 13613   004DC4  0E02               	movlw	2
 13614   004DC6  2612               	addwf	(disk_read@buff+1)^0,f,c
 13615                           
 13616                           ;diskio.c: 393:   } while (--count);
 13617   004DC8  0617               	decf	disk_read@count^0,f,c
 13618   004DCA  A0D8               	btfss	status,0,c
 13619   004DCC  0618               	decf	(disk_read@count+1)^0,f,c
 13620   004DCE  5017               	movf	disk_read@count^0,w,c
 13621   004DD0  1018               	iorwf	(disk_read@count+1)^0,w,c
 13622   004DD2  A4D8               	btfss	status,2,c
 13623   004DD4  EFEE  F026         	goto	u4841
 13624   004DD8  EFF0  F026         	goto	u4840
 13625   004DDC                     u4841:
 13626   004DDC  EFCE  F026         	goto	l4045
 13627   004DE0                     u4840:
 13628   004DE0                     l4051:
 13629                           
 13630                           ;diskio.c: 394:   if (cmd == (18)) send_cmd((12), 0);
 13631   004DE0  0E12               	movlw	18
 13632   004DE2  181C               	xorwf	disk_read@cmd^0,w,c
 13633   004DE4  A4D8               	btfss	status,2,c
 13634   004DE6  EFF7  F026         	goto	u4851
 13635   004DEA  EFF9  F026         	goto	u4850
 13636   004DEE                     u4851:
 13637   004DEE  EF04  F027         	goto	l4055
 13638   004DF2                     u4850:
 13639   004DF2  0E00               	movlw	0
 13640   004DF4  6E0B               	movwf	send_cmd@arg^0,c
 13641   004DF6  0E00               	movlw	0
 13642   004DF8  6E0C               	movwf	(send_cmd@arg+1)^0,c
 13643   004DFA  0E00               	movlw	0
 13644   004DFC  6E0D               	movwf	(send_cmd@arg+2)^0,c
 13645   004DFE  0E00               	movlw	0
 13646   004E00  6E0E               	movwf	(send_cmd@arg+3)^0,c
 13647   004E02  0E0C               	movlw	12
 13648   004E04  ECFE  F02D         	call	_send_cmd
 13649   004E08                     l4055:
 13650                           
 13651                           ;diskio.c: 396:  deselect();
 13652   004E08  EC02  F02F         	call	_deselect	;wreg free
 13653   004E0C                     
 13654                           ;diskio.c: 398:  return count ? RES_ERROR : RES_OK;
 13655   004E0C  5017               	movf	disk_read@count^0,w,c
 13656   004E0E  1018               	iorwf	(disk_read@count+1)^0,w,c
 13657   004E10  A4D8               	btfss	status,2,c
 13658   004E12  EF0D  F027         	goto	u4861
 13659   004E16  EF10  F027         	goto	u4860
 13660   004E1A                     u4861:
 13661   004E1A  0E01               	movlw	1
 13662   004E1C  EF11  F027         	goto	u4870
 13663   004E20                     u4860:
 13664   004E20  0E00               	movlw	0
 13665   004E22                     u4870:
 13666   004E22                     l173:
 13667   004E22  0012               	return		;funcret
 13668   004E24                     __end_of_disk_read:
 13669                           	callstack 0
 13670                           
 13671 ;; *************** function _send_cmd *****************
 13672 ;; Defined at:
 13673 ;;		line 234 in file "diskio.c"
 13674 ;; Parameters:    Size  Location     Type
 13675 ;;  cmd             1    wreg     unsigned char 
 13676 ;;  arg             4   10[COMRAM] unsigned long 
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;  cmd             1   14[COMRAM] unsigned char 
 13679 ;;  res             1   15[COMRAM] unsigned char 
 13680 ;; Return value:  Size  Location     Type
 13681 ;;                  1    wreg      unsigned char 
 13682 ;; Registers used:
 13683 ;;		wreg, status,2, status,0, cstack
 13684 ;; Tracked objects:
 13685 ;;		On entry : 0/0
 13686 ;;		On exit  : 0/0
 13687 ;;		Unchanged: 0/0
 13688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13689 ;;      Params:         4       0       0       0       0       0       0       0       0
 13690 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13691 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13692 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13693 ;;Total ram usage:        6 bytes
 13694 ;; Hardware stack levels used: 1
 13695 ;; Hardware stack levels required when called: 4
 13696 ;; This function calls:
 13697 ;;		___send_cmd
 13698 ;; This function is called by:
 13699 ;;		_disk_initialize
 13700 ;;		_disk_read
 13701 ;;		_disk_write
 13702 ;;		_disk_ioctl
 13703 ;; This function uses a non-reentrant model
 13704 ;;
 13705                           
 13706                           	psect	text41
 13707   005BFC                     __ptext41:
 13708                           	callstack 0
 13709   005BFC                     _send_cmd:
 13710                           	callstack 23
 13711                           
 13712                           ;incstack = 0
 13713                           ;send_cmd@cmd stored from wreg
 13714   005BFC  6E0F               	movwf	send_cmd@cmd^0,c
 13715   005BFE                     
 13716                           ;diskio.c: 235:  BYTE cmd,;diskio.c: 236:  DWORD arg;diskio.c: 238: {;diskio.c: 242:  BY
      +                          TE res;;diskio.c: 245:  if (cmd & 0x80) {
 13717   005BFE  AE0F               	btfss	send_cmd@cmd^0,7,c
 13718   005C00  EF04  F02E         	goto	u4541
 13719   005C04  EF06  F02E         	goto	u4540
 13720   005C08                     u4541:
 13721   005C08  EF1E  F02E         	goto	l3945
 13722   005C0C                     u4540:
 13723   005C0C                     
 13724                           ;diskio.c: 246:   cmd &= 0x7F;
 13725   005C0C  9E0F               	bcf	send_cmd@cmd^0,7,c
 13726   005C0E                     
 13727                           ;diskio.c: 248:   res = __send_cmd((55), 0);
 13728   005C0E  0E00               	movlw	0
 13729   005C10  6E04               	movwf	___send_cmd@arg^0,c
 13730   005C12  0E00               	movlw	0
 13731   005C14  6E05               	movwf	(___send_cmd@arg+1)^0,c
 13732   005C16  0E00               	movlw	0
 13733   005C18  6E06               	movwf	(___send_cmd@arg+2)^0,c
 13734   005C1A  0E00               	movlw	0
 13735   005C1C  6E07               	movwf	(___send_cmd@arg+3)^0,c
 13736   005C1E  0E37               	movlw	55
 13737   005C20  EC4A  F02B         	call	___send_cmd
 13738   005C24  6E10               	movwf	send_cmd@res^0,c
 13739   005C26                     
 13740                           ;diskio.c: 252:   if (res > 1) return res;
 13741   005C26  0E01               	movlw	1
 13742   005C28  6410               	cpfsgt	send_cmd@res^0,c
 13743   005C2A  EF19  F02E         	goto	u4551
 13744   005C2E  EF1B  F02E         	goto	u4550
 13745   005C32                     u4551:
 13746   005C32  EF1E  F02E         	goto	l3945
 13747   005C36                     u4550:
 13748   005C36  5010               	movf	send_cmd@res^0,w,c
 13749   005C38  EF29  F02E         	goto	l128
 13750   005C3C                     l3945:
 13751                           
 13752                           ;diskio.c: 256:  return __send_cmd(cmd, arg);
 13753   005C3C  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13754   005C40  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13755   005C44  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13756   005C48  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13757   005C4C  500F               	movf	send_cmd@cmd^0,w,c
 13758   005C4E  EC4A  F02B         	call	___send_cmd
 13759   005C52                     l128:
 13760   005C52  0012               	return		;funcret
 13761   005C54                     __end_of_send_cmd:
 13762                           	callstack 0
 13763                           
 13764 ;; *************** function ___send_cmd *****************
 13765 ;; Defined at:
 13766 ;;		line 197 in file "diskio.c"
 13767 ;; Parameters:    Size  Location     Type
 13768 ;;  cmd             1    wreg     unsigned char 
 13769 ;;  arg             4    3[COMRAM] unsigned long 
 13770 ;; Auto vars:     Size  Location     Type
 13771 ;;  cmd             1    9[COMRAM] unsigned char 
 13772 ;;  n               1    8[COMRAM] unsigned char 
 13773 ;;  res             1    7[COMRAM] unsigned char 
 13774 ;; Return value:  Size  Location     Type
 13775 ;;                  1    wreg      unsigned char 
 13776 ;; Registers used:
 13777 ;;		wreg, status,2, status,0, cstack
 13778 ;; Tracked objects:
 13779 ;;		On entry : 0/0
 13780 ;;		On exit  : 0/0
 13781 ;;		Unchanged: 0/0
 13782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13783 ;;      Params:         4       0       0       0       0       0       0       0       0
 13784 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13785 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13786 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13787 ;;Total ram usage:        7 bytes
 13788 ;; Hardware stack levels used: 1
 13789 ;; Hardware stack levels required when called: 3
 13790 ;; This function calls:
 13791 ;;		_SPI_Exchange
 13792 ;;		_SPI_Write
 13793 ;;		_deselect
 13794 ;;		_select
 13795 ;; This function is called by:
 13796 ;;		_send_cmd
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           	psect	text42
 13801   005694                     __ptext42:
 13802                           	callstack 0
 13803   005694                     ___send_cmd:
 13804                           	callstack 23
 13805                           
 13806                           ;incstack = 0
 13807                           ;___send_cmd@cmd stored from wreg
 13808   005694  6E0A               	movwf	___send_cmd@cmd^0,c
 13809   005696                     
 13810                           ;diskio.c: 198:  BYTE cmd,;diskio.c: 199:  DWORD arg;diskio.c: 201: {;diskio.c: 202:  BY
      +                          TE n, res;;diskio.c: 206:  if (cmd != (12)) {
 13811   005696  0E0C               	movlw	12
 13812   005698  180A               	xorwf	___send_cmd@cmd^0,w,c
 13813   00569A  B4D8               	btfsc	status,2,c
 13814   00569C  EF52  F02B         	goto	u4431
 13815   0056A0  EF54  F02B         	goto	u4430
 13816   0056A4                     u4431:
 13817   0056A4  EF63  F02B         	goto	l3865
 13818   0056A8                     u4430:
 13819   0056A8                     
 13820                           ;diskio.c: 207:   deselect();
 13821   0056A8  EC02  F02F         	call	_deselect	;wreg free
 13822   0056AC                     
 13823                           ;diskio.c: 208:   if (!select()) return 0xFF;
 13824   0056AC  EC9E  F02E         	call	_select	;wreg free
 13825   0056B0  0900               	iorlw	0
 13826   0056B2  A4D8               	btfss	status,2,c
 13827   0056B4  EF5E  F02B         	goto	u4441
 13828   0056B8  EF60  F02B         	goto	u4440
 13829   0056BC                     u4441:
 13830   0056BC  EF63  F02B         	goto	l3865
 13831   0056C0                     u4440:
 13832   0056C0  0EFF               	movlw	255
 13833   0056C2  EFAA  F02B         	goto	l116
 13834   0056C6                     l3865:
 13835                           
 13836                           ;diskio.c: 212:  SPI_Write(0x40 | cmd);
 13837   0056C6  500A               	movf	___send_cmd@cmd^0,w,c
 13838   0056C8  0940               	iorlw	64
 13839   0056CA  ECF6  F02E         	call	_SPI_Write
 13840   0056CE                     
 13841                           ;diskio.c: 213:  SPI_Write((BYTE)(arg >> 24));
 13842   0056CE  5007               	movf	(___send_cmd@arg+3)^0,w,c
 13843   0056D0  ECF6  F02E         	call	_SPI_Write
 13844   0056D4                     
 13845                           ;diskio.c: 214:  SPI_Write((BYTE)(arg >> 16));
 13846   0056D4  5006               	movf	(___send_cmd@arg+2)^0,w,c
 13847   0056D6  ECF6  F02E         	call	_SPI_Write
 13848   0056DA                     
 13849                           ;diskio.c: 215:  SPI_Write((BYTE)(arg >> 8));
 13850   0056DA  5005               	movf	(___send_cmd@arg+1)^0,w,c
 13851   0056DC  ECF6  F02E         	call	_SPI_Write
 13852   0056E0                     
 13853                           ;diskio.c: 216:  SPI_Write((BYTE)arg);
 13854   0056E0  5004               	movf	___send_cmd@arg^0,w,c
 13855   0056E2  ECF6  F02E         	call	_SPI_Write
 13856   0056E6                     
 13857                           ;diskio.c: 217:  n = 0x01;
 13858   0056E6  0E01               	movlw	1
 13859   0056E8  6E09               	movwf	___send_cmd@n^0,c
 13860   0056EA                     
 13861                           ;diskio.c: 218:  if (cmd == (0)) n = 0x95;
 13862   0056EA  500A               	movf	___send_cmd@cmd^0,w,c
 13863   0056EC  A4D8               	btfss	status,2,c
 13864   0056EE  EF7B  F02B         	goto	u4451
 13865   0056F2  EF7D  F02B         	goto	u4450
 13866   0056F6                     u4451:
 13867   0056F6  EF7F  F02B         	goto	l3881
 13868   0056FA                     u4450:
 13869   0056FA  0E95               	movlw	149
 13870   0056FC  6E09               	movwf	___send_cmd@n^0,c
 13871   0056FE                     l3881:
 13872                           
 13873                           ;diskio.c: 219:  if (cmd == (8)) n = 0x87;
 13874   0056FE  0E08               	movlw	8
 13875   005700  180A               	xorwf	___send_cmd@cmd^0,w,c
 13876   005702  A4D8               	btfss	status,2,c
 13877   005704  EF86  F02B         	goto	u4461
 13878   005708  EF88  F02B         	goto	u4460
 13879   00570C                     u4461:
 13880   00570C  EF8A  F02B         	goto	l3885
 13881   005710                     u4460:
 13882   005710  0E87               	movlw	135
 13883   005712  6E09               	movwf	___send_cmd@n^0,c
 13884   005714                     l3885:
 13885                           
 13886                           ;diskio.c: 220:  SPI_Write(n);
 13887   005714  5009               	movf	___send_cmd@n^0,w,c
 13888   005716  ECF6  F02E         	call	_SPI_Write
 13889   00571A                     
 13890                           ;diskio.c: 223:  if (cmd == (12)) SPI_Exchange(0xFF);
 13891   00571A  0E0C               	movlw	12
 13892   00571C  180A               	xorwf	___send_cmd@cmd^0,w,c
 13893   00571E  A4D8               	btfss	status,2,c
 13894   005720  EF94  F02B         	goto	u4471
 13895   005724  EF96  F02B         	goto	u4470
 13896   005728                     u4471:
 13897   005728  EF99  F02B         	goto	l3891
 13898   00572C                     u4470:
 13899   00572C  0EFF               	movlw	255
 13900   00572E  ECE9  F02E         	call	_SPI_Exchange
 13901   005732                     l3891:
 13902                           
 13903                           ;diskio.c: 224:  n = 10;
 13904   005732  0E0A               	movlw	10
 13905   005734  6E09               	movwf	___send_cmd@n^0,c
 13906   005736                     l3893:
 13907                           
 13908                           ;diskio.c: 226:   res = SPI_Exchange(0xFF);
 13909   005736  0EFF               	movlw	255
 13910   005738  ECE9  F02E         	call	_SPI_Exchange
 13911   00573C  6E08               	movwf	___send_cmd@res^0,c
 13912   00573E  AE08               	btfss	___send_cmd@res^0,7,c
 13913   005740  EFA4  F02B         	goto	u4481
 13914   005744  EFA6  F02B         	goto	u4480
 13915   005748                     u4481:
 13916   005748  EFA9  F02B         	goto	l3899
 13917   00574C                     u4480:
 13918   00574C  2E09               	decfsz	___send_cmd@n^0,f,c
 13919   00574E  EF9B  F02B         	goto	l3893
 13920   005752                     l3899:
 13921                           
 13922                           ;diskio.c: 229:  return res;
 13923   005752  5008               	movf	___send_cmd@res^0,w,c
 13924   005754                     l116:
 13925   005754  0012               	return		;funcret
 13926   005756                     __end_of___send_cmd:
 13927                           	callstack 0
 13928                           
 13929 ;; *************** function _select *****************
 13930 ;; Defined at:
 13931 ;;		line 108 in file "diskio.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;		None
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;		None
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      unsigned char 
 13938 ;; Registers used:
 13939 ;;		wreg, status,2, status,0, cstack
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13945 ;;      Params:         0       0       0       0       0       0       0       0       0
 13946 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13948 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13949 ;;Total ram usage:        0 bytes
 13950 ;; Hardware stack levels used: 1
 13951 ;; Hardware stack levels required when called: 2
 13952 ;; This function calls:
 13953 ;;		_SPI_Exchange
 13954 ;;		_deselect
 13955 ;;		_wait_ready
 13956 ;; This function is called by:
 13957 ;;		___send_cmd
 13958 ;;		_disk_ioctl
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           	psect	text43
 13963   005D3C                     __ptext43:
 13964                           	callstack 0
 13965   005D3C                     _select:
 13966                           	callstack 23
 13967   005D3C                     
 13968                           ;diskio.c: 110:  LATAbits.LA5 = 0;;
 13969   005D3C  9A89               	bcf	137,5,c	;volatile
 13970   005D3E                     
 13971                           ;diskio.c: 111:  SPI_Exchange(0xFF);
 13972   005D3E  0EFF               	movlw	255
 13973   005D40  ECE9  F02E         	call	_SPI_Exchange
 13974   005D44                     
 13975                           ;diskio.c: 112:  if (wait_ready()) return 1;
 13976   005D44  ECCF  F02D         	call	_wait_ready	;wreg free
 13977   005D48  0900               	iorlw	0
 13978   005D4A  B4D8               	btfsc	status,2,c
 13979   005D4C  EFAA  F02E         	goto	u4421
 13980   005D50  EFAC  F02E         	goto	u4420
 13981   005D54                     u4421:
 13982   005D54  EFAF  F02E         	goto	l3849
 13983   005D58                     u4420:
 13984   005D58  0E01               	movlw	1
 13985   005D5A  EFB2  F02E         	goto	l93
 13986   005D5E                     l3849:
 13987                           
 13988                           ;diskio.c: 114:  deselect();
 13989   005D5E  EC02  F02F         	call	_deselect	;wreg free
 13990   005D62                     
 13991                           ;diskio.c: 115:  return 0;
 13992   005D62  0E00               	movlw	0
 13993   005D64                     l93:
 13994   005D64  0012               	return		;funcret
 13995   005D66                     __end_of_select:
 13996                           	callstack 0
 13997                           
 13998 ;; *************** function _wait_ready *****************
 13999 ;; Defined at:
 14000 ;;		line 75 in file "diskio.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;		None
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;  tmr             2    1[COMRAM] unsigned short 
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  1    wreg      unsigned char 
 14007 ;; Registers used:
 14008 ;;		wreg, status,2, status,0, cstack
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14014 ;;      Params:         0       0       0       0       0       0       0       0       0
 14015 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14017 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14018 ;;Total ram usage:        2 bytes
 14019 ;; Hardware stack levels used: 1
 14020 ;; Hardware stack levels required when called: 1
 14021 ;; This function calls:
 14022 ;;		_SPI_Exchange
 14023 ;; This function is called by:
 14024 ;;		_select
 14025 ;;		_xmit_datablock
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           	psect	text44
 14030   005B9E                     __ptext44:
 14031                           	callstack 0
 14032   005B9E                     _wait_ready:
 14033                           	callstack 25
 14034   005B9E                     
 14035                           ;diskio.c: 77:  UINT tmr;;diskio.c: 80:  for (tmr = 5000; tmr; tmr--) {
 14036   005B9E  0E13               	movlw	19
 14037   005BA0  6E03               	movwf	(wait_ready@tmr+1)^0,c
 14038   005BA2  0E88               	movlw	136
 14039   005BA4  6E02               	movwf	wait_ready@tmr^0,c
 14040   005BA6  EFE9  F02D         	goto	l82
 14041   005BAA                     l3821:
 14042                           
 14043                           ;diskio.c: 81:   if (SPI_Exchange(0xFF) == 0xFF) break;
 14044   005BAA  0EFF               	movlw	255
 14045   005BAC  ECE9  F02E         	call	_SPI_Exchange
 14046   005BB0  0AFF               	xorlw	255
 14047   005BB2  A4D8               	btfss	status,2,c
 14048   005BB4  EFDE  F02D         	goto	u4371
 14049   005BB8  EFE0  F02D         	goto	u4370
 14050   005BBC                     u4371:
 14051   005BBC  EFE2  F02D         	goto	l3825
 14052   005BC0                     u4370:
 14053   005BC0  EFF2  F02D         	goto	l3829
 14054   005BC4                     l3825:
 14055                           
 14056                           ;diskio.c: 82:   _delay((unsigned long)((100)*(20000000UL/4000000.0)));
 14057   005BC4  0EA6               	movlw	166
 14058   005BC6                     u8707:
 14059   005BC6  2EE8               	decfsz	wreg,f,c
 14060   005BC8  D7FE               	bra	u8707
 14061   005BCA  D000               	nop2	
 14062   005BCC                     
 14063                           ;diskio.c: 83:  }
 14064   005BCC  0602               	decf	wait_ready@tmr^0,f,c
 14065   005BCE  A0D8               	btfss	status,0,c
 14066   005BD0  0603               	decf	(wait_ready@tmr+1)^0,f,c
 14067   005BD2                     l82:
 14068   005BD2  5002               	movf	wait_ready@tmr^0,w,c
 14069   005BD4  1003               	iorwf	(wait_ready@tmr+1)^0,w,c
 14070   005BD6  A4D8               	btfss	status,2,c
 14071   005BD8  EFF0  F02D         	goto	u4381
 14072   005BDC  EFF2  F02D         	goto	u4380
 14073   005BE0                     u4381:
 14074   005BE0  EFD5  F02D         	goto	l3821
 14075   005BE4                     u4380:
 14076   005BE4                     l3829:
 14077                           
 14078                           ;diskio.c: 85:  return tmr ? 1 : 0;
 14079   005BE4  5002               	movf	wait_ready@tmr^0,w,c
 14080   005BE6  1003               	iorwf	(wait_ready@tmr+1)^0,w,c
 14081   005BE8  A4D8               	btfss	status,2,c
 14082   005BEA  EFF9  F02D         	goto	u4391
 14083   005BEE  EFFC  F02D         	goto	u4390
 14084   005BF2                     u4391:
 14085   005BF2  0E01               	movlw	1
 14086   005BF4  EFFD  F02D         	goto	u4400
 14087   005BF8                     u4390:
 14088   005BF8  0E00               	movlw	0
 14089   005BFA                     u4400:
 14090   005BFA  0012               	return		;funcret
 14091   005BFC                     __end_of_wait_ready:
 14092                           	callstack 0
 14093                           
 14094 ;; *************** function _deselect *****************
 14095 ;; Defined at:
 14096 ;;		line 95 in file "diskio.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;		None
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;		None
 14101 ;; Return value:  Size  Location     Type
 14102 ;;                  1    wreg      void 
 14103 ;; Registers used:
 14104 ;;		wreg, status,2, cstack
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 0/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14110 ;;      Params:         0       0       0       0       0       0       0       0       0
 14111 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14112 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14113 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14114 ;;Total ram usage:        0 bytes
 14115 ;; Hardware stack levels used: 1
 14116 ;; Hardware stack levels required when called: 1
 14117 ;; This function calls:
 14118 ;;		_SPI_Exchange
 14119 ;; This function is called by:
 14120 ;;		_select
 14121 ;;		___send_cmd
 14122 ;;		_disk_initialize
 14123 ;;		_disk_read
 14124 ;;		_disk_write
 14125 ;;		_disk_ioctl
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           	psect	text45
 14130   005E04                     __ptext45:
 14131                           	callstack 0
 14132   005E04                     _deselect:
 14133                           	callstack 23
 14134   005E04                     
 14135                           ;diskio.c: 97:  LATAbits.LA5 = 1;;
 14136   005E04  8A89               	bsf	137,5,c	;volatile
 14137   005E06                     
 14138                           ;diskio.c: 98:  SPI_Exchange(0xFF);
 14139   005E06  0EFF               	movlw	255
 14140   005E08  ECE9  F02E         	call	_SPI_Exchange
 14141   005E0C  0012               	return		;funcret
 14142   005E0E                     __end_of_deselect:
 14143                           	callstack 0
 14144                           
 14145 ;; *************** function _SPI_Write *****************
 14146 ;; Defined at:
 14147 ;;		line 48 in file "SPI_libreria.c"
 14148 ;; Parameters:    Size  Location     Type
 14149 ;;  x               1    wreg     unsigned char 
 14150 ;; Auto vars:     Size  Location     Type
 14151 ;;  x               1    0[COMRAM] unsigned char 
 14152 ;; Return value:  Size  Location     Type
 14153 ;;                  1    wreg      void 
 14154 ;; Registers used:
 14155 ;;		wreg
 14156 ;; Tracked objects:
 14157 ;;		On entry : 0/0
 14158 ;;		On exit  : 0/0
 14159 ;;		Unchanged: 0/0
 14160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14161 ;;      Params:         0       0       0       0       0       0       0       0       0
 14162 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14163 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14164 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14165 ;;Total ram usage:        1 bytes
 14166 ;; Hardware stack levels used: 1
 14167 ;; This function calls:
 14168 ;;		Nothing
 14169 ;; This function is called by:
 14170 ;;		_xmit_datablock
 14171 ;;		___send_cmd
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           	psect	text46
 14176   005DEC                     __ptext46:
 14177                           	callstack 0
 14178   005DEC                     _SPI_Write:
 14179                           	callstack 26
 14180                           
 14181                           ;incstack = 0
 14182                           ;SPI_Write@x stored from wreg
 14183   005DEC  6E01               	movwf	SPI_Write@x^0,c
 14184   005DEE                     
 14185                           ;SPI_libreria.c: 49:     SSPBUF=x;
 14186   005DEE  C001  FFC9         	movff	SPI_Write@x,4041	;volatile
 14187   005DF2                     l50:
 14188   005DF2  A69E               	btfss	158,3,c	;volatile
 14189   005DF4  EFFE  F02E         	goto	u4411
 14190   005DF8  EF00  F02F         	goto	u4410
 14191   005DFC                     u4411:
 14192   005DFC  EFF9  F02E         	goto	l50
 14193   005E00                     u4410:
 14194   005E00                     
 14195                           ;SPI_libreria.c: 51:     PIR1bits.SSPIF=0;
 14196   005E00  969E               	bcf	158,3,c	;volatile
 14197   005E02  0012               	return		;funcret
 14198   005E04                     __end_of_SPI_Write:
 14199                           	callstack 0
 14200                           
 14201 ;; *************** function _rcvr_datablock *****************
 14202 ;; Defined at:
 14203 ;;		line 125 in file "diskio.c"
 14204 ;; Parameters:    Size  Location     Type
 14205 ;;  buff            2    1[COMRAM] PTR unsigned char 
 14206 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 14207 ;;  btr             2    3[COMRAM] unsigned short 
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;  tmr             2    5[COMRAM] unsigned short 
 14210 ;;  token           1    7[COMRAM] unsigned char 
 14211 ;; Return value:  Size  Location     Type
 14212 ;;                  1    wreg      unsigned char 
 14213 ;; Registers used:
 14214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14220 ;;      Params:         4       0       0       0       0       0       0       0       0
 14221 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14222 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14223 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14224 ;;Total ram usage:        7 bytes
 14225 ;; Hardware stack levels used: 1
 14226 ;; Hardware stack levels required when called: 1
 14227 ;; This function calls:
 14228 ;;		_SPI_Exchange
 14229 ;; This function is called by:
 14230 ;;		_disk_read
 14231 ;;		_disk_ioctl
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235                           	psect	text47
 14236   0058A4                     __ptext47:
 14237                           	callstack 0
 14238   0058A4                     _rcvr_datablock:
 14239                           	callstack 26
 14240   0058A4                     
 14241                           ;diskio.c: 126:  BYTE *buff,;diskio.c: 127:  UINT btr;diskio.c: 129: {;diskio.c: 130:  B
      +                          YTE token;;diskio.c: 131:  UINT tmr;;diskio.c: 134:  for (tmr = 2000; tmr; tmr--) {
 14242   0058A4  0E07               	movlw	7
 14243   0058A6  6E07               	movwf	(rcvr_datablock@tmr+1)^0,c
 14244   0058A8  0ED0               	movlw	208
 14245   0058AA  6E06               	movwf	rcvr_datablock@tmr^0,c
 14246   0058AC  EF6D  F02C         	goto	l96
 14247   0058B0                     l3951:
 14248                           
 14249                           ;diskio.c: 135:   token = SPI_Exchange(0xFF);
 14250   0058B0  0EFF               	movlw	255
 14251   0058B2  ECE9  F02E         	call	_SPI_Exchange
 14252   0058B6  6E08               	movwf	rcvr_datablock@token^0,c
 14253   0058B8                     
 14254                           ;diskio.c: 136:   if (token != 0xFF) break;
 14255   0058B8  2808               	incf	rcvr_datablock@token^0,w,c
 14256   0058BA  B4D8               	btfsc	status,2,c
 14257   0058BC  EF62  F02C         	goto	u4561
 14258   0058C0  EF64  F02C         	goto	u4560
 14259   0058C4                     u4561:
 14260   0058C4  EF66  F02C         	goto	l3957
 14261   0058C8                     u4560:
 14262   0058C8  EF76  F02C         	goto	l3961
 14263   0058CC                     l3957:
 14264                           
 14265                           ;diskio.c: 137:   _delay((unsigned long)((100)*(20000000UL/4000000.0)));
 14266   0058CC  0EA6               	movlw	166
 14267   0058CE                     u8717:
 14268   0058CE  2EE8               	decfsz	wreg,f,c
 14269   0058D0  D7FE               	bra	u8717
 14270   0058D2  D000               	nop2	
 14271   0058D4                     
 14272                           ;diskio.c: 138:  }
 14273   0058D4  0606               	decf	rcvr_datablock@tmr^0,f,c
 14274   0058D6  A0D8               	btfss	status,0,c
 14275   0058D8  0607               	decf	(rcvr_datablock@tmr+1)^0,f,c
 14276   0058DA                     l96:
 14277   0058DA  5006               	movf	rcvr_datablock@tmr^0,w,c
 14278   0058DC  1007               	iorwf	(rcvr_datablock@tmr+1)^0,w,c
 14279   0058DE  A4D8               	btfss	status,2,c
 14280   0058E0  EF74  F02C         	goto	u4571
 14281   0058E4  EF76  F02C         	goto	u4570
 14282   0058E8                     u4571:
 14283   0058E8  EF58  F02C         	goto	l3951
 14284   0058EC                     u4570:
 14285   0058EC                     l3961:
 14286                           
 14287                           ;diskio.c: 139:  if (token != 0xFE) return 0;
 14288   0058EC  0EFE               	movlw	254
 14289   0058EE  1808               	xorwf	rcvr_datablock@token^0,w,c
 14290   0058F0  B4D8               	btfsc	status,2,c
 14291   0058F2  EF7D  F02C         	goto	u4581
 14292   0058F6  EF7F  F02C         	goto	u4580
 14293   0058FA                     u4581:
 14294   0058FA  EF82  F02C         	goto	l3967
 14295   0058FE                     u4580:
 14296   0058FE  0E00               	movlw	0
 14297   005900  EF9F  F02C         	goto	l101
 14298   005904                     l3967:
 14299                           
 14300                           ;diskio.c: 142:   *buff++ = SPI_Exchange(0xFF);
 14301   005904  0EFF               	movlw	255
 14302   005906  ECE9  F02E         	call	_SPI_Exchange
 14303   00590A  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 14304   00590E  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 14305   005912  6EDF               	movwf	indf2,c
 14306   005914  4A02               	infsnz	rcvr_datablock@buff^0,f,c
 14307   005916  2A03               	incf	(rcvr_datablock@buff+1)^0,f,c
 14308   005918  0604               	decf	rcvr_datablock@btr^0,f,c
 14309   00591A  A0D8               	btfss	status,0,c
 14310   00591C  0605               	decf	(rcvr_datablock@btr+1)^0,f,c
 14311   00591E  5004               	movf	rcvr_datablock@btr^0,w,c
 14312   005920  1005               	iorwf	(rcvr_datablock@btr+1)^0,w,c
 14313   005922  A4D8               	btfss	status,2,c
 14314   005924  EF96  F02C         	goto	u4591
 14315   005928  EF98  F02C         	goto	u4590
 14316   00592C                     u4591:
 14317   00592C  EF82  F02C         	goto	l3967
 14318   005930                     u4590:
 14319   005930                     
 14320                           ;diskio.c: 144:  SPI_Exchange(0xFF);
 14321   005930  0EFF               	movlw	255
 14322   005932  ECE9  F02E         	call	_SPI_Exchange
 14323                           
 14324                           ;diskio.c: 145:  SPI_Exchange(0xFF);
 14325   005936  0EFF               	movlw	255
 14326   005938  ECE9  F02E         	call	_SPI_Exchange
 14327   00593C                     
 14328                           ;diskio.c: 147:  return 1;
 14329   00593C  0E01               	movlw	1
 14330   00593E                     l101:
 14331   00593E  0012               	return		;funcret
 14332   005940                     __end_of_rcvr_datablock:
 14333                           	callstack 0
 14334                           
 14335 ;; *************** function _SPI_Exchange *****************
 14336 ;; Defined at:
 14337 ;;		line 61 in file "SPI_libreria.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  data            1    wreg     unsigned char 
 14340 ;; Auto vars:     Size  Location     Type
 14341 ;;  data            1    0[COMRAM] unsigned char 
 14342 ;; Return value:  Size  Location     Type
 14343 ;;                  1    wreg      unsigned char 
 14344 ;; Registers used:
 14345 ;;		wreg, status,2
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14351 ;;      Params:         0       0       0       0       0       0       0       0       0
 14352 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14353 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14354 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14355 ;;Total ram usage:        1 bytes
 14356 ;; Hardware stack levels used: 1
 14357 ;; This function calls:
 14358 ;;		Nothing
 14359 ;; This function is called by:
 14360 ;;		_wait_ready
 14361 ;;		_deselect
 14362 ;;		_select
 14363 ;;		_rcvr_datablock
 14364 ;;		_xmit_datablock
 14365 ;;		___send_cmd
 14366 ;;		_disk_initialize
 14367 ;;		_disk_ioctl
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           	psect	text48
 14372   005DD2                     __ptext48:
 14373                           	callstack 0
 14374   005DD2                     _SPI_Exchange:
 14375                           	callstack 25
 14376                           
 14377                           ;incstack = 0
 14378                           ;SPI_Exchange@data stored from wreg
 14379   005DD2  6E01               	movwf	SPI_Exchange@data^0,c
 14380   005DD4                     
 14381                           ;SPI_libreria.c: 62:     SSPBUF = data;
 14382   005DD4  C001  FFC9         	movff	SPI_Exchange@data,4041	;volatile
 14383   005DD8                     l62:
 14384   005DD8  A69E               	btfss	158,3,c	;volatile
 14385   005DDA  EFF1  F02E         	goto	u4361
 14386   005DDE  EFF3  F02E         	goto	u4360
 14387   005DE2                     u4361:
 14388   005DE2  EFEC  F02E         	goto	l62
 14389   005DE6                     u4360:
 14390   005DE6                     
 14391                           ;SPI_libreria.c: 64:     PIR1bits.SSPIF=0;
 14392   005DE6  969E               	bcf	158,3,c	;volatile
 14393                           
 14394                           ;SPI_libreria.c: 65:     return SSPBUF;
 14395   005DE8  50C9               	movf	201,w,c	;volatile
 14396   005DEA  0012               	return		;funcret
 14397   005DEC                     __end_of_SPI_Exchange:
 14398                           	callstack 0
 14399                           
 14400                           	psect	rparam
 14401   000000                     
 14402                           	psect	idloc
 14403                           
 14404                           ;Config register IDLOC0 @ 0x200000
 14405                           ;	unspecified, using default values
 14406   200000                     	org	2097152
 14407   200000  FF                 	db	255
 14408                           
 14409                           ;Config register IDLOC1 @ 0x200001
 14410                           ;	unspecified, using default values
 14411   200001                     	org	2097153
 14412   200001  FF                 	db	255
 14413                           
 14414                           ;Config register IDLOC2 @ 0x200002
 14415                           ;	unspecified, using default values
 14416   200002                     	org	2097154
 14417   200002  FF                 	db	255
 14418                           
 14419                           ;Config register IDLOC3 @ 0x200003
 14420                           ;	unspecified, using default values
 14421   200003                     	org	2097155
 14422   200003  FF                 	db	255
 14423                           
 14424                           ;Config register IDLOC4 @ 0x200004
 14425                           ;	unspecified, using default values
 14426   200004                     	org	2097156
 14427   200004  FF                 	db	255
 14428                           
 14429                           ;Config register IDLOC5 @ 0x200005
 14430                           ;	unspecified, using default values
 14431   200005                     	org	2097157
 14432   200005  FF                 	db	255
 14433                           
 14434                           ;Config register IDLOC6 @ 0x200006
 14435                           ;	unspecified, using default values
 14436   200006                     	org	2097158
 14437   200006  FF                 	db	255
 14438                           
 14439                           ;Config register IDLOC7 @ 0x200007
 14440                           ;	unspecified, using default values
 14441   200007                     	org	2097159
 14442   200007  FF                 	db	255
 14443                           
 14444                           	psect	config
 14445                           
 14446                           ;Config register CONFIG1L @ 0x300000
 14447                           ;	PLL Prescaler Selection bits
 14448                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
 14449                           ;	System Clock Postscaler Selection bits
 14450                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 14451                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 14452                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 14453   300000                     	org	3145728
 14454   300000  00                 	db	0
 14455                           
 14456                           ;Config register CONFIG1H @ 0x300001
 14457                           ;	Oscillator Selection bits
 14458                           ;	FOSC = HS, HS oscillator (HS)
 14459                           ;	Fail-Safe Clock Monitor Enable bit
 14460                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 14461                           ;	Internal/External Oscillator Switchover bit
 14462                           ;	IESO = OFF, Oscillator Switchover mode disabled
 14463   300001                     	org	3145729
 14464   300001  0C                 	db	12
 14465                           
 14466                           ;Config register CONFIG2L @ 0x300002
 14467                           ;	Power-up Timer Enable bit
 14468                           ;	PWRT = ON, PWRT enabled
 14469                           ;	Brown-out Reset Enable bits
 14470                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 14471                           ;	Brown-out Reset Voltage bits
 14472                           ;	BORV = 3, Minimum setting 2.05V
 14473                           ;	USB Voltage Regulator Enable bit
 14474                           ;	VREGEN = OFF, USB voltage regulator disabled
 14475   300002                     	org	3145730
 14476   300002  18                 	db	24
 14477                           
 14478                           ;Config register CONFIG2H @ 0x300003
 14479                           ;	Watchdog Timer Enable bit
 14480                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 14481                           ;	Watchdog Timer Postscale Select bits
 14482                           ;	WDTPS = 32768, 1:32768
 14483   300003                     	org	3145731
 14484   300003  1E                 	db	30
 14485                           
 14486                           ; Padding undefined space
 14487   300004                     	org	3145732
 14488   300004  FF                 	db	255
 14489                           
 14490                           ;Config register CONFIG3H @ 0x300005
 14491                           ;	CCP2 MUX bit
 14492                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 14493                           ;	PORTB A/D Enable bit
 14494                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 14495                           ;	Low-Power Timer 1 Oscillator Enable bit
 14496                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 14497                           ;	MCLR Pin Enable bit
 14498                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 14499   300005                     	org	3145733
 14500   300005  81                 	db	129
 14501                           
 14502                           ;Config register CONFIG4L @ 0x300006
 14503                           ;	Stack Full/Underflow Reset Enable bit
 14504                           ;	STVREN = ON, Stack full/underflow will cause Reset
 14505                           ;	Single-Supply ICSP Enable bit
 14506                           ;	LVP = ON, Single-Supply ICSP enabled
 14507                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 14508                           ;	ICPRT = OFF, ICPORT disabled
 14509                           ;	Extended Instruction Set Enable bit
 14510                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 14511                           ;	Background Debugger Enable bit
 14512                           ;	DEBUG = 0x1, unprogrammed default
 14513   300006                     	org	3145734
 14514   300006  85                 	db	133
 14515                           
 14516                           ; Padding undefined space
 14517   300007                     	org	3145735
 14518   300007  FF                 	db	255
 14519                           
 14520                           ;Config register CONFIG5L @ 0x300008
 14521                           ;	Code Protection bit
 14522                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 14523                           ;	Code Protection bit
 14524                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 14525                           ;	Code Protection bit
 14526                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 14527                           ;	Code Protection bit
 14528                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 14529   300008                     	org	3145736
 14530   300008  0F                 	db	15
 14531                           
 14532                           ;Config register CONFIG5H @ 0x300009
 14533                           ;	Boot Block Code Protection bit
 14534                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 14535                           ;	Data EEPROM Code Protection bit
 14536                           ;	CPD = OFF, Data EEPROM is not code-protected
 14537   300009                     	org	3145737
 14538   300009  C0                 	db	192
 14539                           
 14540                           ;Config register CONFIG6L @ 0x30000A
 14541                           ;	Write Protection bit
 14542                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 14543                           ;	Write Protection bit
 14544                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 14545                           ;	Write Protection bit
 14546                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 14547                           ;	Write Protection bit
 14548                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 14549   30000A                     	org	3145738
 14550   30000A  0F                 	db	15
 14551                           
 14552                           ;Config register CONFIG6H @ 0x30000B
 14553                           ;	Configuration Register Write Protection bit
 14554                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 14555                           ;	Boot Block Write Protection bit
 14556                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 14557                           ;	Data EEPROM Write Protection bit
 14558                           ;	WRTD = OFF, Data EEPROM is not write-protected
 14559   30000B                     	org	3145739
 14560   30000B  E0                 	db	224
 14561                           
 14562                           ;Config register CONFIG7L @ 0x30000C
 14563                           ;	Table Read Protection bit
 14564                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14565                           ;	Table Read Protection bit
 14566                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14567                           ;	Table Read Protection bit
 14568                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14569                           ;	Table Read Protection bit
 14570                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 14571   30000C                     	org	3145740
 14572   30000C  0F                 	db	15
 14573                           
 14574                           ;Config register CONFIG7H @ 0x30000D
 14575                           ;	Boot Block Table Read Protection bit
 14576                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 14577   30000D                     	org	3145741
 14578   30000D  40                 	db	64
 14579                           tosu	equ	0xFFF
 14580                           tosh	equ	0xFFE
 14581                           tosl	equ	0xFFD
 14582                           stkptr	equ	0xFFC
 14583                           pclatu	equ	0xFFB
 14584                           pclath	equ	0xFFA
 14585                           pcl	equ	0xFF9
 14586                           tblptru	equ	0xFF8
 14587                           tblptrh	equ	0xFF7
 14588                           tblptrl	equ	0xFF6
 14589                           tablat	equ	0xFF5
 14590                           prodh	equ	0xFF4
 14591                           prodl	equ	0xFF3
 14592                           indf0	equ	0xFEF
 14593                           postinc0	equ	0xFEE
 14594                           postdec0	equ	0xFED
 14595                           preinc0	equ	0xFEC
 14596                           plusw0	equ	0xFEB
 14597                           fsr0h	equ	0xFEA
 14598                           fsr0l	equ	0xFE9
 14599                           wreg	equ	0xFE8
 14600                           indf1	equ	0xFE7
 14601                           postinc1	equ	0xFE6
 14602                           postdec1	equ	0xFE5
 14603                           preinc1	equ	0xFE4
 14604                           plusw1	equ	0xFE3
 14605                           fsr1h	equ	0xFE2
 14606                           fsr1l	equ	0xFE1
 14607                           bsr	equ	0xFE0
 14608                           indf2	equ	0xFDF
 14609                           postinc2	equ	0xFDE
 14610                           postdec2	equ	0xFDD
 14611                           preinc2	equ	0xFDC
 14612                           plusw2	equ	0xFDB
 14613                           fsr2h	equ	0xFDA
 14614                           fsr2l	equ	0xFD9
 14615                           status	equ	0xFD8

Data Sizes:
    Strings     49
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> main@bx(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 25
		 -> STR_3(CODE[25]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_3(CODE[25]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    FatFs@ff$F740	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S717$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S717$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S717$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_3(CODE[25]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_3(CODE[25]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_3(CODE[25]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_3(CODE[25]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S43$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S43$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_put_fat
    _follow_path->_dir_sdi
    _dir_find->_dir_sdi
    _create_name->_mem_set
    _dir_alloc->_dir_sdi
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI_Exchange
    _deselect->_SPI_Exchange
    _rcvr_datablock->_SPI_Exchange

Critical Paths under _main in BANK0

    _main->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  384946
                                            112 BANK0      2     2      0
                    _SPI_Init_Master
                            _f_close
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             36    28      8   55184
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              54    49      5  267551
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6   27686
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          8     4      4  100028
                                             39 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             6     4      2   79845
                                             33 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (3) _create_name                                         21    17      4    2632
                                              8 COMRAM    21    17      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     1      2   93876
                                             43 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                           10     6      4   79513
                                             33 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             21    17      4   16291
                                             84 COMRAM    11     7      4
                                              0 BANK0     10    10      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            20    16      4   51038
                                             13 BANK0     20    16      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6   28827
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10   13586
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             26    20      6   13545
                                             58 COMRAM    26    20      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             12     7      5   32566
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         71    66      5   31454
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    2708
                                             16 COMRAM    13    13      0
                       _SPI_Exchange
                    _SPI_Init_Master
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI_Init_Master                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6   12198
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2   29619
                                             71 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2   28868
                                             66 COMRAM     5     3      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2   15680
                                             55 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          39    36      3    5292
                                             16 COMRAM    39    36      3
                       _SPI_Exchange
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6   11740
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    4852
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    4016
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       6     3      3     681
                                              3 COMRAM     6     3      3
                       _SPI_Exchange
                          _SPI_Write
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    4080
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4    2177
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     621
                                              3 COMRAM     7     3      4
                       _SPI_Exchange
                          _SPI_Write
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     112
                       _SPI_Exchange
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                       _SPI_Exchange
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      22
                       _SPI_Exchange
 ---------------------------------------------------------------------------------
 (5) _SPI_Write                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                       _SPI_Exchange
 ---------------------------------------------------------------------------------
 (6) _SPI_Exchange                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_Init_Master
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI_Exchange
           _rcvr_datablock
             _SPI_Exchange
           _send_cmd
             ___send_cmd
               _SPI_Exchange
               _SPI_Write
               _deselect
               _select
                 _SPI_Exchange
                 _deselect
                 _wait_ready
                   _SPI_Exchange
         _sync_window
           _disk_write
             _deselect
             _send_cmd
             _xmit_datablock
               _SPI_Exchange
               _SPI_Write
               _wait_ready
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI_Exchange
           ___wmul
           _deselect
           _rcvr_datablock
           _select
           _send_cmd
         _disk_write
         _mem_set
         _sync_window
       _validate
         _disk_status
     _validate
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
       _disk_initialize
         _SPI_Exchange
         _SPI_Init_Master
         _deselect
         _send_cmd
       _disk_status
       _get_ldnumber
       _move_window
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
             _put_fat
               _move_window
           _get_fat
           _mem_set
           _sync_window
         _dir_sdi
           _clust2sect
           _get_fat
         _move_window
       _mem_cpy
       _mem_set
       _move_window
     _find_volume
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
         _dir_sdi
         _mem_cmp
         _move_window
       _dir_sdi
       _ld_clust
     _ld_clust
     _move_window
     _remove_chain
       _get_fat
       _put_fat
     _st_clust
   _f_write
     _clust2sect
     _create_chain
     _disk_write
     _mem_cpy
     _move_window
     _sync_window
     _validate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      28       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBIGSFRhhhh       36      0       0      20        0.0%
BITBIGSFRlll        29      0       0      26        0.0%
BITBIGSFRhlh        21      0       0      23        0.0%
BITBIGSFRllh         8      0       0      25        0.0%
BITBIGSFRhll         8      0       0      24        0.0%
BITBIGSFRhhhl        1      0       0      21        0.0%
BITBIGSFRhhl         1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7      27        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Aug 11 09:58:57 2023

            get_fat@clst 003D             create_name@b 0013             create_name@c 001D  
           create_name@d 0018             create_name@i 001B             create_name@p 0016  
            _SSPSTATbits 0FC7         get_ldnumber@path 0001                       l23 59CC  
                     l50 5DF2                       l52 5E00                       l53 5E02  
                     l62 5DD8                       l47 5D8C                       l64 5DE6  
                     l65 5DEA                       l82 5BD2                       l93 5D64  
                     l86 5BFA                       l96 58DA                       l89 5E0C  
            disk_ioctl@n 0035      ___wmul@multiplicand 0003           ??_dir_register 0060  
       disk_write@sector 0013            create_name@dp 0009            create_name@ni 0014  
          create_name@si 0011           create_chain@cs 0069           create_chain@fs 0056  
                    l101 593E                      l107 57FE                      l131 3F1E  
                    l116 5754                      l300 5692                      l132 41DA  
                    l206 2262                      l142 4042                      l310 55CE  
                    l303 43BE                      l128 5C52                      l216 1E7E  
                    l153 41BA                      l313 3096                      l170 4D12  
                    l306 43C0                      l410 3DE2                      l155 411C  
                    l331 342E                      l156 4168                      l148 40B6  
                    l316 341E                      l173 4E22                      l405 3F04  
                    l174 4D28                      l190 48C8                      l318 30A2  
                    l175 4D48                      l191 4760                      l167 5DD0  
                    l423 272E                      l263 5440                      l192 4774  
                    l600 0DDC                      l193 4794                      l530 44EC  
                    l187 474A                      l339 277C                      l371 471E  
                    l363 46F2                      l460 5D3A                      l356 2BD2  
                    l380 3BB8                      l452 4CE4                      l276 5ACC  
                    l532 44D6                      l197 4820                      l269 5D10  
                    l453 4CE6                      l285 5B9C                      l517 37BC  
                    l277 5AD4                      l294 4A4E                      l622 5508  
                    l382 393E                      l608 11B2                      l464 4F5A  
                    l457 5A5A                      l722 5C9C                      l626 536E  
                    l378 394E                      l474 528C                      l642 2D14  
                    l555 5086                      l395 3BA8                      l491 37FA  
                    l539 4570                      l651 2ECA                      l643 2D02  
                    l635 303C                      l804 58A2                      l717 4BAA  
                    l581 0A5C                      l397 3BA0                      l493 35A4  
                    l566 13CC                      l559 51A2                      l649 2EF6  
                    l770 5DB2                      l594 0C00                      l684 1C5E  
                    l781 5B2E                      l782 5B3E                      l797 5892  
                    _Fil 00D7             disk_read@cmd 001C           ??_create_chain 005C  
                    wreg 0FE8         SPI_Exchange@data 0001        disk_initialize@ty 001A  
         create_name@sfn 0019          create_chain@ncl 0065          create_chain@scl 0061  
        create_chain@res 0060              ld_clust@dir 0003                     l4001 47EC  
                   l4011 486A                     l4003 47F8                     l4013 4886  
                   l4005 480E                     l4101 5622                     l4031 4D22  
                   l4023 4CEA                     l4015 48A6                     l4007 4846  
                   l4103 5668                     l4041 4D72                     l4025 4CFA  
                   l4017 48AE                     l4105 5670                     l4121 30BC  
                   l4113 303E                     l4201 2902                     l4051 4DE0  
                   l4043 4D76                     l4035 4D36                     l4027 4D0C  
                   l4019 48B2                     l4107 5674                     l4115 3058  
                   l4211 29BC                     l4203 2926                     l5011 3694  
                   l4053 4DF2                     l4045 4D9C                     l4037 4D5E  
                   l4061 48CA                     l4109 5690                     l5101 5052  
                   l4141 323A                     l4133 31C6                     l4125 3128  
                   l4117 3082                     l4221 2A86                     l4213 2A1C  
                   l4205 2934                     l4301 395E                     l5021 36DC  
                   l5005 3668                     l4055 4E08                     l4039 4D6A  
                   l4071 4954                     l4063 48CE                     l5103 505A  
                   l4151 330E                     l4143 324A                     l4135 31FC  
                   l4127 3156                     l4119 30AA                     l4231 2B82  
                   l4223 2AEE                     l4207 2970                     l4303 396A  
                   l5031 3708                     l5023 36E2                     l5007 3678  
                   l4057 4E0C                     l4049 4DC4                     l4081 49F0  
                   l4073 4962                     l4065 48EA                     l4401 1C84  
                   l5105 506E                     l4137 320A                     l4129 315A  
                   l4161 33E4                     l4217 2A30                     l4209 299C  
                   l4321 3A36                     l4305 3994                     l4313 39D2  
                   l5041 3758                     l5033 3718                     l5025 36F2  
                   l5017 36BC                     l5009 367C                     l4083 4A0C  
                   l4075 49C0                     l4067 4906                     l4411 1CB6  
                   l4403 1C94                     l4251 5B04                     l5131 5152  
                   l5123 50E4                     l5115 5088                     l4155 3388  
                   l4147 32BC                     l4139 321A                     l4227 2B02  
                   l4219 2A62                     l4235 2B96                     l4171 2774  
                   l4331 3AA8                     l4323 3A50                     l4315 39FE  
                   l4307 39A4                     l5051 377A                     l5043 3760  
                   l5027 3702                     l5019 36CC                     l5035 3720  
                   l5203 462C                     l4085 4A42                     l4077 49D6  
                   l4069 494C                     l4093 55D0                     l4421 1DAA  
                   l4413 1CDC                     l4501 225C                     l4261 5CF6  
                   l4253 5B0E                     l4245 5AD6                     l5141 51A0  
                   l5125 5108                     l5117 50B2                     l5109 507A  
                   l5301 0864                     l4157 33C0                     l4149 32EE  
                   l4229 2B3A                     l4181 2804                     l4173 2784  
                   l4237 2BD0                     l4341 3B52                     l4333 3AB8  
                   l4309 39BE                     l5061 37D2                     l5053 3794  
                   l5045 3764                     l5037 373C                     l5029 3704  
                   l5213 4694                     l5205 4648                     l4095 55D4  
                   l4503 2260                     l4431 1EB2                     l4423 1DCE  
                   l4415 1D00                     l4407 1C9A                     l4255 5CDA  
                   l5151 549E                     l4247 5AE6                     l5135 5158  
                   l5119 50DE                     l5071 4F5C                     l4271 556C  
                   l4263 550A                     l4191 2878                     l4183 2828  
                   l4175 2796                     l4167 2730                     l4343 3B7C  
                   l4335 3ACE                     l4319 3A1A                     l5231 5212  
                   l5223 51A4                     l5063 37E6                     l5055 37A0  
                   l5039 374C                     l5215 46BC                     l5207 4650  
                   l4089 4A4C                     l4097 5604                     l4441 1EEC  
                   l4433 1EB8                     l4425 1E34                     l4417 1D16  
                   l4409 1CAE                     l4257 5CE6                     l5153 54D6  
                   l5145 5442                     l4249 5AF4                     l5129 510E  
                   l4361 5D70                     l4353 5D66                     l5073 4F60  
                   l5401 0B5A                     l5321 08E8                     l5313 089C  
                   l5305 086A                     l4265 5516                     l4193 2884  
                   l4185 282C                     l4177 27F0                     l4169 274A  
                   l4345 3B8C                     l4337 3AFE                     l4329 3A78  
                   l4281 3846                     l4601 22BA                     l5233 523A  
                   l5225 51BE                     l4521 5B40                     l5065 37E8  
                   l5057 37B4                     l4513 5A5C                     l5241 43C2  
                   l5217 46E2                     l5209 4680                     l4099 5612  
                   l4347 5D8E                     l4451 1F8C                     l4443 1EFC  
                   l4435 1EDC                     l4419 1D6C                     l4259 5CF2  
                   l5147 545C                     l5155 5500                     l5171 583A  
                   l5163 5800                     l4371 5D7A                     l4363 5D72  
                   l4355 5D6A                     l5091 4FF4                     l5083 4F92  
                   l5075 4F7A                     l5403 0B6C                     l5323 08F8  
                   l5315 08AC                     l5307 0884                     l4267 5558  
                   l4195 2894                     l4187 283A                     l4339 3B0E  
                   l4283 3870                     l4275 37FC                     l5235 5270  
                   l5227 51CE                     l4523 5B44                     l5067 37F8  
                   l5059 37D0                     l4515 5A6C                     l5251 4430  
                   l5243 43DE                     l5219 471C                     l3821 5BAA  
                   l4349 5DAA                     l4453 1F9C                     l4437 1EE4  
                   l4429 1E8C                     l4381 5DB6                     l5149 5476  
                   l5181 5882                     l5173 5848                     l5165 5810  
                   l4373 5D84                     l4365 5D74                     l4357 5D6C  
                   l4701 3F18                     l5093 500E                     l5085 4FAC  
                   l5077 4F8E                     l5501 0FD6                     l5421 0BCE  
                   l5413 0B88                     l5341 0950                     l5325 0906  
                   l5317 08C4                     l5333 0912                     l5309 0896  
                   l4197 28EE                     l4189 2844                     l4293 38E0  
                   l4277 3812                     l4285 3884                     l4621 23FA  
                   l4605 22C0                     l4533 3BBA                     l5229 5202  
                   l5237 5288                     l4525 5B48                     l4517 5A74  
                   l5261 4488                     l5253 4448                     l5245 43FA  
                   l3911 5776                     l3903 5756                     l4471 2126  
                   l4463 20B2                     l4455 2016                     l4439 1EEA  
                   l4447 1F42                     l4391 1C62                     l4383 5DC6  
                   l5159 5506                     l5183 588C                     l5175 5852  
                   l5167 5826                     l4375 5D86                     l4367 5D76  
                   l4359 5D6E                     l4711 3F3A                     l5095 5012  
                   l5087 4FC8                     l5079 4F92                     l5511 1032  
                   l5503 0FE8                     l5423 0BE4                     l5407 0B72  
                   l5335 091C                     l5319 08DA                     l4295 38FC  
                   l4287 38B0                     l4279 382E                     l4631 2422  
                   l4615 2344                     l4607 22DE                     l4551 3CB4  
                   l4543 3C3A                     l4535 3BEA                     l4527 5B64  
                   l4519 5A8E                     l5263 4498                     l5255 445C  
                   l5247 4400                     l5191 45C0                     l3817 5DD4  
                   l3833 5E04                     l3825 5BC4                     l3841 5D3E  
                   l3921 57D0                     l3913 5788                     l3905 576A  
                   l4481 218C                     l4465 20D8                     l4449 1F68  
                   l4393 1C6A                     l5177 5870                     l5169 582E  
                   l4377 5D88                     l4369 5D78                     l4721 3F5E  
                   l4713 3F42                     l4705 3F2E                     l5097 5028  
                   l5089 4FE4                     l5521 10E6                     l5513 1074  
                   l5441 0CEE                     l5425 0C1C                     l5409 0B82  
                   l5353 0978                     l5345 0956                     l5337 092C  
                   l5329 090C                     l5601 52D8                     l4297 3910  
                   l4289 38CC                     l4641 24AA                     l4633 2454  
                   l4625 2400                     l4617 239E                     l4609 2316  
                   l4561 3D32                     l4545 3C50                     l4537 3C02  
                   l4529 5B8C                     l5281 44E4                     l5265 44B4  
                   l5257 4474                     l5249 4416                     l5193 45CA  
                   l5185 4572                     l3835 5E06                     l3827 5BCC  
                   l3819 5B9E                     l3851 5D62                     l3843 5D44  
                   l3923 57E4                     l3915 5790                     l4491 21CC  
                   l4483 2190                     l4475 214E                     l4459 20A2  
                   l4395 1C7A                     l4387 5DCC                     l5179 5880  
                   l4379 5D8A                     l4731 3FAE                     l4723 3F84  
                   l4715 3F48                     l5099 5040                     l5531 120E  
                   l5523 10F8                     l5435 0C76                     l5427 0C38  
                   l5419 0BAE                     l5371 0A10                     l5363 09BC  
                   l5355 0988                     l5347 0966                     l5339 0942  
                   l5611 533C                     l5603 52EA                     l4643 24C2  
                   l4627 241C                     l4619 23DE                     l4571 3DA4  
                   l4563 3D66                     l4547 3C7A                     l4539 3C34  
                   l4811 53CA                     l5267 44C4                     l5291 456E  
                   l5195 45F6                     l5187 458C                     l3837 5DEE  
                   l3829 5BE4                     l3845 5D58                     l3861 56C0  
                   l3941 5C36                     l3933 5BFE                     l3917 57B4  
                   l3909 5770                     l4493 21D2                     l4485 2192  
                   l4477 2174                     l4469 2100                     l4741 3FF6  
                   l4733 3FC2                     l4725 3FAA                     l4717 3F4A  
                   l4709 3F36                     l5541 12BE                     l5533 124A  
                   l5525 1184                     l5509 100A                     l5461 0DF0  
                   l5437 0CB4                     l5429 0C54                     l5373 0A2C  
                   l5381 0A94                     l5365 09C4                     l5357 09A8  
                   l5613 534C                     l5605 52F4                     l6181 2BB2  
                   l4653 24E2                     l4565 3D84                     l4581 3E2C  
                   l4557 3CE2                     l4549 3C9E                     l4821 5422  
                   l4813 53D2                     l4805 5370                     l4901 4E3C  
                   l5285 44FE                     l5189 45B6                     l5701 2EA8  
                   l3951 58B0                     l3839 5D3C                     l3871 56DA  
                   l3855 5696                     l3935 5C0C                     l3919 57B8  
                   l4479 217C                     l4399 1C80                     l4831 4214  
                   l4751 4054                     l4743 4002                     l4735 3FC4  
                   l4719 3F5A                     l5551 13AE                     l5543 12F2  
                   l5535 125A                     l5519 1096                     l5455 0D8A  
                   l5447 0D38                     l5439 0CD2                     l5391 0AFA  
                   l5383 0A9C                     l5375 0A40                     l5295 0834  
                   l5607 5306                     l6183 3400                     l4671 25B2  
                   l4647 24C8                     l4639 246A                     l4591 3F02  
                   l4583 3E48                     l4559 3D0A                     l4823 5426  
                   l4807 5384                     l4815 53DA                     l4903 4E4C  
                   l5199 4612                     l5711 2F14                     l5703 2EC2  
                   l5631 2BFA                     l5623 2BD4                     l3961 58EC  
                   l3953 58B8                     l3849 5D5E                     l3881 56FE  
                   l3873 56E0                     l3857 56A8                     l3865 56C6  
                   l3937 5C0E                     l3945 5C3C                     l3929 57FC  
                   l6185 2216                     l4497 21FA                     l4489 21A6  
                   l4841 429C                     l4833 4230                     l4825 41DC  
                   l5561 4A6E                     l4761 4090                     l4753 4066  
                   l4737 3FD4                     l5545 1322                     l5537 126C  
                   l5457 0DAA                     l5449 0D58                     l5393 0B06  
                   l5385 0AAE                     l5377 0A8C                     l5369 09DE  
                   l5297 0840                     l5617 5352                     l5609 5310  
                   l4681 2610                     l4673 25CA                     l4665 252A  
                   l4577 3DDA                     l4569 3D8A                     l4817 53F4  
                   l4809 53C2                     l4921 4ED4                     l4913 4E9C  
                   l5289 4530                     l5721 2F80                     l5713 2F16  
                   l5705 2ED8                     l5641 2C3C                     l5633 2C02  
                   l5625 2BE8                     l3971 5918                     l3963 58FE  
                   l3891 5732                     l3883 5710                     l3875 56E6  
                   l3867 56CE                     l3859 56AC                     l3939 5C26  
                   l4499 2202                     l4843 42C4                     l4835 4250  
                   l4851 438C                     l4827 41EA                     l5571 4B16  
                   l5563 4A88                     l4771 40D8                     l4763 40A4  
                   l4755 408C                     l4747 402C                     l4739 3FE4  
                   l5547 1352                     l5539 128A                     l5491 0F1A  
                   l5483 0EDA                     l5475 0E78                     l5467 0E06  
                   l5459 0DC0                     l5395 0B2C                     l5387 0AB4  
                   l5299 0854                     l5619 536C                     l4683 2616  
                   l4667 255C                     l4659 2502                     l4691 26C6  
                   l4595 2264                     l4579 3DF8                     l4819 541E  
                   l4923 4EEE                     l4915 4EB0                     l4907 4E54  
                   l5731 3012                     l5723 2FB2                     l5715 2F3E  
                   l5707 2EF2                     l5651 2C82                     l5643 2C54  
                   l5635 2C06                     l5811 17D0                     l5803 1762  
                   l3973 5930                     l3957 58CC                     l3949 58A4  
                   l3893 5736                     l3885 5714                     l3877 56EA  
                   l3869 56D4                     l3981 4732                     l4853 43BA  
                   l4845 42EC                     l4837 4264                     l4829 41FA  
                   l5581 4B7A                     l5573 4B3E                     l5565 4ABA  
                   l5557 4A50                     l4765 40A6                     l4749 403C  
                   l4773 40E0                     l5549 13A2                     l5493 0F1E  
                   l5485 0EDE                     l5477 0EBE                     l5469 0E56  
                   l5397 0B30                     l5389 0AE4                     l4693 26DA  
                   l4685 2646                     l4669 25A4                     l4597 2286  
                   l4589 3E64                     l4861 4BD4                     l4941 3464  
                   l4917 4EBC                     l4909 4E88                     l5725 2FDA  
                   l5709 2F06                     l5717 2F52                     l5661 2CCC  
                   l5653 2C98                     l5645 2C5C                     l5733 303A  
                   l5637 2C24                     l5629 2BEE                     l5813 180E  
                   l5805 17A4                     l5741 13E2                     l3975 593C  
                   l3967 5904                     l3959 58D4                     l3895 573E  
                   l3887 571A                     l3879 56FA                     l3991 476E  
                   l3983 4744                     l4847 433C                     l4839 4280  
                   l5583 4B92                     l5575 4B3E                     l5567 4ACA  
                   l5559 4A5E                     l4791 41B2                     l4783 4152  
                   l4775 4108                     l4767 40C4                     l5495 0F52  
                   l5487 0EFA                     l5399 0B40                     l5591 5296  
                   l4695 272C                     l4679 25F2                     l4687 2668  
                   l4599 2298                     l4871 4C52                     l4863 4BDC  
                   l4951 34CA                     l4943 3480                     l4935 3430  
                   l4927 4F2C                     l4919 4ECC                     l5727 2FEE  
                   l5719 2F62                     l5671 2D32                     l5655 2CA8  
                   l5663 2CD8                     l5647 2C6C                     l5639 2C34  
                   l5823 18CE                     l5815 184A                     l5831 19D6  
                   l5807 17BC                     l5751 1426                     l5743 13F2  
                   l3969 5914                     l3897 574C                     l3889 572C  
                   l4849 437E                     l5577 4B5A                     l5569 4AEE  
                   l5585 4BA8                     l4785 4162                     l4777 4114  
                   l4769 40D0                     l4793 41BA                     l5497 0F6E  
                   l5489 0EFE                     l5593 52AA                     l4689 2684  
                   l4881 4CBE                     l4873 4C7E                     l4865 4C10  
                   l4857 4BAC                     l4961 3520                     l4953 34E4  
                   l4945 3494                     l4937 3444                     l4929 4F46  
                   l5729 3002                     l5681 2D8C                     l5673 2D32  
                   l5665 2CFA                     l5657 2CBA                     l5649 2C7E  
                   l5833 1A0C                     l5841 1A6A                     l5825 1936  
                   l5817 186E                     l5761 14E8                     l5737 13CE  
                   l3899 5752                     l3995 4782                     l3987 475A  
                   l3979 4722                     l5579 4B6A                     l4795 41BE  
                   l4787 417A                     l4779 4128                     l4699 3F08  
                   l5499 0FA2                     l5595 52B8                     l4883 4CCE  
                   l4859 4BC4                     l4963 3532                     l4955 34E8  
                   l4947 34B0                     l4939 3448                     l4891 5A0E  
                   l5691 2E10                     l5683 2DB0                     l5675 2D4E  
                   l5667 2D10                     l5659 2CCA                     l5851 1B16  
                   l5835 1A30                     l5827 199C                     l5819 18B8  
                   l5771 159C                     l5763 1538                     l5843 1A88  
                   l5755 1444                     l5747 1406                     l5739 13D6  
                   l3997 47A6                     l4797 41C2                     l4789 418C  
                   l5589 528E                     l4885 4CE0                     l4877 4C9E  
                   l4869 4C24                     l4981 35B4                     l4973 3574  
                   l4965 3548                     l4957 34F8                     l4949 34C2  
                   l4893 5A4A                     l5693 2E30                     l5685 2DCC  
                   l5677 2D6A                     l5669 2D24                     l5861 1BAC  
                   l5845 1AB8                     l5829 19B2                     l5781 1646  
                   l5773 15D4                     l5765 1548                     l5757 14A2  
                   l3999 47CC                     l4799 41D2                     l5599 52BE  
                   l4879 4CA6                     l4991 3602                     l4983 35C4  
                   l4975 3584                     l4967 355C                     l4959 350A  
                   l5695 2E40                     l5687 2DDE                     l5679 2D78  
                   l5871 1C26                     l5863 1BC6                     l5855 1B2C  
                   l5847 1ACE                     l5839 1A46                     l5791 168A  
                   l5775 1614                     l5767 156A                     l5759 14AE  
                   l4897 5D12                     l5881 5C72                     l4993 3612  
                   l4985 35D4                     l4969 356E                     l4977 3590  
                   l4889 59D4                     l5697 2E74                     l5689 2DF4  
                   l5873 1C4E                     l5865 1BD6                     l5857 1B8A  
                   l5849 1AD6                     l5793 16C8                     l5785 165A  
                   l5769 1586                     l5883 5C80                     l4995 3622  
                   l4987 35E4                     l4979 35A0                     l4899 4E24  
                   l5699 2E98                     l5859 1BA2                     l5787 1676  
                   l5779 1630                     l5795 16E4                     l5867 1BDE  
                   l5891 5944                     l5885 5C90                     l5877 5C54  
                   l4997 3632                     l4989 35FE                     l5797 1728  
                   l5869 1BF0                     l5893 5948                     l5879 5C62  
                   l4999 3642                     l5799 174C                     l5895 5970  
                   l5897 599A                     l5889 5940                     l5899 59C0  
                   STR_1 0819                     STR_2 0829                     STR_3 0801  
                   STR_4 081A                     STR_5 081A                     u5000 31C2  
                   u5001 31BE                     u5010 320A                     u5011 3206  
                   u5100 283A                     u5101 2836                     u5030 32B8  
                   u5031 32B4                     u4400 5BFA                     u5200 5D10  
                   u5040 3352                     u5120 28FE                     u6000 24DE  
                   u5201 5D0C                     u5025 3226                     u5121 28FA  
                   u6001 24DA                     u4410 5E00                     u5210 5558  
                   u5050 3384                     u5130 2934                     u6010 24FE  
                   u4411 5DFC                     u5211 5554                     u5051 3380  
                   u5131 2930                     u5115 28C4                     u6011 24FA  
                   u4420 5D58                     u4500 5788                     u6100 3FAA  
                   u5140 2990                     u5060 274A                     u5300 3A16  
                   u5220 3812                     u6020 2526                     u4421 5D54  
                   u4501 5784                     u6101 3FA6                     u5045 3348  
                   u5061 2746                     u5301 3A12                     u5221 380E  
                   u6021 2522                     u4430 56A8                     u4510 57B0  
                   u6110 3FD4                     u5150 2A2C                     u5070 2774  
                   u5310 3A36                     u5230 3846                     u6030 25EE  
                   u4431 56A4                     u6111 3FD0                     u5151 2A28  
                   u5071 2770                     u5311 3A32                     u5231 3842  
                   u6031 25EA                     u4360 5DE6                     u4440 56C0  
                   u4520 57D0                     u4600 4732                     u5400 1C7A  
                   u6200 4108                     u6120 3FE4                     u5160 2ACA  
                   u5320 3A4C                     u5240 3870                     u6040 2646  
                   u7000 4628                     u4361 5DE2                     u4441 56BC  
                   u4521 57CC                     u4601 472E                     u5401 1C76  
                   u6201 4104                     u6121 3FE0                     u5145 2986  
                   u5321 3A48                     u5241 386C                     u6041 2642  
                   u7001 4624                     u4370 5BC0                     u4450 56FA  
                   u4530 57F8                     u4610 4744                     u5410 1C94  
                   u6210 414E                     u6130 3FF6                     u5170 2AFE  
                   u5090 2800                     u5330 3A74                     u5250 38CC  
                   u7010 4648                     u4371 5BBC                     u4451 56F6  
                   u4531 57F4                     u4611 4740                     u5411 1C90  
                   u6211 414A                     u6131 3FF2                     u5171 2AFA  
                   u5091 27FC                     u5331 3A70                     u5251 38C8  
                   u7011 4644                     u4380 5BE4                     u4460 5710  
                   u4540 5C0C                     u4700 4846                     u4620 475A  
                   u5500 1E5C                     u5420 1CAE                     u6300 41FA  
                   u5180 5AF4                     u6220 417A                     u6140 4028  
                   u6060 3F18                     u5340 3AB8                     u5260 38FC  
                   u7100 4484                     u7020 4690                     u4381 5BE0  
                   u4461 570C                     u4541 5C08                     u4517 57A6  
                   u4701 4842                     u4621 4756                     u5421 1CAA  
                   u6301 41F6                     u5181 5AF0                     u6221 4176  
                   u6141 4024                     u6061 3F14                     u5165 2AC0  
                   u5085 27C6                     u5341 3AB4                     u5261 38F8  
                   u7101 4480                     u7021 468C                     u4390 5BF8  
                   u4470 572C                     u4550 5C36                     u4710 4866  
                   u4630 476E                     u5510 1E8C                     u5430 1CDC  
                   u6310 4214                     u5190 5B2E                     u6230 418C  
                   u6150 4054                     u6070 3F2E                     u5350 3ACE  
                   u5270 393A                     u7110 44C4                     u7030 46BC  
                   u4391 5BF2                     u4471 5728                     u4551 5C32  
                   u4711 4862                     u4631 476A                     u5511 1E88  
                   u5431 1CD8                     u6311 4210                     u5191 5B2A  
                   u6231 4188                     u6151 4050                     u6071 3F2A  
                   u5351 3ACA                     u5271 3936                     u6055 26E8  
                   u7111 44C0                     u7031 46B8                     u4560 58C8  
                   u4480 574C                     u4720 4886                     u4640 4782  
                   u5520 1EB2                     u5440 1D00                     u6320 4230  
                   u6240 41B2                     u6160 4066                     u6080 3F5A  
                   u7200 08F8                     u5360 3B0E                     u5280 3994  
                   u6400 4CE0                     u7120 44D6                     u7040 471C  
                   u8000 1676                     u4561 58C4                     u4481 5748  
                   u4721 4882                     u4641 477E                     u5521 1EAE  
                   u5505 1E52                     u5441 1CFC                     u6321 422C  
                   u6241 41AE                     u6161 4062                     u6081 3F56  
                   u7201 08F4                     u5361 3B0A                     u5281 3990  
                   u6401 4CDC                     u7121 44D2                     u7041 4718  
                   u8001 1672                     u4570 58EC                     u4810 4D5E  
                   u4490 576A                     u4730 48A6                     u5530 1EDC  
                   u5450 1D16                     u6330 43BA                     u6250 41D2  
                   u6170 408C                     u6090 3F84                     u7210 0906  
                   u5370 3B52                     u5290 39BE                     u7050 51CE  
                   u6410 5A0E                     u7130 44E4                     u8010 16C8  
                   u4571 58E8                     u4811 4D5A                     u4491 5766  
                   u4731 48A2                     u5531 1ED8                     u5451 1D12  
                   u6331 43B6                     u6251 41CE                     u6171 4088  
                   u6091 3F80                     u7211 0902                     u5371 3B4E  
                   u5291 39BA                     u7051 51CA                     u6411 5A0A  
                   u7131 44E0                     u8011 16C4                     u4580 58FE  
                   u4820 4D9C                     u4740 48C6                     u4660 47A6  
                   u4900 49C0                     u5700 21F6                     u5540 1EFC  
                   u6180 40B6                     u7300 0B40                     u7220 0950  
                   u5380 3B8C                     u6340 4BD4                     u6260 53B2  
                   u7060 5212                     u6500 34F8                     u6420 4E4C  
                   u7140 44FA                     u8020 1728                     u4581 58FA  
                   u4821 4D98                     u4805 4D38                     u4741 48C0  
                   u4661 47A2                     u4901 49BC                     u5701 21F2  
                   u5605 1FC8                     u5541 1EF8                     u6181 40B2  
                   u7301 0B3C                     u7221 094C                     u5381 3B88  
                   u6341 4BD0                     u7061 520E                     u6501 34F4  
                   u6421 4E48                     u7141 44F6                     u8021 1724  
                   u4590 5930                     u4830 4DC0                     u4750 48C8  
                   u4670 47CC                     u4910 49EC                     u5630 20D8  
                   u5614 1FE8                     u5550 1F20                     u5390 5DC6  
                   u6190 40C4                     u7310 0B5A                     u7230 0966  
                   u6350 4C20                     u6270 53F0                     u6510 350A  
                   u5710 5A8E                     u6430 4E98                     u7150 452C  
                   u7070 43DE                     u8030 174C                     u4591 592C  
                   u4831 4DBC                     u4671 47C8                     u4655 4784  
                   u4911 49E8                     u5631 20D4                     u5615 1FE2  
                   u5391 5DC2                     u6191 40C0                     u7311 0B56  
                   u7231 0962                     u6351 4C1C                     u6271 53EC  
                   u6511 3506                     u5711 5A8A                     u6431 4E94  
                   u7151 4528                     u7071 43DA                     u8031 1748  
                   u4840 4DE0                     u4760 4CFA                     u4680 47EC  
                   u4920 5604                     u5640 20FC                     u5560 1F68  
                   u7400 0D86                     u7320 0B6C                     u7240 0974  
                   u7160 0864                     u5800 3CDE                     u6360 4C52  
                   u6280 541C                     u6600 35D4                     u6520 351C  
                   u5720 5ACC                     u6440 4ECC                     u7080 43FA  
                   u8120 1A0C                     u8040 17BC                     u8200 5970  
                   u4841 4DDC                     u4761 4CF6                     u4681 47E8  
                   u4921 5600                     u5641 20F8                     u5625 2054  
                   u5561 1F64                     u5465 1D7E                     u7401 0D82  
                   u7321 0B68                     u7241 0970                     u7161 0860  
                   u5801 3CDA                     u6361 4C4E                     u6601 35D0  
                   u6521 3518                     u5721 5AC8                     u6441 4EC8  
                   u7081 43F6                     u8121 1A08                     u8105 1978  
                   u8041 17B8                     u8201 596C                     u4850 4DF2  
                   u4770 4D0C                     u4690 480E                     u4930 5622  
                   u5650 2126                     u5570 1F8C                     u7410 0DC0  
                   u7330 0B82                     u7250 09B8                     u7170 0896  
                   u5810 3D84                     u6370 4C7E                     u6290 5440  
                   u5730 5B64                     u6610 35E4                     u6530 3532  
                   u6450 4EEE                     u7090 4430                     u8130 1A30  
                   u8210 599A                     u4851 4DEE                     u4771 4D08  
                   u4691 480A                     u4931 561E                     u5651 2122  
                   u5571 1F88                     u5555 1F16                     u5475 1DB2  
                   u7411 0DBC                     u7331 0B7E                     u7251 09B4  
                   u7171 0892                     u5811 3D80                     u6371 4C7A  
                   u6291 543C                     u6267 53A2                     u5731 5B60  
                   u6611 35E0                     u6531 352E                     u6451 4EEA  
                   u7091 442C                     u8131 1A2C                     u8115 19BC  
                   u8211 5996                     u4860 4E20                     u4780 4D22  
                   u4940 5668                     u5660 214A                     u5580 1F9C  
                   u7420 0E02                     u7340 0BAA                     u7260 09DA  
                   u7180 08C4                     u5900 22DE                     u5820 3DA4  
                   u6380 4C9A                     u5740 5B8C                     u6700 36F2  
                   u6620 3612                     u6540 3548                     u6460 4F28  
                   u8140 1ACE                     u8060 180E                     u4861 4E1A  
                   u4781 4D1E                     u4941 5664                     u5661 2146  
                   u5581 1F98                     u5485 1DD8                     u7421 0DFE  
                   u7341 0BA6                     u7261 09D6                     u7181 08C0  
                   u5901 22DA                     u5821 3DA0                     u6381 4C96  
                   u5741 5B88                     u6701 36EE                     u6621 360E  
                   u6541 3544                     u6461 4F24                     u8141 1ACA  
                   u8061 180A                     u4870 4E22                     u4790 4D36  
                   u5670 2174                     u7510 1092                     u7350 0BE4  
                   u7270 0A2C                     u7190 08E8                     u4950 3058  
                   u5910 2316                     u5830 3DD6                     u5750 3C02  
                   u6390 4CCE                     u6710 3702                     u6630 3622  
                   u6550 355C                     u6470 4F56                     u8150 1B16  
                   u8070 184A                     u4791 4D32                     u5671 2170  
                   u5495 1DFE                     u7511 108E                     u7351 0BE0  
                   u7271 0A28                     u7191 08E4                     u4951 3054  
                   u5911 2312                     u5831 3DD2                     u5751 3BFE  
                   u6391 4CCA                     u6287 5412                     u6711 36FE  
                   u6631 361E                     u6551 3558                     u6471 4F52  
                   u8151 1B12                     u8071 1846                     u8055 17E8  
                   u4880 48EA                     u5680 21A2                     u6800 4FC8  
                   u7600 1352                     u7520 10F8                     u7440 0E74  
                   u7360 0C54                     u7280 0AAE                     u4960 3082  
                   u5920 2340                     u5840 3DF8                     u5760 3C34  
                   u6720 374C                     u6640 3632                     u6560 356E  
                   u6480 3464                     u8160 1BF0                     u8080 18B8  
                   u4881 48E6                     u5681 219E                     u6801 4FC4  
                   u7601 134E                     u7521 10F4                     u7505 1050  
                   u7441 0E70                     u7361 0C50                     u7281 0AAA  
                   u4961 307E                     u5921 233C                     u5841 3DF4  
                   u5761 3C30                     u6721 3748                     u6641 362E  
                   u6561 356A                     u6481 3460                     u8161 1BEC  
                   u8081 18B4                     u4890 494C                     u5690 21CC  
                   u7610 4A6E                     u6810 4FE4                     u7530 11DA  
                   u7450 0ED6                     u7370 0C72                     u7290 0AFA  
                   u5850 3E60                     u5770 3C50                     u6730 3776  
                   u6650 3642                     u6570 35A0                     u6490 3480  
                   u8170 1C26                     u8090 1936                     u4891 4948  
                   u5691 21C8                     u5595 1FA4                     u7611 4A6A  
                   u6811 4FE0                     u7451 0ED2                     u7435 0E1E  
                   u7371 0C6E                     u7291 0AF6                     u5851 3E5C  
                   u5771 3C4C                     u6731 3772                     u6651 363E  
                   u6571 359C                     u6491 347C                     u8171 1C22  
                   u8091 1932                     u6900 5476                     u7620 4A88  
                   u8180 5C72                     u6820 5028                     u7540 120A  
                   u7460 0EFA                     u7380 0CEE                     u4980 3124  
                   u5940 239E                     u5780 3C7A                     u6740 3794  
                   u6660 3664                     u6580 35B4                     u7700 2C34  
                   u6901 5472                     u7621 4A84                     u8181 5C6E  
                   u6821 5024                     u7541 1206                     u7461 0EF6  
                   u7381 0CEA                     u4981 3120                     u5941 239A  
                   u5781 3C76                     u6741 3790                     u6661 3660  
                   u6581 35B0                     u7701 2C30                     u6910 549E  
                   u7630 4ACA                     u8190 5C90                     u6830 5040  
                   u7550 126C                     u7470 0F1A                     u7390 0D34  
                   u5950 23FA                     u5790 3CB4                     u6750 37B4  
                   u6670 36B8                     u6590 35C4                     u7710 2C6C  
                   u6911 549A                     u7631 4AC6                     u8191 5C8C  
                   u6831 503C                     u7551 1268                     u7535 11D0  
                   u7471 0F16                     u7391 0D30                     u4975 30EC  
                   u5951 23F6                     u5935 2350                     u5791 3CB0  
                   u6751 37B0                     u6671 36B4                     u6591 35C0  
                   u7711 2C68                     u6920 54D6                     u6840 5052  
                   u7560 128A                     u7480 0FE8                     u7640 52B8  
                   u5960 241C                     u5880 2298                     u6760 37D0  
                   u6680 36CC                     u7800 2DF4                     u7720 2C7E  
                   u6921 54D2                     u6841 504E                     u7561 1286  
                   u7481 0FE4                     u7641 52B4                     u5961 2418  
                   u5881 2294                     u5865 3E70                     u6761 37CC  
                   u6681 36C8                     u7801 2DF0                     u7721 2C7A  
                   u6930 5500                     u6850 50DE                     u7570 12BE  
                   u7490 1006                     u7650 52EA                     u5970 2454  
                   u5890 22BA                     u6770 37E6                     u6690 36DC  
                   u7810 2E40                     u7730 2C98                     u6931 54FC  
                   u6851 50DA                     u7571 12BA                     u7491 1002  
                   u7651 52E6                     u4995 318A                     u5971 2450  
                   u5891 22B6                     u5875 3EBE                     u6771 37E2  
                   u6691 36D8                     u7811 2E3C                     u7731 2C94  
                   u6940 5826                     u6860 5108                     u6780 4F7A  
                   u7580 12F2                     u7660 5306                     u5980 2466  
                   u7820 2EA8                     u7740 2CA8                     u7900 1422  
                   u6941 5822                     u6861 5104                     u6781 4F76  
                   u7581 12EE                     u7661 5302                     u5981 2462  
                   u7821 2EA4                     u7741 2CA4                     u7901 141E  
                   u6950 5848                     u6870 5152                     u6790 4FAC  
                   u7590 1322                     u7670 533C                     u5990 24C2  
                   u7830 2EC2                     u7750 2CBA                     u7910 1440  
                   u6951 5844                     u6871 514E                     u6791 4FA8  
                   u7591 131E                     u7671 5338                     u5991 24BE  
                   u7831 2EBE                     u7751 2CB6                     u7911 143C  
                   u6960 5870                     u6880 519C                     u7680 534C  
                   u7840 2ED8                     u7760 2CFA                     u7920 14A2  
                   u6961 586C                     u6881 5198                     u7681 5348  
                   u7841 2ED4                     u7761 2CF6                     u7921 149E  
                   u6890 545C                     u6970 458C                     u7850 2EF2  
                   u7770 2D10                     u7690 2BE8                     u7930 14E8  
                   u8707 5BC6                     u6891 5458                     u6971 4588  
                   u7851 2EEE                     u7771 2D0C                     u7691 2BE4  
                   u7931 14E4                     u6980 45B6                     u7860 2F06  
                   u7780 2D24                     u7940 1514                     u8717 58CE  
                   u6981 45B2                     u7861 2F02                     u7781 2D20  
                   u6990 460E                     u7870 2F14                     u7790 2D32  
                   u7950 1548                     u6991 460A                     u7871 2F10  
                   u7791 2D2E                     u7951 1544                     u7880 2F62  
                   u7960 156A                     u7881 2F5E                     u7961 1566  
                   u7945 150A                     u7970 159C                     u7890 1402  
                   u7971 1598                     u7891 13FE                     u7980 162C  
                   u7981 1628                     u7990 1646                     u8687 4032  
                   u7991 1642                     u8697 4158                     _Fsid 00D2  
                   _Stat 00F7                     _main 5940             find_volume@i 0095  
                   fsr0h 0FEA                     fsr1h 0FE2                     indf0 0FEF  
                   fsr2h 0FDA                     fsr0l 0FE9                     indf1 0FE7  
                   indf2 0FDF                     fsr1l 0FE1                     fsr2l 0FD9  
          disk_ioctl@cmd 0011            disk_ioctl@csd 001F            disk_read@buff 0011  
          disk_ioctl@res 0034            disk_ioctl@ptr 0036            disk_read@pdrv 0019  
                   prodh 0FF4                     prodl 0FF3           ??_get_ldnumber 0003  
                   start 0000       disk_initialize@cmd 0019             ?_follow_path 0087  
     disk_initialize@ocr 0013             ___param_bank 0000       disk_initialize@tmr 001B  
        create_name@path 000B         create_chain@clst 0058              _sync_window 48CA  
                  ?_main 0001                    _ADRES 0FC3          __end_of___lldiv 58A4  
                  _LATA5 7C4D                    _TRISD 0F95          __end_of_f_close 5C9E  
                  _FatFs 05D2          __end_of_chk_chr 5B9E      ___lmul@multiplicand 0005  
        __end_of_f_mount 5370             ___send_cmd@n 0009          __end_of_dir_sdi 3F06  
        __end_of_f_write 1C60          __end_of_get_fat 3430  __end_of_SPI_Init_Master 5D8E  
        __end_of_mem_cmp 5AD6          __end_of_mem_cpy 5442          __end_of_mem_set 5D12  
          find_volume@br 0060            find_volume@fs 0098            find_volume@pt 007A  
         disk_ioctl@buff 0012           disk_read@count 0017                    tablat 0FF5  
         disk_ioctl@pdrv 002F                    plusw2 0FDB          __end_of_put_fat 2BD4  
                  status 0FD8          __end_of_sync_fs 43C2            get_ldnumber@i 0009  
        __initialization 5C9E      disk_initialize@pdrv 0012             __end_of_main 59D4  
           clust2sect@fs 000D                   ??_main 0060            __activetblptr 0002  
                 _SSPBUF 0FC9     __end_of_dir_register 528E         __end_of_check_fs 51A4  
       __end_of_deselect 5E0E         __end_of_dir_find 4F5C         __end_of_dir_next 2730  
           ?_move_window 0030     __end_of_create_chain 3BBA         __end_of_ld_clust 5A5C  
                 ___lmul 5AD6                   ___wmul 5D8E                ??___lldiv 0009  
                 _f_open 2BD4                   _f_sync 4A50                ??_f_close 004A  
         find_volume@fmt 0097                   clear_0 5CB8                   clear_1 5CCA  
         find_volume@rfs 0045                ??_chk_chr 0005           find_volume@vol 0080  
                 _select 5D3C                   isa$std 0001                ??_f_mount 0057  
              ??_dir_sdi 0059                ??_f_write 0075                ??_get_fat 0041  
                 main@bx 00D0         __end_of_send_cmd 5C54                ??_mem_cmp 0007  
      __end_of_SPI_Write 5E04                ??_mem_cpy 0007                ??_mem_set 0007  
        disk_ioctl@csize 0030         __end_of_validate 550A     __end_of_get_ldnumber 5088  
           __mediumconst 0000          disk_read@sector 0013                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8         __end_of_st_clust 5D3C  
       ?_SPI_Init_Master 0001                ??_put_fat 0045          xmit_datablock@i 0007  
              ??_sync_fs 003A       rcvr_datablock@buff 0002               __accesstop 0060  
__end_of__initialization 5CD0           disk_write@buff 0011           get_ldnumber@tp 0005  
         get_ldnumber@tt 000B           disk_write@pdrv 001A            _FatFs@ff$F740 00D4  
          ___rparam_used 0001           __pcstackCOMRAM 0001             __pidataBANK0 5E0E  
             ___send_cmd 5694               __pbssBANK0 00D2         _find_volume$1235 0070  
       _find_volume$1236 0074                  ?___lmul 0001                  ?___wmul 0001  
                ?_f_open 009A                  ?_f_sync 0043        ??_disk_initialize 0011  
           ?_sync_window 001B           ___lmul@product 0009                  ?_select 0001  
              ?_check_fs 003B               _disk_ioctl 1C60           follow_path@dir 008B  
         follow_path@res 008E               _disk_write 4720              send_cmd@cmd 000F  
              ?_deselect 0001              send_cmd@arg 000B              send_cmd@res 0010  
         remove_chain@fs 0056                ?_dir_find 0081                ?_dir_next 006D  
              ?_ld_clust 0001               _clust2sect 550A         sync_window@wsect 002C  
          ?_remove_chain 0056        __end_of_dir_alloc 4CE8                ?_send_cmd 000B  
                __Hparam 0000           ___send_cmd@cmd 000A           ___send_cmd@arg 0004  
         ___send_cmd@res 0008                  __Lparam 0000                ?_validate 0002  
      __end_of_disk_read 4E24               f_close@res 004A                ?_st_clust 0001  
            ?___send_cmd 0004                  ___lldiv 5800               check_fs@fs 003B  
           __psmallconst 0800                  _f_close 5C54                  __pcinit 5C9E  
                _chk_chr 5B40      _disk_initialize$641 0017                  __ramtop 0800  
                _f_mount 528E                  __ptext0 5940                  __ptext1 13CE  
                __ptext2 2BD4                  __ptext3 4572                  __ptext4 43C2  
                __ptext5 59D4                  __ptext6 4E24                  __ptext7 5A5C  
                __ptext8 3430                  __ptext9 5B40                  _dir_sdi 3BBA  
            validate@fil 0008                  _f_write 13CE              validate@obj 0002  
                _get_fat 303E               chk_chr@chr 0003             _dir_register 51A4  
             chk_chr@str 0001                  _mem_cmp 5A5C                  _mem_cpy 5370  
                _mem_set 5CDA               ??_check_fs 0041          find_volume@path 0047  
        find_volume@nrsv 0082          find_volume@stat 008C             _create_chain 37FC  
             ??_deselect 0002               ??_dir_find 0060                  _put_fat 2730  
             ??_dir_next 0071               ??_ld_clust 0005                  _sync_fs 41DC  
   end_of_initialization 5CD0               f_open@mode 009E               f_open@path 009C  
         ??_remove_chain 005C            __Lmediumconst 0000          disk_status@pdrv 0001  
         _rcvr_datablock 58A4          ___lldiv@divisor 0005               f_mount@cfs 0058  
             f_mount@res 0057               ??_send_cmd 000F               f_mount@opt 0056  
             f_mount@vol 005C          ___lldiv@counter 000D             _get_ldnumber 4F5C  
             ??_validate 0004                  postdec1 0FE5                  postdec2 0FDD  
                postinc0 0FEE                  postinc1 0FE6                  postinc2 0FDE  
             ??_st_clust 0007           move_window@res 003A               _wait_ready 5B9E  
             dir_alloc@n 0088         remove_chain@clst 0058               dir_find@dp 0081  
             dir_sdi@idx 0057               dir_next@dp 006D              ?_disk_ioctl 0011  
    rcvr_datablock@token 0008               f_write@btw 0071               f_write@res 0081  
              _TRISAbits 0F92                _TRISBbits 0F93              ?_disk_write 0011  
              _TRISCbits 0F94               get_fat@val 004B                _SPI_Write 5DEC  
        get_ldnumber@vol 0007          disk_write@count 0017              ?_clust2sect 000D  
 __end_of_rcvr_datablock 5940            ??_create_name 000D         disk_initialize@n 001D  
             ld_clust@cl 000B               ld_clust@fs 0001            ??_find_volume 004A  
          ?_SPI_Exchange 0001            ??_disk_status 0001           _xmit_datablock 5756  
         __end_of___lmul 5B40              st_clust@dir 0001           __end_of___wmul 5DB4  
         __end_of_f_open 303E           __end_of_f_sync 4BAC           clust2sect@clst 000F  
         __end_of_select 5D66      start_initialization 5C9E               ?_SPI_Write 0001  
             mem_cmp@cnt 0005               mem_cmp@dst 0001               mem_cmp@src 0003  
             mem_cpy@cnt 0005              put_fat@clst 003D               mem_cpy@dst 0001  
             mem_cpy@src 0003          ?_rcvr_datablock 0002          _disk_initialize 3F06  
             mem_set@cnt 0005               mem_set@dst 0001           ??_SPI_Exchange 0001  
             mem_set@val 0003   __end_of_xmit_datablock 5800            ??_follow_path 0060  
    __end_of_create_name 37FC                 ??___lmul 0009                 ??___wmul 0005  
               ??_f_open 009F                 ??_f_sync 0045              ?_wait_ready 0001  
            __pdataBANK0 00F7      __end_of_find_volume 13CE      __end_of_disk_status 5DD2  
               ??_select 0004     __end_of_remove_chain 4720        rcvr_datablock@btr 0004  
      rcvr_datablock@tmr 0006              __pbssBIGRAM 05D2            __pcstackBANK0 0060  
           check_fs@sect 003D          ?_xmit_datablock 0004             ??___send_cmd 0008  
              _dir_alloc 4BAC                 ?___lldiv 0001                 ?_f_close 0048  
              _disk_read 4CE8                 ?_chk_chr 0001            follow_path@dp 0087  
          follow_path@ns 008D      __end_of_follow_path 4572                 ?_f_mount 0052  
               ?_dir_sdi 0055                 ?_f_write 006D                 ?_get_fat 003B  
            __smallconst 0800                 ?_mem_cmp 0001                 ?_mem_cpy 0001  
               ?_mem_set 0001                f_close@fp 0048              ??_SPI_Write 0001  
               ?_put_fat 003B  __end_of_disk_initialize 41DC                 ?_sync_fs 0038  
            _get_fat$881 0049        find_volume@fasize 008D       __end_of___send_cmd 5756  
            _create_name 3430           ___wmul@product 0005                 _LATAbits 0F89  
      find_volume@szbfat 0076                f_open@dir 00B8                f_open@res 00B7  
              f_open@sfn 00A3        find_volume@sysect 007C              _find_volume 0834  
            _disk_status 5DB4            ??_move_window 0036                f_mount@fs 0052  
              f_mount@rp 005A          follow_path@path 0089                 _PIR1bits 0F9E  
          move_window@fs 0030                dir_find@c 0083               ?_dir_alloc 0081  
        remove_chain@res 0060        ??_SPI_Init_Master 0001          remove_chain@nxt 0061  
              f_sync@dir 0046                f_sync@res 0045                dir_sdi@ic 0060  
              dir_sdi@dp 0055                dir_next@c 0079                dir_next@i 007B  
             ?_disk_read 0011                f_write@cc 0085                f_write@bw 0073  
              f_write@fp 006D                get_fat@bc 0053                get_fat@fs 003B  
              get_fat@wc 004F               _ADCON0bits 0FC2               _ADCON1bits 0FC1  
             _ADCON2bits 0FC0        ___wmul@multiplier 0001                 _CardType 00D6  
           ??_disk_ioctl 0014     __end_of_SPI_Exchange 5DEC             ??_disk_write 0019  
             st_clust@cl 0003             ??_clust2sect 0013        ___lmul@multiplier 0001  
             put_fat@res 0053               put_fat@val 0041        move_window@sector 0032  
        dir_next@stretch 006F                 __Hrparam 0000               SPI_Write@x 0001  
               __Lrparam 0000              _follow_path 43C2       __end_of_disk_ioctl 2264  
     __end_of_disk_write 48CA      __end_of_move_window 5694       __end_of_clust2sect 55D0  
               _check_fs 5088      xmit_datablock@token 0006         ??_rcvr_datablock 0006  
        dir_register@res 008D                 _deselect 5E04                 __ptext10 51A4  
               __ptext11 5370                 __ptext20 0834                 __ptext12 4BAC  
               __ptext21 4F5C                 __ptext13 3BBA                 __ptext30 5DB4  
               __ptext22 3F06                 __ptext14 2264                 __ptext31 41DC  
               __ptext23 5D66                 __ptext15 37FC                 __ptext40 4CE8  
               __ptext32 5CDA                 __ptext24 5088                 __ptext16 2730  
               __ptext41 5BFC                 __ptext33 1C60                 __ptext25 5AD6  
               __ptext17 303E                 __ptext42 5694                 __ptext34 5D8E  
               __ptext26 5800                 __ptext18 550A                 __ptext43 5D3C  
               __ptext35 5D12                 __ptext27 5C54                 __ptext19 528E  
               __ptext44 5B9E                 __ptext36 55D0                 __ptext28 4A50  
               __ptext45 5E04                 __ptext37 48CA                 __ptext29 5442  
               __ptext46 5DEC                 __ptext38 4720                 __ptext47 58A4  
               __ptext39 5756                 __ptext48 5DD2                 _dir_find 4E24  
               _dir_next 2264            dir_alloc@nent 0083         ?_disk_initialize 0001  
               _ld_clust 59D4           sync_window@res 0029               sync_fs@res 0042  
           _remove_chain 4572         find_volume@bsect 0091         find_volume@nclst 0088  
       find_volume@tsect 0084         find_volume@wmode 0049                 f_open@dj 00BA  
               f_open@cl 00AF                 f_open@fp 009A                 f_open@dw 00B3  
               _send_cmd 5BFC                 _validate 5442                 isa$xinst 0000  
               f_sync@fp 0043              ??_dir_alloc 0085                 _st_clust 5D12  
               get_fat@p 0051             ??_wait_ready 0002            ??_sync_window 001D  
            ??_disk_read 0019            _disk_read$650 001A                 mem_cmp@d 0009  
               mem_cmp@r 000D                 mem_cmp@s 000B                put_fat@bc 0051  
               mem_cpy@d 0009                put_fat@fs 003B                 mem_cpy@s 000B  
               mem_set@d 0007            wait_ready@tmr 0002       xmit_datablock@buff 0004  
     xmit_datablock@resp 0009           dir_register@dp 008B         ??_xmit_datablock 0007  
     __end_of_wait_ready 5BFC         ___lldiv@dividend 0001             dir_alloc@res 008A  
          sync_window@fs 001B            sync_window@nf 002A              f_mount@path 0054  
              sync_fs@fs 0038              _move_window 55D0                 put_fat@p 0054  
          ?_dir_register 008B              dir_alloc@dp 0081         ___lldiv@quotient 0009  
            dir_find@dir 0084      __end_of_sync_window 4A50              dir_find@res 0086  
          ?_create_chain 0056              _SSPCON1bits 0FC6         _create_name$1131 000F  
           dir_next@clst 007D              dir_sdi@clst 0066              dir_sdi@sect 0062  
           ?_create_name 0009          _SPI_Init_Master 5D66             f_write@csect 0084  
           f_write@wbuff 0082              f_write@buff 006F              f_write@clst 008B  
            f_write@sect 0087             ?_find_volume 0045              f_write@wcnt 008F  
          ?_get_ldnumber 0001             _SPI_Exchange 5DD2             ?_disk_status 0001  
            _put_fat$907 004D              _put_fat$908 004F  
